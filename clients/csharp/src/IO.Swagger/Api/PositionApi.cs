/* 
 * BitMEX API
 *
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPositionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get your positions.
        /// </summary>
        /// <remarks>
        /// See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}. (optional)</param>
        /// <param name="columns">Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)</param>
        /// <param name="count">Number of rows to fetch. (optional)</param>
        /// <returns>List&lt;Position&gt;</returns>
        List<Position> PositionGet (string filter = null, string columns = null, decimal? count = null);

        /// <summary>
        /// Get your positions.
        /// </summary>
        /// <remarks>
        /// See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}. (optional)</param>
        /// <param name="columns">Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)</param>
        /// <param name="count">Number of rows to fetch. (optional)</param>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        ApiResponse<List<Position>> PositionGetWithHttpInfo (string filter = null, string columns = null, decimal? count = null);
        /// <summary>
        /// Enable isolated margin or cross margin per-position.
        /// </summary>
        /// <remarks>
        /// On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Position symbol to isolate.</param>
        /// <param name="enabled">True for isolated margin, false for cross margin. (optional, default to true)</param>
        /// <returns>Position</returns>
        Position PositionIsolateMargin (string symbol, bool? enabled = null);

        /// <summary>
        /// Enable isolated margin or cross margin per-position.
        /// </summary>
        /// <remarks>
        /// On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Position symbol to isolate.</param>
        /// <param name="enabled">True for isolated margin, false for cross margin. (optional, default to true)</param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> PositionIsolateMarginWithHttpInfo (string symbol, bool? enabled = null);
        /// <summary>
        /// Transfer equity in or out of a position.
        /// </summary>
        /// <remarks>
        /// When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to isolate.</param>
        /// <param name="amount">Amount to transfer, in Satoshis. May be negative.</param>
        /// <returns>Position</returns>
        Position PositionTransferIsolatedMargin (string symbol, decimal? amount);

        /// <summary>
        /// Transfer equity in or out of a position.
        /// </summary>
        /// <remarks>
        /// When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to isolate.</param>
        /// <param name="amount">Amount to transfer, in Satoshis. May be negative.</param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> PositionTransferIsolatedMarginWithHttpInfo (string symbol, decimal? amount);
        /// <summary>
        /// Choose leverage for a position.
        /// </summary>
        /// <remarks>
        /// On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to adjust.</param>
        /// <param name="leverage">Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.</param>
        /// <returns>Position</returns>
        Position PositionUpdateLeverage (string symbol, double? leverage);

        /// <summary>
        /// Choose leverage for a position.
        /// </summary>
        /// <remarks>
        /// On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to adjust.</param>
        /// <param name="leverage">Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.</param>
        /// <returns>ApiResponse of Position</returns>
        ApiResponse<Position> PositionUpdateLeverageWithHttpInfo (string symbol, double? leverage);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get your positions.
        /// </summary>
        /// <remarks>
        /// See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}. (optional)</param>
        /// <param name="columns">Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)</param>
        /// <param name="count">Number of rows to fetch. (optional)</param>
        /// <returns>Task of List&lt;Position&gt;</returns>
        System.Threading.Tasks.Task<List<Position>> PositionGetAsync (string filter = null, string columns = null, decimal? count = null);

        /// <summary>
        /// Get your positions.
        /// </summary>
        /// <remarks>
        /// See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}. (optional)</param>
        /// <param name="columns">Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)</param>
        /// <param name="count">Number of rows to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Position>>> PositionGetAsyncWithHttpInfo (string filter = null, string columns = null, decimal? count = null);
        /// <summary>
        /// Enable isolated margin or cross margin per-position.
        /// </summary>
        /// <remarks>
        /// On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Position symbol to isolate.</param>
        /// <param name="enabled">True for isolated margin, false for cross margin. (optional, default to true)</param>
        /// <returns>Task of Position</returns>
        System.Threading.Tasks.Task<Position> PositionIsolateMarginAsync (string symbol, bool? enabled = null);

        /// <summary>
        /// Enable isolated margin or cross margin per-position.
        /// </summary>
        /// <remarks>
        /// On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Position symbol to isolate.</param>
        /// <param name="enabled">True for isolated margin, false for cross margin. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        System.Threading.Tasks.Task<ApiResponse<Position>> PositionIsolateMarginAsyncWithHttpInfo (string symbol, bool? enabled = null);
        /// <summary>
        /// Transfer equity in or out of a position.
        /// </summary>
        /// <remarks>
        /// When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to isolate.</param>
        /// <param name="amount">Amount to transfer, in Satoshis. May be negative.</param>
        /// <returns>Task of Position</returns>
        System.Threading.Tasks.Task<Position> PositionTransferIsolatedMarginAsync (string symbol, decimal? amount);

        /// <summary>
        /// Transfer equity in or out of a position.
        /// </summary>
        /// <remarks>
        /// When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to isolate.</param>
        /// <param name="amount">Amount to transfer, in Satoshis. May be negative.</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        System.Threading.Tasks.Task<ApiResponse<Position>> PositionTransferIsolatedMarginAsyncWithHttpInfo (string symbol, decimal? amount);
        /// <summary>
        /// Choose leverage for a position.
        /// </summary>
        /// <remarks>
        /// On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to adjust.</param>
        /// <param name="leverage">Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.</param>
        /// <returns>Task of Position</returns>
        System.Threading.Tasks.Task<Position> PositionUpdateLeverageAsync (string symbol, double? leverage);

        /// <summary>
        /// Choose leverage for a position.
        /// </summary>
        /// <remarks>
        /// On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to adjust.</param>
        /// <param name="leverage">Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        System.Threading.Tasks.Task<ApiResponse<Position>> PositionUpdateLeverageAsyncWithHttpInfo (string symbol, double? leverage);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PositionApi : IPositionApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PositionApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PositionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get your positions. See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}. (optional)</param>
        /// <param name="columns">Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)</param>
        /// <param name="count">Number of rows to fetch. (optional)</param>
        /// <returns>List&lt;Position&gt;</returns>
        public List<Position> PositionGet (string filter = null, string columns = null, decimal? count = null)
        {
             ApiResponse<List<Position>> localVarResponse = PositionGetWithHttpInfo(filter, columns, count);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your positions. See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}. (optional)</param>
        /// <param name="columns">Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)</param>
        /// <param name="count">Number of rows to fetch. (optional)</param>
        /// <returns>ApiResponse of List&lt;Position&gt;</returns>
        public ApiResponse< List<Position> > PositionGetWithHttpInfo (string filter = null, string columns = null, decimal? count = null)
        {

            var localVarPath = "/position";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (columns != null) localVarQueryParams.Add("columns", Configuration.ApiClient.ParameterToString(columns)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Position>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Position>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Position>)));
            
        }

        /// <summary>
        /// Get your positions. See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}. (optional)</param>
        /// <param name="columns">Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)</param>
        /// <param name="count">Number of rows to fetch. (optional)</param>
        /// <returns>Task of List&lt;Position&gt;</returns>
        public async System.Threading.Tasks.Task<List<Position>> PositionGetAsync (string filter = null, string columns = null, decimal? count = null)
        {
             ApiResponse<List<Position>> localVarResponse = await PositionGetAsyncWithHttpInfo(filter, columns, count);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your positions. See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}. (optional)</param>
        /// <param name="columns">Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)</param>
        /// <param name="count">Number of rows to fetch. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Position&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Position>>> PositionGetAsyncWithHttpInfo (string filter = null, string columns = null, decimal? count = null)
        {

            var localVarPath = "/position";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (columns != null) localVarQueryParams.Add("columns", Configuration.ApiClient.ParameterToString(columns)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Position>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Position>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Position>)));
            
        }

        /// <summary>
        /// Enable isolated margin or cross margin per-position. On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Position symbol to isolate.</param>
        /// <param name="enabled">True for isolated margin, false for cross margin. (optional, default to true)</param>
        /// <returns>Position</returns>
        public Position PositionIsolateMargin (string symbol, bool? enabled = null)
        {
             ApiResponse<Position> localVarResponse = PositionIsolateMarginWithHttpInfo(symbol, enabled);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable isolated margin or cross margin per-position. On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Position symbol to isolate.</param>
        /// <param name="enabled">True for isolated margin, false for cross margin. (optional, default to true)</param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse< Position > PositionIsolateMarginWithHttpInfo (string symbol, bool? enabled = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionApi->PositionIsolateMargin");

            var localVarPath = "/position/isolate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (symbol != null) localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", Configuration.ApiClient.ParameterToString(enabled)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionIsolateMargin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Position) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
            
        }

        /// <summary>
        /// Enable isolated margin or cross margin per-position. On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Position symbol to isolate.</param>
        /// <param name="enabled">True for isolated margin, false for cross margin. (optional, default to true)</param>
        /// <returns>Task of Position</returns>
        public async System.Threading.Tasks.Task<Position> PositionIsolateMarginAsync (string symbol, bool? enabled = null)
        {
             ApiResponse<Position> localVarResponse = await PositionIsolateMarginAsyncWithHttpInfo(symbol, enabled);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable isolated margin or cross margin per-position. On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Position symbol to isolate.</param>
        /// <param name="enabled">True for isolated margin, false for cross margin. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Position>> PositionIsolateMarginAsyncWithHttpInfo (string symbol, bool? enabled = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionApi->PositionIsolateMargin");

            var localVarPath = "/position/isolate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (symbol != null) localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", Configuration.ApiClient.ParameterToString(enabled)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionIsolateMargin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Position) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
            
        }

        /// <summary>
        /// Transfer equity in or out of a position. When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to isolate.</param>
        /// <param name="amount">Amount to transfer, in Satoshis. May be negative.</param>
        /// <returns>Position</returns>
        public Position PositionTransferIsolatedMargin (string symbol, decimal? amount)
        {
             ApiResponse<Position> localVarResponse = PositionTransferIsolatedMarginWithHttpInfo(symbol, amount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer equity in or out of a position. When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to isolate.</param>
        /// <param name="amount">Amount to transfer, in Satoshis. May be negative.</param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse< Position > PositionTransferIsolatedMarginWithHttpInfo (string symbol, decimal? amount)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionApi->PositionTransferIsolatedMargin");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PositionApi->PositionTransferIsolatedMargin");

            var localVarPath = "/position/transferMargin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (symbol != null) localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (amount != null) localVarFormParams.Add("amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionTransferIsolatedMargin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Position) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
            
        }

        /// <summary>
        /// Transfer equity in or out of a position. When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to isolate.</param>
        /// <param name="amount">Amount to transfer, in Satoshis. May be negative.</param>
        /// <returns>Task of Position</returns>
        public async System.Threading.Tasks.Task<Position> PositionTransferIsolatedMarginAsync (string symbol, decimal? amount)
        {
             ApiResponse<Position> localVarResponse = await PositionTransferIsolatedMarginAsyncWithHttpInfo(symbol, amount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer equity in or out of a position. When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to isolate.</param>
        /// <param name="amount">Amount to transfer, in Satoshis. May be negative.</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Position>> PositionTransferIsolatedMarginAsyncWithHttpInfo (string symbol, decimal? amount)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionApi->PositionTransferIsolatedMargin");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PositionApi->PositionTransferIsolatedMargin");

            var localVarPath = "/position/transferMargin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (symbol != null) localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (amount != null) localVarFormParams.Add("amount", Configuration.ApiClient.ParameterToString(amount)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionTransferIsolatedMargin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Position) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
            
        }

        /// <summary>
        /// Choose leverage for a position. On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to adjust.</param>
        /// <param name="leverage">Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.</param>
        /// <returns>Position</returns>
        public Position PositionUpdateLeverage (string symbol, double? leverage)
        {
             ApiResponse<Position> localVarResponse = PositionUpdateLeverageWithHttpInfo(symbol, leverage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Choose leverage for a position. On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to adjust.</param>
        /// <param name="leverage">Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.</param>
        /// <returns>ApiResponse of Position</returns>
        public ApiResponse< Position > PositionUpdateLeverageWithHttpInfo (string symbol, double? leverage)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionApi->PositionUpdateLeverage");
            // verify the required parameter 'leverage' is set
            if (leverage == null)
                throw new ApiException(400, "Missing required parameter 'leverage' when calling PositionApi->PositionUpdateLeverage");

            var localVarPath = "/position/leverage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (symbol != null) localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (leverage != null) localVarFormParams.Add("leverage", Configuration.ApiClient.ParameterToString(leverage)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionUpdateLeverage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Position) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
            
        }

        /// <summary>
        /// Choose leverage for a position. On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to adjust.</param>
        /// <param name="leverage">Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.</param>
        /// <returns>Task of Position</returns>
        public async System.Threading.Tasks.Task<Position> PositionUpdateLeverageAsync (string symbol, double? leverage)
        {
             ApiResponse<Position> localVarResponse = await PositionUpdateLeverageAsyncWithHttpInfo(symbol, leverage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Choose leverage for a position. On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Symbol of position to adjust.</param>
        /// <param name="leverage">Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.</param>
        /// <returns>Task of ApiResponse (Position)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Position>> PositionUpdateLeverageAsyncWithHttpInfo (string symbol, double? leverage)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionApi->PositionUpdateLeverage");
            // verify the required parameter 'leverage' is set
            if (leverage == null)
                throw new ApiException(400, "Missing required parameter 'leverage' when calling PositionApi->PositionUpdateLeverage");

            var localVarPath = "/position/leverage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (symbol != null) localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (leverage != null) localVarFormParams.Add("leverage", Configuration.ApiClient.ParameterToString(leverage)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PositionUpdateLeverage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Position>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Position) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Position)));
            
        }

    }
}
