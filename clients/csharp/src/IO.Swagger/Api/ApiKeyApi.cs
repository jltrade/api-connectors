/* 
 * BitMEX API
 *
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiKeyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Disable an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>ApiKey</returns>
        ApiKey ApiKeyDisable (string apiKeyID);

        /// <summary>
        /// Disable an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>ApiResponse of ApiKey</returns>
        ApiResponse<ApiKey> ApiKeyDisableWithHttpInfo (string apiKeyID);
        /// <summary>
        /// Enable an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>ApiKey</returns>
        ApiKey ApiKeyEnable (string apiKeyID);

        /// <summary>
        /// Enable an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>ApiResponse of ApiKey</returns>
        ApiResponse<ApiKey> ApiKeyEnableWithHttpInfo (string apiKeyID);
        /// <summary>
        /// Get your API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reverse">If true, will sort results newest first. (optional, default to false)</param>
        /// <returns>List&lt;ApiKey&gt;</returns>
        List<ApiKey> ApiKeyGet (bool? reverse = null);

        /// <summary>
        /// Get your API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reverse">If true, will sort results newest first. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;ApiKey&gt;</returns>
        ApiResponse<List<ApiKey>> ApiKeyGetWithHttpInfo (bool? reverse = null);
        /// <summary>
        /// Create a new API Key.
        /// </summary>
        /// <remarks>
        /// API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Key name. This name is for reference only. (optional)</param>
        /// <param name="cidr">CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)</param>
        /// <param name="permissions">Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;]. (optional)</param>
        /// <param name="enabled">Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional, default to false)</param>
        /// <param name="token">OTP Token (YubiKey, Google Authenticator) (optional)</param>
        /// <returns>ApiKey</returns>
        ApiKey ApiKeyNew (string name = null, string cidr = null, string permissions = null, bool? enabled = null, string token = null);

        /// <summary>
        /// Create a new API Key.
        /// </summary>
        /// <remarks>
        /// API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Key name. This name is for reference only. (optional)</param>
        /// <param name="cidr">CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)</param>
        /// <param name="permissions">Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;]. (optional)</param>
        /// <param name="enabled">Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional, default to false)</param>
        /// <param name="token">OTP Token (YubiKey, Google Authenticator) (optional)</param>
        /// <returns>ApiResponse of ApiKey</returns>
        ApiResponse<ApiKey> ApiKeyNewWithHttpInfo (string name = null, string cidr = null, string permissions = null, bool? enabled = null, string token = null);
        /// <summary>
        /// Remove an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ApiKeyRemove (string apiKeyID);

        /// <summary>
        /// Remove an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ApiKeyRemoveWithHttpInfo (string apiKeyID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Disable an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of ApiKey</returns>
        System.Threading.Tasks.Task<ApiKey> ApiKeyDisableAsync (string apiKeyID);

        /// <summary>
        /// Disable an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of ApiResponse (ApiKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKey>> ApiKeyDisableAsyncWithHttpInfo (string apiKeyID);
        /// <summary>
        /// Enable an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of ApiKey</returns>
        System.Threading.Tasks.Task<ApiKey> ApiKeyEnableAsync (string apiKeyID);

        /// <summary>
        /// Enable an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of ApiResponse (ApiKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKey>> ApiKeyEnableAsyncWithHttpInfo (string apiKeyID);
        /// <summary>
        /// Get your API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reverse">If true, will sort results newest first. (optional, default to false)</param>
        /// <returns>Task of List&lt;ApiKey&gt;</returns>
        System.Threading.Tasks.Task<List<ApiKey>> ApiKeyGetAsync (bool? reverse = null);

        /// <summary>
        /// Get your API Keys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reverse">If true, will sort results newest first. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;ApiKey&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiKey>>> ApiKeyGetAsyncWithHttpInfo (bool? reverse = null);
        /// <summary>
        /// Create a new API Key.
        /// </summary>
        /// <remarks>
        /// API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Key name. This name is for reference only. (optional)</param>
        /// <param name="cidr">CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)</param>
        /// <param name="permissions">Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;]. (optional)</param>
        /// <param name="enabled">Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional, default to false)</param>
        /// <param name="token">OTP Token (YubiKey, Google Authenticator) (optional)</param>
        /// <returns>Task of ApiKey</returns>
        System.Threading.Tasks.Task<ApiKey> ApiKeyNewAsync (string name = null, string cidr = null, string permissions = null, bool? enabled = null, string token = null);

        /// <summary>
        /// Create a new API Key.
        /// </summary>
        /// <remarks>
        /// API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Key name. This name is for reference only. (optional)</param>
        /// <param name="cidr">CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)</param>
        /// <param name="permissions">Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;]. (optional)</param>
        /// <param name="enabled">Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional, default to false)</param>
        /// <param name="token">OTP Token (YubiKey, Google Authenticator) (optional)</param>
        /// <returns>Task of ApiResponse (ApiKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKey>> ApiKeyNewAsyncWithHttpInfo (string name = null, string cidr = null, string permissions = null, bool? enabled = null, string token = null);
        /// <summary>
        /// Remove an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ApiKeyRemoveAsync (string apiKeyID);

        /// <summary>
        /// Remove an API Key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiKeyRemoveAsyncWithHttpInfo (string apiKeyID);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiKeyApi : IApiKeyApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiKeyApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiKeyApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Disable an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>ApiKey</returns>
        public ApiKey ApiKeyDisable (string apiKeyID)
        {
             ApiResponse<ApiKey> localVarResponse = ApiKeyDisableWithHttpInfo(apiKeyID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>ApiResponse of ApiKey</returns>
        public ApiResponse< ApiKey > ApiKeyDisableWithHttpInfo (string apiKeyID)
        {
            // verify the required parameter 'apiKeyID' is set
            if (apiKeyID == null)
                throw new ApiException(400, "Missing required parameter 'apiKeyID' when calling ApiKeyApi->ApiKeyDisable");

            var localVarPath = "/apiKey/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKeyID != null) localVarFormParams.Add("apiKeyID", Configuration.ApiClient.ParameterToString(apiKeyID)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiKeyDisable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKey) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKey)));
            
        }

        /// <summary>
        /// Disable an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of ApiKey</returns>
        public async System.Threading.Tasks.Task<ApiKey> ApiKeyDisableAsync (string apiKeyID)
        {
             ApiResponse<ApiKey> localVarResponse = await ApiKeyDisableAsyncWithHttpInfo(apiKeyID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of ApiResponse (ApiKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKey>> ApiKeyDisableAsyncWithHttpInfo (string apiKeyID)
        {
            // verify the required parameter 'apiKeyID' is set
            if (apiKeyID == null)
                throw new ApiException(400, "Missing required parameter 'apiKeyID' when calling ApiKeyApi->ApiKeyDisable");

            var localVarPath = "/apiKey/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKeyID != null) localVarFormParams.Add("apiKeyID", Configuration.ApiClient.ParameterToString(apiKeyID)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiKeyDisable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKey) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKey)));
            
        }

        /// <summary>
        /// Enable an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>ApiKey</returns>
        public ApiKey ApiKeyEnable (string apiKeyID)
        {
             ApiResponse<ApiKey> localVarResponse = ApiKeyEnableWithHttpInfo(apiKeyID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>ApiResponse of ApiKey</returns>
        public ApiResponse< ApiKey > ApiKeyEnableWithHttpInfo (string apiKeyID)
        {
            // verify the required parameter 'apiKeyID' is set
            if (apiKeyID == null)
                throw new ApiException(400, "Missing required parameter 'apiKeyID' when calling ApiKeyApi->ApiKeyEnable");

            var localVarPath = "/apiKey/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKeyID != null) localVarFormParams.Add("apiKeyID", Configuration.ApiClient.ParameterToString(apiKeyID)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiKeyEnable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKey) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKey)));
            
        }

        /// <summary>
        /// Enable an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of ApiKey</returns>
        public async System.Threading.Tasks.Task<ApiKey> ApiKeyEnableAsync (string apiKeyID)
        {
             ApiResponse<ApiKey> localVarResponse = await ApiKeyEnableAsyncWithHttpInfo(apiKeyID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of ApiResponse (ApiKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKey>> ApiKeyEnableAsyncWithHttpInfo (string apiKeyID)
        {
            // verify the required parameter 'apiKeyID' is set
            if (apiKeyID == null)
                throw new ApiException(400, "Missing required parameter 'apiKeyID' when calling ApiKeyApi->ApiKeyEnable");

            var localVarPath = "/apiKey/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKeyID != null) localVarFormParams.Add("apiKeyID", Configuration.ApiClient.ParameterToString(apiKeyID)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiKeyEnable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKey) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKey)));
            
        }

        /// <summary>
        /// Get your API Keys. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reverse">If true, will sort results newest first. (optional, default to false)</param>
        /// <returns>List&lt;ApiKey&gt;</returns>
        public List<ApiKey> ApiKeyGet (bool? reverse = null)
        {
             ApiResponse<List<ApiKey>> localVarResponse = ApiKeyGetWithHttpInfo(reverse);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get your API Keys. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reverse">If true, will sort results newest first. (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;ApiKey&gt;</returns>
        public ApiResponse< List<ApiKey> > ApiKeyGetWithHttpInfo (bool? reverse = null)
        {

            var localVarPath = "/apiKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (reverse != null) localVarQueryParams.Add("reverse", Configuration.ApiClient.ParameterToString(reverse)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiKeyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApiKey>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiKey>)));
            
        }

        /// <summary>
        /// Get your API Keys. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reverse">If true, will sort results newest first. (optional, default to false)</param>
        /// <returns>Task of List&lt;ApiKey&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiKey>> ApiKeyGetAsync (bool? reverse = null)
        {
             ApiResponse<List<ApiKey>> localVarResponse = await ApiKeyGetAsyncWithHttpInfo(reverse);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get your API Keys. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reverse">If true, will sort results newest first. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (List&lt;ApiKey&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApiKey>>> ApiKeyGetAsyncWithHttpInfo (bool? reverse = null)
        {

            var localVarPath = "/apiKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (reverse != null) localVarQueryParams.Add("reverse", Configuration.ApiClient.ParameterToString(reverse)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiKeyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiKey>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApiKey>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiKey>)));
            
        }

        /// <summary>
        /// Create a new API Key. API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Key name. This name is for reference only. (optional)</param>
        /// <param name="cidr">CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)</param>
        /// <param name="permissions">Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;]. (optional)</param>
        /// <param name="enabled">Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional, default to false)</param>
        /// <param name="token">OTP Token (YubiKey, Google Authenticator) (optional)</param>
        /// <returns>ApiKey</returns>
        public ApiKey ApiKeyNew (string name = null, string cidr = null, string permissions = null, bool? enabled = null, string token = null)
        {
             ApiResponse<ApiKey> localVarResponse = ApiKeyNewWithHttpInfo(name, cidr, permissions, enabled, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new API Key. API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Key name. This name is for reference only. (optional)</param>
        /// <param name="cidr">CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)</param>
        /// <param name="permissions">Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;]. (optional)</param>
        /// <param name="enabled">Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional, default to false)</param>
        /// <param name="token">OTP Token (YubiKey, Google Authenticator) (optional)</param>
        /// <returns>ApiResponse of ApiKey</returns>
        public ApiResponse< ApiKey > ApiKeyNewWithHttpInfo (string name = null, string cidr = null, string permissions = null, bool? enabled = null, string token = null)
        {

            var localVarPath = "/apiKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (cidr != null) localVarFormParams.Add("cidr", Configuration.ApiClient.ParameterToString(cidr)); // form parameter
            if (permissions != null) localVarFormParams.Add("permissions", Configuration.ApiClient.ParameterToString(permissions)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", Configuration.ApiClient.ParameterToString(enabled)); // form parameter
            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiKeyNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKey) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKey)));
            
        }

        /// <summary>
        /// Create a new API Key. API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Key name. This name is for reference only. (optional)</param>
        /// <param name="cidr">CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)</param>
        /// <param name="permissions">Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;]. (optional)</param>
        /// <param name="enabled">Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional, default to false)</param>
        /// <param name="token">OTP Token (YubiKey, Google Authenticator) (optional)</param>
        /// <returns>Task of ApiKey</returns>
        public async System.Threading.Tasks.Task<ApiKey> ApiKeyNewAsync (string name = null, string cidr = null, string permissions = null, bool? enabled = null, string token = null)
        {
             ApiResponse<ApiKey> localVarResponse = await ApiKeyNewAsyncWithHttpInfo(name, cidr, permissions, enabled, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new API Key. API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Key name. This name is for reference only. (optional)</param>
        /// <param name="cidr">CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)</param>
        /// <param name="permissions">Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;]. (optional)</param>
        /// <param name="enabled">Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional, default to false)</param>
        /// <param name="token">OTP Token (YubiKey, Google Authenticator) (optional)</param>
        /// <returns>Task of ApiResponse (ApiKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiKey>> ApiKeyNewAsyncWithHttpInfo (string name = null, string cidr = null, string permissions = null, bool? enabled = null, string token = null)
        {

            var localVarPath = "/apiKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (cidr != null) localVarFormParams.Add("cidr", Configuration.ApiClient.ParameterToString(cidr)); // form parameter
            if (permissions != null) localVarFormParams.Add("permissions", Configuration.ApiClient.ParameterToString(permissions)); // form parameter
            if (enabled != null) localVarFormParams.Add("enabled", Configuration.ApiClient.ParameterToString(enabled)); // form parameter
            if (token != null) localVarFormParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiKeyNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiKey) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiKey)));
            
        }

        /// <summary>
        /// Remove an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ApiKeyRemove (string apiKeyID)
        {
             ApiResponse<InlineResponse200> localVarResponse = ApiKeyRemoveWithHttpInfo(apiKeyID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > ApiKeyRemoveWithHttpInfo (string apiKeyID)
        {
            // verify the required parameter 'apiKeyID' is set
            if (apiKeyID == null)
                throw new ApiException(400, "Missing required parameter 'apiKeyID' when calling ApiKeyApi->ApiKeyRemove");

            var localVarPath = "/apiKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKeyID != null) localVarFormParams.Add("apiKeyID", Configuration.ApiClient.ParameterToString(apiKeyID)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiKeyRemove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

        /// <summary>
        /// Remove an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ApiKeyRemoveAsync (string apiKeyID)
        {
             ApiResponse<InlineResponse200> localVarResponse = await ApiKeyRemoveAsyncWithHttpInfo(apiKeyID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove an API Key. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyID">API Key ID (public component).</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiKeyRemoveAsyncWithHttpInfo (string apiKeyID)
        {
            // verify the required parameter 'apiKeyID' is set
            if (apiKeyID == null)
                throw new ApiException(400, "Missing required parameter 'apiKeyID' when calling ApiKeyApi->ApiKeyRemove");

            var localVarPath = "/apiKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml", 
                "text/xml", 
                "application/javascript", 
                "text/javascript"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (apiKeyID != null) localVarFormParams.Add("apiKeyID", Configuration.ApiClient.ParameterToString(apiKeyID)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiKeyRemove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
            
        }

    }
}
