/* 
 * BitMEX API
 *
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserCommission
    /// </summary>
    [DataContract]
    public partial class UserCommission :  IEquatable<UserCommission>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserCommission" /> class.
        /// </summary>
        /// <param name="MakerFee">MakerFee.</param>
        /// <param name="TakerFee">TakerFee.</param>
        /// <param name="InsuranceFee">InsuranceFee.</param>
        public UserCommission(string MakerFee = null, string TakerFee = null, string InsuranceFee = null)
        {
            this.MakerFee = MakerFee;
            this.TakerFee = TakerFee;
            this.InsuranceFee = InsuranceFee;
        }
        
        /// <summary>
        /// Gets or Sets MakerFee
        /// </summary>
        [DataMember(Name="makerFee", EmitDefaultValue=false)]
        public string MakerFee { get; set; }
        /// <summary>
        /// Gets or Sets TakerFee
        /// </summary>
        [DataMember(Name="takerFee", EmitDefaultValue=false)]
        public string TakerFee { get; set; }
        /// <summary>
        /// Gets or Sets InsuranceFee
        /// </summary>
        [DataMember(Name="insuranceFee", EmitDefaultValue=false)]
        public string InsuranceFee { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserCommission {\n");
            sb.Append("  MakerFee: ").Append(MakerFee).Append("\n");
            sb.Append("  TakerFee: ").Append(TakerFee).Append("\n");
            sb.Append("  InsuranceFee: ").Append(InsuranceFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserCommission);
        }

        /// <summary>
        /// Returns true if UserCommission instances are equal
        /// </summary>
        /// <param name="other">Instance of UserCommission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserCommission other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MakerFee == other.MakerFee ||
                    this.MakerFee != null &&
                    this.MakerFee.Equals(other.MakerFee)
                ) && 
                (
                    this.TakerFee == other.TakerFee ||
                    this.TakerFee != null &&
                    this.TakerFee.Equals(other.TakerFee)
                ) && 
                (
                    this.InsuranceFee == other.InsuranceFee ||
                    this.InsuranceFee != null &&
                    this.InsuranceFee.Equals(other.InsuranceFee)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MakerFee != null)
                    hash = hash * 59 + this.MakerFee.GetHashCode();
                if (this.TakerFee != null)
                    hash = hash * 59 + this.TakerFee.GetHashCode();
                if (this.InsuranceFee != null)
                    hash = hash * 59 + this.InsuranceFee.GetHashCode();
                return hash;
            }
        }
    }

}
