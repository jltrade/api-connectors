/* 
 * BitMEX API
 *
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Liquidation
    /// </summary>
    [DataContract]
    public partial class Liquidation :  IEquatable<Liquidation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Liquidation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Liquidation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Liquidation" /> class.
        /// </summary>
        /// <param name="OrderID">OrderID (required).</param>
        /// <param name="Symbol">Symbol.</param>
        /// <param name="Side">Side.</param>
        /// <param name="Price">Price.</param>
        /// <param name="LeavesQty">LeavesQty.</param>
        public Liquidation(string OrderID = null, string Symbol = null, string Side = null, double? Price = null, decimal? LeavesQty = null)
        {
            // to ensure "OrderID" is required (not null)
            if (OrderID == null)
            {
                throw new InvalidDataException("OrderID is a required property for Liquidation and cannot be null");
            }
            else
            {
                this.OrderID = OrderID;
            }
            this.Symbol = Symbol;
            this.Side = Side;
            this.Price = Price;
            this.LeavesQty = LeavesQty;
        }
        
        /// <summary>
        /// Gets or Sets OrderID
        /// </summary>
        [DataMember(Name="orderID", EmitDefaultValue=false)]
        public string OrderID { get; set; }
        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }
        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }
        /// <summary>
        /// Gets or Sets LeavesQty
        /// </summary>
        [DataMember(Name="leavesQty", EmitDefaultValue=false)]
        public decimal? LeavesQty { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Liquidation {\n");
            sb.Append("  OrderID: ").Append(OrderID).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  LeavesQty: ").Append(LeavesQty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Liquidation);
        }

        /// <summary>
        /// Returns true if Liquidation instances are equal
        /// </summary>
        /// <param name="other">Instance of Liquidation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Liquidation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OrderID == other.OrderID ||
                    this.OrderID != null &&
                    this.OrderID.Equals(other.OrderID)
                ) && 
                (
                    this.Symbol == other.Symbol ||
                    this.Symbol != null &&
                    this.Symbol.Equals(other.Symbol)
                ) && 
                (
                    this.Side == other.Side ||
                    this.Side != null &&
                    this.Side.Equals(other.Side)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.LeavesQty == other.LeavesQty ||
                    this.LeavesQty != null &&
                    this.LeavesQty.Equals(other.LeavesQty)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OrderID != null)
                    hash = hash * 59 + this.OrderID.GetHashCode();
                if (this.Symbol != null)
                    hash = hash * 59 + this.Symbol.GetHashCode();
                if (this.Side != null)
                    hash = hash * 59 + this.Side.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.LeavesQty != null)
                    hash = hash * 59 + this.LeavesQty.GetHashCode();
                return hash;
            }
        }
    }

}
