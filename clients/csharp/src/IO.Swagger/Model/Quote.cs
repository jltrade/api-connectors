/* 
 * BitMEX API
 *
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Quote
    /// </summary>
    [DataContract]
    public partial class Quote :  IEquatable<Quote>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Quote" /> class.
        /// </summary>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="Symbol">Symbol.</param>
        /// <param name="BidSize">BidSize.</param>
        /// <param name="BidPrice">BidPrice.</param>
        /// <param name="AskPrice">AskPrice.</param>
        /// <param name="AskSize">AskSize.</param>
        /// <param name="Id">Id.</param>
        public Quote(DateTime? Timestamp = null, string Symbol = null, decimal? BidSize = null, double? BidPrice = null, double? AskPrice = null, decimal? AskSize = null, double? Id = null)
        {
            this.Timestamp = Timestamp;
            this.Symbol = Symbol;
            this.BidSize = BidSize;
            this.BidPrice = BidPrice;
            this.AskPrice = AskPrice;
            this.AskSize = AskSize;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }
        /// <summary>
        /// Gets or Sets BidSize
        /// </summary>
        [DataMember(Name="bidSize", EmitDefaultValue=false)]
        public decimal? BidSize { get; set; }
        /// <summary>
        /// Gets or Sets BidPrice
        /// </summary>
        [DataMember(Name="bidPrice", EmitDefaultValue=false)]
        public double? BidPrice { get; set; }
        /// <summary>
        /// Gets or Sets AskPrice
        /// </summary>
        [DataMember(Name="askPrice", EmitDefaultValue=false)]
        public double? AskPrice { get; set; }
        /// <summary>
        /// Gets or Sets AskSize
        /// </summary>
        [DataMember(Name="askSize", EmitDefaultValue=false)]
        public decimal? AskSize { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public double? Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Quote {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  BidSize: ").Append(BidSize).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  AskPrice: ").Append(AskPrice).Append("\n");
            sb.Append("  AskSize: ").Append(AskSize).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Quote);
        }

        /// <summary>
        /// Returns true if Quote instances are equal
        /// </summary>
        /// <param name="other">Instance of Quote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Quote other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.Symbol == other.Symbol ||
                    this.Symbol != null &&
                    this.Symbol.Equals(other.Symbol)
                ) && 
                (
                    this.BidSize == other.BidSize ||
                    this.BidSize != null &&
                    this.BidSize.Equals(other.BidSize)
                ) && 
                (
                    this.BidPrice == other.BidPrice ||
                    this.BidPrice != null &&
                    this.BidPrice.Equals(other.BidPrice)
                ) && 
                (
                    this.AskPrice == other.AskPrice ||
                    this.AskPrice != null &&
                    this.AskPrice.Equals(other.AskPrice)
                ) && 
                (
                    this.AskSize == other.AskSize ||
                    this.AskSize != null &&
                    this.AskSize.Equals(other.AskSize)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.Symbol != null)
                    hash = hash * 59 + this.Symbol.GetHashCode();
                if (this.BidSize != null)
                    hash = hash * 59 + this.BidSize.GetHashCode();
                if (this.BidPrice != null)
                    hash = hash * 59 + this.BidPrice.GetHashCode();
                if (this.AskPrice != null)
                    hash = hash * 59 + this.AskPrice.GetHashCode();
                if (this.AskSize != null)
                    hash = hash * 59 + this.AskSize.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
