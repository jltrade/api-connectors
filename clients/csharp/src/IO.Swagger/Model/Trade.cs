/* 
 * BitMEX API
 *
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Trade
    /// </summary>
    [DataContract]
    public partial class Trade :  IEquatable<Trade>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Trade" /> class.
        /// </summary>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="Symbol">Symbol.</param>
        /// <param name="Side">Side.</param>
        /// <param name="Size">Size.</param>
        /// <param name="Price">Price.</param>
        /// <param name="TickDirection">TickDirection.</param>
        /// <param name="TrdMatchID">TrdMatchID.</param>
        /// <param name="GrossValue">GrossValue.</param>
        /// <param name="HomeNotional">HomeNotional.</param>
        /// <param name="ForeignNotional">ForeignNotional.</param>
        /// <param name="Id">Id.</param>
        public Trade(DateTime? Timestamp = null, string Symbol = null, string Side = null, decimal? Size = null, double? Price = null, string TickDirection = null, string TrdMatchID = null, decimal? GrossValue = null, double? HomeNotional = null, double? ForeignNotional = null, double? Id = null)
        {
            this.Timestamp = Timestamp;
            this.Symbol = Symbol;
            this.Side = Side;
            this.Size = Size;
            this.Price = Price;
            this.TickDirection = TickDirection;
            this.TrdMatchID = TrdMatchID;
            this.GrossValue = GrossValue;
            this.HomeNotional = HomeNotional;
            this.ForeignNotional = ForeignNotional;
            this.Id = Id;
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }
        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }
        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public decimal? Size { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }
        /// <summary>
        /// Gets or Sets TickDirection
        /// </summary>
        [DataMember(Name="tickDirection", EmitDefaultValue=false)]
        public string TickDirection { get; set; }
        /// <summary>
        /// Gets or Sets TrdMatchID
        /// </summary>
        [DataMember(Name="trdMatchID", EmitDefaultValue=false)]
        public string TrdMatchID { get; set; }
        /// <summary>
        /// Gets or Sets GrossValue
        /// </summary>
        [DataMember(Name="grossValue", EmitDefaultValue=false)]
        public decimal? GrossValue { get; set; }
        /// <summary>
        /// Gets or Sets HomeNotional
        /// </summary>
        [DataMember(Name="homeNotional", EmitDefaultValue=false)]
        public double? HomeNotional { get; set; }
        /// <summary>
        /// Gets or Sets ForeignNotional
        /// </summary>
        [DataMember(Name="foreignNotional", EmitDefaultValue=false)]
        public double? ForeignNotional { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public double? Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trade {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  TickDirection: ").Append(TickDirection).Append("\n");
            sb.Append("  TrdMatchID: ").Append(TrdMatchID).Append("\n");
            sb.Append("  GrossValue: ").Append(GrossValue).Append("\n");
            sb.Append("  HomeNotional: ").Append(HomeNotional).Append("\n");
            sb.Append("  ForeignNotional: ").Append(ForeignNotional).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Trade);
        }

        /// <summary>
        /// Returns true if Trade instances are equal
        /// </summary>
        /// <param name="other">Instance of Trade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trade other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.Symbol == other.Symbol ||
                    this.Symbol != null &&
                    this.Symbol.Equals(other.Symbol)
                ) && 
                (
                    this.Side == other.Side ||
                    this.Side != null &&
                    this.Side.Equals(other.Side)
                ) && 
                (
                    this.Size == other.Size ||
                    this.Size != null &&
                    this.Size.Equals(other.Size)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.TickDirection == other.TickDirection ||
                    this.TickDirection != null &&
                    this.TickDirection.Equals(other.TickDirection)
                ) && 
                (
                    this.TrdMatchID == other.TrdMatchID ||
                    this.TrdMatchID != null &&
                    this.TrdMatchID.Equals(other.TrdMatchID)
                ) && 
                (
                    this.GrossValue == other.GrossValue ||
                    this.GrossValue != null &&
                    this.GrossValue.Equals(other.GrossValue)
                ) && 
                (
                    this.HomeNotional == other.HomeNotional ||
                    this.HomeNotional != null &&
                    this.HomeNotional.Equals(other.HomeNotional)
                ) && 
                (
                    this.ForeignNotional == other.ForeignNotional ||
                    this.ForeignNotional != null &&
                    this.ForeignNotional.Equals(other.ForeignNotional)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.Symbol != null)
                    hash = hash * 59 + this.Symbol.GetHashCode();
                if (this.Side != null)
                    hash = hash * 59 + this.Side.GetHashCode();
                if (this.Size != null)
                    hash = hash * 59 + this.Size.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.TickDirection != null)
                    hash = hash * 59 + this.TickDirection.GetHashCode();
                if (this.TrdMatchID != null)
                    hash = hash * 59 + this.TrdMatchID.GetHashCode();
                if (this.GrossValue != null)
                    hash = hash * 59 + this.GrossValue.GetHashCode();
                if (this.HomeNotional != null)
                    hash = hash * 59 + this.HomeNotional.GetHashCode();
                if (this.ForeignNotional != null)
                    hash = hash * 59 + this.ForeignNotional.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
