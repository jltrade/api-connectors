/* 
 * BitMEX API
 *
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"strings"
	"fmt"
	"errors"
	"net/url"
	"encoding/json"
)

type OrderBookApi struct {
	Configuration Configuration
}

func NewOrderBookApi() *OrderBookApi {
	configuration := NewConfiguration()
	return &OrderBookApi{
		Configuration: *configuration,
	}
}

func NewOrderBookApiWithBasePath(basePath string) *OrderBookApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &OrderBookApi{
		Configuration: *configuration,
	}
}

/**
 * Get current orderbook [deprecated, use /orderBook/L2].
 *
 * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
 * @param depth Orderbook depth.
 * @return []OrderBook
 */
func (a OrderBookApi) OrderBookGet(symbol string, depth float32) ([]OrderBook, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/orderBook"

	// verify the required parameter 'symbol' is set
	if &symbol == nil {
		return new([]OrderBook), nil, errors.New("Missing required parameter 'symbol' when calling OrderBookApi->OrderBookGet")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("symbol", a.Configuration.APIClient.ParameterToString(symbol, ""))
			queryParams.Add("depth", a.Configuration.APIClient.ParameterToString(depth, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json", "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"text/xml",
"application/javascript",
"text/javascript",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]OrderBook)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Get current orderbook in vertical format.
 *
 * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
 * @param depth Orderbook depth per side. Send 0 for full depth.
 * @return []OrderBookL2
 */
func (a OrderBookApi) OrderBookGetL2(symbol string, depth float32) ([]OrderBookL2, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/orderBook/L2"

	// verify the required parameter 'symbol' is set
	if &symbol == nil {
		return new([]OrderBookL2), nil, errors.New("Missing required parameter 'symbol' when calling OrderBookApi->OrderBookGetL2")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("symbol", a.Configuration.APIClient.ParameterToString(symbol, ""))
			queryParams.Add("depth", a.Configuration.APIClient.ParameterToString(depth, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json", "application/x-www-form-urlencoded",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
"text/xml",
"application/javascript",
"text/javascript",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]OrderBookL2)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

