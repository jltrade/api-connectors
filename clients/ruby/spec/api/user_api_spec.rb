=begin
#BitMEX API

#REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::UserApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UserApi' do
  before do
    # run before each test
    @instance = SwaggerClient::UserApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UserApi' do
    it 'should create an instact of UserApi' do
      expect(@instance).to be_instance_of(SwaggerClient::UserApi)
    end
  end

  # unit tests for user_cancel_withdrawal
  # Cancel a withdrawal.
  # 
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [Transaction]
  describe 'user_cancel_withdrawal test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_check_referral_code
  # Check if a referral code is valid.
  # If the code is valid, responds with the referral code&#39;s discount (e.g. &#x60;0.1&#x60; for 10%). Otherwise, will return a 404.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :referral_code 
  # @return [Float]
  describe 'user_check_referral_code test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_confirm_email
  # Confirm your email address with a token.
  # 
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [AccessToken]
  describe 'user_confirm_email test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_confirm_enable_tfa
  # Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
  # 
  # @param token Token from your selected TFA type.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39;
  # @return [BOOLEAN]
  describe 'user_confirm_enable_tfa test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_confirm_password_reset
  # Confirm a password reset.
  # 
  # @param token 
  # @param new_password 
  # @param [Hash] opts the optional parameters
  # @return [BOOLEAN]
  describe 'user_confirm_password_reset test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_confirm_withdrawal
  # Confirm a withdrawal.
  # 
  # @param token 
  # @param [Hash] opts the optional parameters
  # @return [Transaction]
  describe 'user_confirm_withdrawal test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_disable_tfa
  # Disable two-factor auth for this account.
  # 
  # @param token Token from your selected TFA type.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
  # @return [BOOLEAN]
  describe 'user_disable_tfa test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_get
  # Get your user model.
  # 
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'user_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_get_affiliate_status
  # Get your current affiliate/referral status.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<Affiliate>]
  describe 'user_get_affiliate_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_get_commission
  # Get your account&#39;s commission status.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<UserCommission>]
  describe 'user_get_commission test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_get_deposit_address
  # Get a deposit address.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currency 
  # @return [String]
  describe 'user_get_deposit_address test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_get_margin
  # Get your account&#39;s margin status. Send a currency of \&quot;all\&quot; to receive an array of all supported currencies.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currency 
  # @return [Margin]
  describe 'user_get_margin test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_get_wallet_history
  # Get a history of all of your wallet transactions (deposits and withdrawals).
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currency 
  # @return [Array<Transaction>]
  describe 'user_get_wallet_history test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_login
  # Log in to BitMEX.
  # 
  # @param email Your email address.
  # @param password Your password.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token OTP Token (YubiKey, Google Authenticator)
  # @return [AccessToken]
  describe 'user_login test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_logout
  # Log out of BitMEX.
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'user_logout test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_logout_all
  # Log all systems out of BitMEX. This will revoke all of your account&#39;s access tokens, logging you out on all devices.
  # 
  # @param [Hash] opts the optional parameters
  # @return [Float]
  describe 'user_logout_all test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_new
  # Register a new user.
  # 
  # @param email Your email address.
  # @param password Your password.
  # @param country Country of residence.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :username Desired username.
  # @option opts [String] :firstname First name.
  # @option opts [String] :lastname Last name.
  # @option opts [String] :accepts_tos Set to true to indicate acceptance of the Terms of Service (https://www.bitmex.com/terms).
  # @option opts [String] :referrer_id Optional Referrer ID.
  # @option opts [String] :tfa_type Optional Two-Factor Type. Accepted values: GA, Yubikey, Clef
  # @option opts [String] :tfa_token Two-Factor Token.
  # @return [User]
  describe 'user_new test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_request_enable_tfa
  # Get Google Authenticator secret key for setting up two-factor auth. Fails if already enabled. Use /confirmEnableTFA for Yubikeys.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
  # @return [BOOLEAN]
  describe 'user_request_enable_tfa test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_request_password_reset
  # Request a password reset.
  # 
  # @param email 
  # @param [Hash] opts the optional parameters
  # @return [BOOLEAN]
  describe 'user_request_password_reset test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_request_withdrawal
  # Request a withdrawal to an external wallet.
  # This will send a confirmation email to the email address on record, unless requested via an API Key with the &#x60;withdraw&#x60; permission.
  # @param currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;
  # @param amount Amount of withdrawal currency.
  # @param address Destination Address.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :otp_token 2FA token. Required if 2FA is enabled on your account.
  # @option opts [Float] :fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
  # @return [Transaction]
  describe 'user_request_withdrawal test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_save_preferences
  # Save user preferences.
  # 
  # @param prefs 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :overwrite If true, will overwrite all existing preferences.
  # @return [User]
  describe 'user_save_preferences test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_send_verification_email
  # Re-send verification email.
  # 
  # @param email 
  # @param [Hash] opts the optional parameters
  # @return [BOOLEAN]
  describe 'user_send_verification_email test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for user_update
  # Update your password, name, and other attributes.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :firstname 
  # @option opts [String] :lastname 
  # @option opts [String] :old_password 
  # @option opts [String] :new_password 
  # @option opts [String] :new_password_confirm 
  # @option opts [String] :username Username can only be set once. To reset, email support.
  # @option opts [String] :country Country of residence.
  # @option opts [String] :pgp_pub_key PGP Public Key. If specified, automated emails will be sentwith this key.
  # @return [User]
  describe 'user_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
