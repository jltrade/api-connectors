=begin
#BitMEX API

#REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ChatApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get chat messages.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :count Number of results to fetch. (default to 100)
    # @option opts [Float] :start Starting point for results. (default to 0)
    # @option opts [BOOLEAN] :reverse If true, will sort results newest first. (default to true)
    # @return [Array<Chat>]
    def chat_get(opts = {})
      data, _status_code, _headers = chat_get_with_http_info(opts)
      return data
    end

    # Get chat messages.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :count Number of results to fetch.
    # @option opts [Float] :start Starting point for results.
    # @option opts [BOOLEAN] :reverse If true, will sort results newest first.
    # @return [Array<(Array<Chat>, Fixnum, Hash)>] Array<Chat> data, response status code and response headers
    def chat_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatApi.chat_get ..."
      end
      # resource path
      local_var_path = "/chat".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'reverse'] = opts[:'reverse'] if !opts[:'reverse'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Chat>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get connected users.
    # Returns an array with browser users in the first position and API users (bots) in the second position.
    # @param [Hash] opts the optional parameters
    # @return [ConnectedUsers]
    def chat_get_connected(opts = {})
      data, _status_code, _headers = chat_get_connected_with_http_info(opts)
      return data
    end

    # Get connected users.
    # Returns an array with browser users in the first position and API users (bots) in the second position.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectedUsers, Fixnum, Hash)>] ConnectedUsers data, response status code and response headers
    def chat_get_connected_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatApi.chat_get_connected ..."
      end
      # resource path
      local_var_path = "/chat/connected".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectedUsers')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_get_connected\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a chat message.
    # 
    # @param message 
    # @param [Hash] opts the optional parameters
    # @return [Chat]
    def chat_new(message, opts = {})
      data, _status_code, _headers = chat_new_with_http_info(message, opts)
      return data
    end

    # Send a chat message.
    # 
    # @param message 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Chat, Fixnum, Hash)>] Chat data, response status code and response headers
    def chat_new_with_http_info(message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChatApi.chat_new ..."
      end
      # verify the required parameter 'message' is set
      fail ArgumentError, "Missing the required parameter 'message' when calling ChatApi.chat_new" if message.nil?
      if message > 500.0
        fail ArgumentError, 'invalid value for "message" when calling ChatApi.chat_new, must be smaller than or equal to 500.0.'
      end

      # resource path
      local_var_path = "/chat".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["message"] = message

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Chat')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_new\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
