=begin
#BitMEX API

#REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ApiKeyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Disable an API Key.
    # 
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [ApiKey]
    def api_key_disable(api_key_id, opts = {})
      data, _status_code, _headers = api_key_disable_with_http_info(api_key_id, opts)
      return data
    end

    # Disable an API Key.
    # 
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiKey, Fixnum, Hash)>] ApiKey data, response status code and response headers
    def api_key_disable_with_http_info(api_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApiKeyApi.api_key_disable ..."
      end
      # verify the required parameter 'api_key_id' is set
      fail ArgumentError, "Missing the required parameter 'api_key_id' when calling ApiKeyApi.api_key_disable" if api_key_id.nil?
      # resource path
      local_var_path = "/apiKey/disable".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["apiKeyID"] = api_key_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiKey')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiKeyApi#api_key_disable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable an API Key.
    # 
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [ApiKey]
    def api_key_enable(api_key_id, opts = {})
      data, _status_code, _headers = api_key_enable_with_http_info(api_key_id, opts)
      return data
    end

    # Enable an API Key.
    # 
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiKey, Fixnum, Hash)>] ApiKey data, response status code and response headers
    def api_key_enable_with_http_info(api_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApiKeyApi.api_key_enable ..."
      end
      # verify the required parameter 'api_key_id' is set
      fail ArgumentError, "Missing the required parameter 'api_key_id' when calling ApiKeyApi.api_key_enable" if api_key_id.nil?
      # resource path
      local_var_path = "/apiKey/enable".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["apiKeyID"] = api_key_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiKey')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiKeyApi#api_key_enable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get your API Keys.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :reverse If true, will sort results newest first. (default to false)
    # @return [Array<ApiKey>]
    def api_key_get(opts = {})
      data, _status_code, _headers = api_key_get_with_http_info(opts)
      return data
    end

    # Get your API Keys.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :reverse If true, will sort results newest first.
    # @return [Array<(Array<ApiKey>, Fixnum, Hash)>] Array<ApiKey> data, response status code and response headers
    def api_key_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApiKeyApi.api_key_get ..."
      end
      # resource path
      local_var_path = "/apiKey".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'reverse'] = opts[:'reverse'] if !opts[:'reverse'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ApiKey>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiKeyApi#api_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new API Key.
    # API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Key name. This name is for reference only.
    # @option opts [String] :cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt;
    # @option opts [String] :permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;].
    # @option opts [BOOLEAN] :enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (default to false)
    # @option opts [String] :token OTP Token (YubiKey, Google Authenticator)
    # @return [ApiKey]
    def api_key_new(opts = {})
      data, _status_code, _headers = api_key_new_with_http_info(opts)
      return data
    end

    # Create a new API Key.
    # API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Key name. This name is for reference only.
    # @option opts [String] :cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt;
    # @option opts [String] :permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;].
    # @option opts [BOOLEAN] :enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable.
    # @option opts [String] :token OTP Token (YubiKey, Google Authenticator)
    # @return [Array<(ApiKey, Fixnum, Hash)>] ApiKey data, response status code and response headers
    def api_key_new_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApiKeyApi.api_key_new ..."
      end
      # resource path
      local_var_path = "/apiKey".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["cidr"] = opts[:'cidr'] if !opts[:'cidr'].nil?
      form_params["permissions"] = opts[:'permissions'] if !opts[:'permissions'].nil?
      form_params["enabled"] = opts[:'enabled'] if !opts[:'enabled'].nil?
      form_params["token"] = opts[:'token'] if !opts[:'token'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiKey')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiKeyApi#api_key_new\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an API Key.
    # 
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def api_key_remove(api_key_id, opts = {})
      data, _status_code, _headers = api_key_remove_with_http_info(api_key_id, opts)
      return data
    end

    # Remove an API Key.
    # 
    # @param api_key_id API Key ID (public component).
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def api_key_remove_with_http_info(api_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApiKeyApi.api_key_remove ..."
      end
      # verify the required parameter 'api_key_id' is set
      fail ArgumentError, "Missing the required parameter 'api_key_id' when calling ApiKeyApi.api_key_remove" if api_key_id.nil?
      # resource path
      local_var_path = "/apiKey".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["apiKeyID"] = api_key_id

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiKeyApi#api_key_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
