=begin
#BitMEX API

#REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>

OpenAPI spec version: 1.2.0
Contact: support@bitmex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class OrderBookApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get current orderbook [deprecated, use /orderBook/L2].
    # 
    # @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :depth Orderbook depth. (default to 25)
    # @return [Array<OrderBook>]
    def order_book_get(symbol, opts = {})
      data, _status_code, _headers = order_book_get_with_http_info(symbol, opts)
      return data
    end

    # Get current orderbook [deprecated, use /orderBook/L2].
    # 
    # @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :depth Orderbook depth.
    # @return [Array<(Array<OrderBook>, Fixnum, Hash)>] Array<OrderBook> data, response status code and response headers
    def order_book_get_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderBookApi.order_book_get ..."
      end
      # verify the required parameter 'symbol' is set
      fail ArgumentError, "Missing the required parameter 'symbol' when calling OrderBookApi.order_book_get" if symbol.nil?
      if opts[:'depth'] < 0.0
        fail ArgumentError, 'invalid value for "opts[:"depth"]" when calling OrderBookApi.order_book_get, must be greater than or equal to 0.0.'
      end

      # resource path
      local_var_path = "/orderBook".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'symbol'] = symbol
      query_params[:'depth'] = opts[:'depth'] if !opts[:'depth'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrderBook>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderBookApi#order_book_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current orderbook in vertical format.
    # 
    # @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :depth Orderbook depth per side. Send 0 for full depth. (default to 25)
    # @return [Array<OrderBookL2>]
    def order_book_get_l2(symbol, opts = {})
      data, _status_code, _headers = order_book_get_l2_with_http_info(symbol, opts)
      return data
    end

    # Get current orderbook in vertical format.
    # 
    # @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :depth Orderbook depth per side. Send 0 for full depth.
    # @return [Array<(Array<OrderBookL2>, Fixnum, Hash)>] Array<OrderBookL2> data, response status code and response headers
    def order_book_get_l2_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderBookApi.order_book_get_l2 ..."
      end
      # verify the required parameter 'symbol' is set
      fail ArgumentError, "Missing the required parameter 'symbol' when calling OrderBookApi.order_book_get_l2" if symbol.nil?
      if opts[:'depth'] < 0.0
        fail ArgumentError, 'invalid value for "opts[:"depth"]" when calling OrderBookApi.order_book_get_l2, must be greater than or equal to 0.0.'
      end

      # resource path
      local_var_path = "/orderBook/L2".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'symbol'] = symbol
      query_params[:'depth'] = opts[:'depth'] if !opts[:'depth'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrderBookL2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderBookApi#order_book_get_l2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
