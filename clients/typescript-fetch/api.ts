/**
 * BitMEX API
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "https://localhost/api/v1";

export interface FetchArgs {
    url: string;
    options: any; 
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
}

export interface AccessToken {
    "id": string;
    /**
     * time to live in seconds (2 weeks by default)
     */
    "ttl"?: number;
    "created"?: Date;
    "userId"?: number;
}

export interface Affiliate {
    "account": number;
    "currency": string;
    "prevPayout"?: number;
    "prevTurnover"?: number;
    "prevComm"?: number;
    "prevTimestamp"?: Date;
    "execTurnover"?: number;
    "execComm"?: number;
    "totalReferrals"?: number;
    "totalTurnover"?: number;
    "totalComm"?: number;
    "payoutPcnt"?: number;
    "pendingPayout"?: number;
    "timestamp"?: Date;
}

export interface Announcement {
    "id": number;
    "link"?: string;
    "title"?: string;
    "content"?: string;
    "date"?: Date;
}

export interface ApiKey {
    "id": string;
    "secret": string;
    "name": string;
    "nonce": number;
    "cidr"?: string;
    "permissions"?: Array<string>;
    "enabled"?: boolean;
    "userId": number;
    "created"?: Date;
}

export interface Chat {
    "id"?: number;
    "date": Date;
    "user": string;
    "message": string;
    "html": string;
    "fromBot"?: boolean;
}

export interface ConnectedUsers {
    "users"?: number;
    "bots"?: number;
}

export interface Error {
    "message": string;
    "code": number;
}

export interface Execution {
    "execID": string;
    "orderID"?: string;
    "clOrdID"?: string;
    "clOrdLinkID"?: string;
    "account"?: number;
    "symbol"?: string;
    "side"?: string;
    "lastQty"?: number;
    "lastPx"?: number;
    "underlyingLastPx"?: number;
    "lastMkt"?: string;
    "lastLiquidityInd"?: string;
    "simpleOrderQty"?: number;
    "orderQty"?: number;
    "price"?: number;
    "displayQty"?: number;
    "stopPx"?: number;
    "pegOffsetValue"?: number;
    "pegPriceType"?: string;
    "currency"?: string;
    "settlCurrency"?: string;
    "execType"?: string;
    "ordType"?: string;
    "timeInForce"?: string;
    "execInst"?: string;
    "contingencyType"?: string;
    "exDestination"?: string;
    "ordStatus"?: string;
    "triggered"?: string;
    "workingIndicator"?: boolean;
    "ordRejReason"?: string;
    "simpleLeavesQty"?: number;
    "leavesQty"?: number;
    "simpleCumQty"?: number;
    "cumQty"?: number;
    "avgPx"?: number;
    "commission"?: number;
    "tradePublishIndicator"?: string;
    "multiLegReportingType"?: string;
    "text"?: string;
    "trdMatchID"?: string;
    "execCost"?: number;
    "execComm"?: number;
    "homeNotional"?: number;
    "foreignNotional"?: number;
    "transactTime"?: Date;
    "timestamp"?: Date;
}

export interface Funding {
    "timestamp": Date;
    "symbol": string;
    "fundingInterval"?: Date;
    "fundingRate"?: number;
    "fundingRateDaily"?: number;
}

export interface InlineResponse200 {
    "success"?: boolean;
}

export interface Instrument {
    "symbol": string;
    "rootSymbol"?: string;
    "state"?: string;
    "typ"?: string;
    "listing"?: Date;
    "front"?: Date;
    "expiry"?: Date;
    "settle"?: Date;
    "relistInterval"?: Date;
    "inverseLeg"?: string;
    "sellLeg"?: string;
    "buyLeg"?: string;
    "positionCurrency"?: string;
    "underlying"?: string;
    "quoteCurrency"?: string;
    "underlyingSymbol"?: string;
    "reference"?: string;
    "referenceSymbol"?: string;
    "calcInterval"?: Date;
    "publishInterval"?: Date;
    "publishTime"?: Date;
    "maxOrderQty"?: number;
    "maxPrice"?: number;
    "lotSize"?: number;
    "tickSize"?: number;
    "multiplier"?: number;
    "settlCurrency"?: string;
    "underlyingToPositionMultiplier"?: number;
    "underlyingToSettleMultiplier"?: number;
    "quoteToSettleMultiplier"?: number;
    "isQuanto"?: boolean;
    "isInverse"?: boolean;
    "initMargin"?: number;
    "maintMargin"?: number;
    "limit"?: number;
    "capped"?: boolean;
    "taxed"?: boolean;
    "makerFee"?: number;
    "takerFee"?: number;
    "settlementFee"?: number;
    "insuranceFee"?: number;
    "fundingBaseSymbol"?: string;
    "fundingQuoteSymbol"?: string;
    "fundingPremiumSymbol"?: string;
    "fundingTimestamp"?: Date;
    "fundingInterval"?: Date;
    "fundingRate"?: number;
    "indicativeFundingRate"?: number;
    "rebalanceTimestamp"?: Date;
    "rebalanceInterval"?: Date;
    "openingTimestamp"?: Date;
    "closingTimestamp"?: Date;
    "sessionInterval"?: Date;
    "prevClosePrice"?: number;
    "limitDownPrice"?: number;
    "limitUpPrice"?: number;
    "bankruptLimitDownPrice"?: number;
    "bankruptLimitUpPrice"?: number;
    "prevTotalVolume"?: number;
    "totalVolume"?: number;
    "volume"?: number;
    "volume24h"?: number;
    "prevTotalTurnover"?: number;
    "totalTurnover"?: number;
    "turnover"?: number;
    "turnover24h"?: number;
    "prevPrice24h"?: number;
    "vwap"?: number;
    "highPrice"?: number;
    "lowPrice"?: number;
    "lastPrice"?: number;
    "lastPriceProtected"?: number;
    "lastTickDirection"?: string;
    "lastChangePcnt"?: number;
    "bidPrice"?: number;
    "midPrice"?: number;
    "askPrice"?: number;
    "impactBidPrice"?: number;
    "impactMidPrice"?: number;
    "impactAskPrice"?: number;
    "hasLiquidity"?: boolean;
    "openInterest"?: number;
    "openValue"?: number;
    "fairMethod"?: string;
    "fairBasisRate"?: number;
    "fairBasis"?: number;
    "fairPrice"?: number;
    "markMethod"?: string;
    "markPrice"?: number;
    "indicativeTaxRate"?: number;
    "indicativeSettlePrice"?: number;
    "settledPrice"?: number;
    "timestamp"?: Date;
}

export interface InstrumentInterval {
    "intervals": Array<string>;
    "symbols": Array<string>;
}

export interface Insurance {
    "currency": string;
    "timestamp": Date;
    "walletBalance"?: number;
}

export interface Leaderboard {
    "name": string;
    "isRealName"?: boolean;
    "isMe"?: boolean;
    "profit"?: number;
}

export interface Liquidation {
    "orderID": string;
    "symbol"?: string;
    "side"?: string;
    "price"?: number;
    "leavesQty"?: number;
}

export interface Margin {
    "account": number;
    "currency": string;
    "riskLimit"?: number;
    "prevState"?: string;
    "state"?: string;
    "action"?: string;
    "amount"?: number;
    "pendingCredit"?: number;
    "pendingDebit"?: number;
    "confirmedDebit"?: number;
    "prevRealisedPnl"?: number;
    "prevUnrealisedPnl"?: number;
    "grossComm"?: number;
    "grossOpenCost"?: number;
    "grossOpenPremium"?: number;
    "grossExecCost"?: number;
    "grossMarkValue"?: number;
    "riskValue"?: number;
    "taxableMargin"?: number;
    "initMargin"?: number;
    "maintMargin"?: number;
    "sessionMargin"?: number;
    "targetExcessMargin"?: number;
    "varMargin"?: number;
    "realisedPnl"?: number;
    "unrealisedPnl"?: number;
    "indicativeTax"?: number;
    "unrealisedProfit"?: number;
    "syntheticMargin"?: number;
    "walletBalance"?: number;
    "marginBalance"?: number;
    "marginBalancePcnt"?: number;
    "marginLeverage"?: number;
    "marginUsedPcnt"?: number;
    "excessMargin"?: number;
    "excessMarginPcnt"?: number;
    "availableMargin"?: number;
    "withdrawableMargin"?: number;
    "timestamp"?: Date;
    "grossLastValue"?: number;
    "commission"?: number;
}

export interface Order {
    "orderID": string;
    "clOrdID"?: string;
    "clOrdLinkID"?: string;
    "account"?: number;
    "symbol"?: string;
    "side"?: string;
    "simpleOrderQty"?: number;
    "orderQty"?: number;
    "price"?: number;
    "displayQty"?: number;
    "stopPx"?: number;
    "pegOffsetValue"?: number;
    "pegPriceType"?: string;
    "currency"?: string;
    "settlCurrency"?: string;
    "ordType"?: string;
    "timeInForce"?: string;
    "execInst"?: string;
    "contingencyType"?: string;
    "exDestination"?: string;
    "ordStatus"?: string;
    "triggered"?: string;
    "workingIndicator"?: boolean;
    "ordRejReason"?: string;
    "simpleLeavesQty"?: number;
    "leavesQty"?: number;
    "simpleCumQty"?: number;
    "cumQty"?: number;
    "avgPx"?: number;
    "multiLegReportingType"?: string;
    "text"?: string;
    "transactTime"?: Date;
    "timestamp"?: Date;
}

export interface OrderBook {
    "symbol": string;
    "level": number;
    "bidSize"?: number;
    "bidPrice"?: number;
    "askPrice"?: number;
    "askSize"?: number;
    "timestamp"?: Date;
}

export interface OrderBookL2 {
    "symbol": string;
    "id": number;
    "side": string;
    "size"?: number;
    "price"?: number;
}

export interface Position {
    "account": number;
    "symbol": string;
    "currency": string;
    "underlying"?: string;
    "quoteCurrency"?: string;
    "commission"?: number;
    "leverage"?: number;
    "crossMargin"?: boolean;
    "rebalancedPnl"?: number;
    "prevRealisedPnl"?: number;
    "prevUnrealisedPnl"?: number;
    "prevClosePrice"?: number;
    "openingTimestamp"?: Date;
    "openingQty"?: number;
    "openingCost"?: number;
    "openingComm"?: number;
    "openOrderBuyQty"?: number;
    "openOrderBuyCost"?: number;
    "openOrderBuyPremium"?: number;
    "openOrderSellQty"?: number;
    "openOrderSellCost"?: number;
    "openOrderSellPremium"?: number;
    "execBuyQty"?: number;
    "execBuyCost"?: number;
    "execSellQty"?: number;
    "execSellCost"?: number;
    "execQty"?: number;
    "execCost"?: number;
    "execComm"?: number;
    "currentTimestamp"?: Date;
    "currentQty"?: number;
    "currentCost"?: number;
    "currentComm"?: number;
    "realisedCost"?: number;
    "unrealisedCost"?: number;
    "grossOpenCost"?: number;
    "grossOpenPremium"?: number;
    "grossExecCost"?: number;
    "isOpen"?: boolean;
    "markPrice"?: number;
    "markValue"?: number;
    "homeNotional"?: number;
    "foreignNotional"?: number;
    "posState"?: string;
    "posCost"?: number;
    "posCost2"?: number;
    "posCross"?: number;
    "posInit"?: number;
    "posComm"?: number;
    "posLoss"?: number;
    "posMargin"?: number;
    "posMaint"?: number;
    "posAllowance"?: number;
    "taxableMargin"?: number;
    "initMargin"?: number;
    "maintMargin"?: number;
    "sessionMargin"?: number;
    "targetExcessMargin"?: number;
    "varMargin"?: number;
    "realisedGrossPnl"?: number;
    "realisedTax"?: number;
    "realisedPnl"?: number;
    "unrealisedGrossPnl"?: number;
    "longBankrupt"?: number;
    "shortBankrupt"?: number;
    "taxBase"?: number;
    "indicativeTaxRate"?: number;
    "indicativeTax"?: number;
    "unrealisedTax"?: number;
    "unrealisedPnl"?: number;
    "unrealisedPnlPcnt"?: number;
    "unrealisedRoePcnt"?: number;
    "simpleQty"?: number;
    "simpleCost"?: number;
    "simpleValue"?: number;
    "simplePnl"?: number;
    "simplePnlPcnt"?: number;
    "avgCostPrice"?: number;
    "avgEntryPrice"?: number;
    "breakEvenPrice"?: number;
    "marginCallPrice"?: number;
    "liquidationPrice"?: number;
    "bankruptPrice"?: number;
    "timestamp"?: Date;
    "lastPrice"?: number;
    "lastValue"?: number;
}

export interface Quote {
    "timestamp"?: Date;
    "symbol"?: string;
    "bidSize"?: number;
    "bidPrice"?: number;
    "askPrice"?: number;
    "askSize"?: number;
    "id"?: number;
}

export interface Settlement {
    "timestamp": Date;
    "symbol": string;
    "settlementType"?: string;
    "settledPrice"?: number;
    "bankrupt"?: number;
    "taxBase"?: number;
    "taxRate"?: number;
}

export interface Stats {
    "rootSymbol": string;
    "currency"?: string;
    "volume24h"?: number;
    "turnover24h"?: number;
    "openInterest"?: number;
    "openValue"?: number;
}

export interface StatsHistory {
    "date": Date;
    "rootSymbol": string;
    "currency"?: string;
    "volume"?: number;
    "turnover"?: number;
}

export interface Trade {
    "timestamp"?: Date;
    "symbol"?: string;
    "side"?: string;
    "size"?: number;
    "price"?: number;
    "tickDirection"?: string;
    "trdMatchID"?: string;
    "grossValue"?: number;
    "homeNotional"?: number;
    "foreignNotional"?: number;
    "id"?: number;
}

export interface TradeBin {
    "timestamp"?: Date;
    "symbol"?: string;
    "open"?: number;
    "high"?: number;
    "low"?: number;
    "close"?: number;
    "trades"?: number;
    "volume"?: number;
    "vwap"?: number;
    "lastSize"?: number;
    "turnover"?: number;
    "homeNotional"?: number;
    "foreignNotional"?: number;
    "id"?: number;
}

export interface Transaction {
    "transactID": string;
    "account"?: number;
    "currency"?: string;
    "transactType"?: string;
    "amount"?: number;
    "fee"?: number;
    "transactStatus"?: string;
    "address"?: string;
    "tx"?: string;
    "text"?: string;
    "transactTime"?: Date;
    "timestamp"?: Date;
}

export interface User {
    "id"?: number;
    "ownerId"?: number;
    "firstname"?: string;
    "lastname"?: string;
    "status"?: string;
    "username": string;
    "email": string;
    "phone"?: string;
    "countryCode"?: number;
    "created"?: Date;
    "lastUpdated"?: Date;
    "preferences"?: UserPreferences;
    "tFAEnabled"?: string;
    "affiliateID"?: string;
    "pgpPubKey"?: string;
    "country"?: string;
    "disabled"?: boolean;
}

export interface UserCommission {
    "makerFee"?: string;
    "takerFee"?: string;
    "insuranceFee"?: string;
}

export interface UserPreferences {
    "announcementsLastSeen"?: Date;
    "colorTheme"?: string;
    "currency"?: string;
    "debug"?: boolean;
    "disableEmails"?: Array<string>;
    "hideConfirmDialogs"?: Array<string>;
    "hideConnectionModal"?: boolean;
    "hideFromLeaderboard"?: boolean;
    "hideNameFromLeaderboard"?: boolean;
    "hideNotifications"?: Array<string>;
    "hidePhoneConfirm"?: boolean;
    "locale"?: string;
    "msgsSeen"?: Array<string>;
    "orderBookBinning"?: number;
    "orderBookType"?: string;
    "orderControlsPlusMinus"?: boolean;
    "sounds"?: Array<string>;
    "strictIPCheck"?: boolean;
    "strictTimeout"?: boolean;
    "tickerGroup"?: string;
    "tickerPinned"?: boolean;
    "tradeLayout"?: string;
}



/**
 * AnnouncementApi - fetch parameter creator
 */
export const AnnouncementApiFetchParamCreactor = {
    /** 
     * Get site announcements.
     * @param columns Array of column names to fetch. If omitted, will return all columns.
     */
    announcementGet(params: {  columns?: string; }): FetchArgs {
        const baseUrl = `/announcement`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "columns": params.columns,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get urgent (banner) announcements.
     */
    announcementGetUrgent(): FetchArgs {
        const baseUrl = `/announcement/urgent`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * AnnouncementApi - functional programming interface
 */
export const AnnouncementApiFp = {
    /** 
     * Get site announcements.
     * @param columns Array of column names to fetch. If omitted, will return all columns.
     */
    announcementGet(params: { columns?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Announcement>> {
        const fetchArgs = AnnouncementApiFetchParamCreactor.announcementGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get urgent (banner) announcements.
     */
    announcementGetUrgent(): (fetch: FetchAPI, basePath?: string) => Promise<Array<Announcement>> {
        const fetchArgs = AnnouncementApiFetchParamCreactor.announcementGetUrgent();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * AnnouncementApi - object-oriented interface
 */
export class AnnouncementApi extends BaseAPI {
    /** 
     * Get site announcements.
     * @param columns Array of column names to fetch. If omitted, will return all columns.
     */
    announcementGet(params: {  columns?: string; }) {
        return AnnouncementApiFp.announcementGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Get urgent (banner) announcements.
     */
    announcementGetUrgent() {
        return AnnouncementApiFp.announcementGetUrgent()(this.fetch, this.basePath);
    }
}


/**
 * ApiKeyApi - fetch parameter creator
 */
export const ApiKeyApiFetchParamCreactor = {
    /** 
     * Disable an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    apiKeyDisable(params: {  apiKeyID: string; }): FetchArgs {
        // verify required parameter "apiKeyID" is set
        if (params["apiKeyID"] == null) {
            throw new Error("Missing required parameter apiKeyID when calling apiKeyDisable");
        }
        const baseUrl = `/apiKey/disable`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "apiKeyID": params.apiKeyID,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Enable an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    apiKeyEnable(params: {  apiKeyID: string; }): FetchArgs {
        // verify required parameter "apiKeyID" is set
        if (params["apiKeyID"] == null) {
            throw new Error("Missing required parameter apiKeyID when calling apiKeyEnable");
        }
        const baseUrl = `/apiKey/enable`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "apiKeyID": params.apiKeyID,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get your API Keys.
     * @param reverse If true, will sort results newest first.
     */
    apiKeyGet(params: {  reverse?: boolean; }): FetchArgs {
        const baseUrl = `/apiKey`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "reverse": params.reverse,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Create a new API Key.
     * API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
     * @param name Key name. This name is for reference only.
     * @param cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt;
     * @param permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;].
     * @param enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable.
     * @param token OTP Token (YubiKey, Google Authenticator)
     */
    apiKeyNew(params: {  name?: string; cidr?: string; permissions?: string; enabled?: boolean; token?: string; }): FetchArgs {
        const baseUrl = `/apiKey`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "name": params.name,
            "cidr": params.cidr,
            "permissions": params.permissions,
            "enabled": params.enabled,
            "token": params.token,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Remove an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    apiKeyRemove(params: {  apiKeyID: string; }): FetchArgs {
        // verify required parameter "apiKeyID" is set
        if (params["apiKeyID"] == null) {
            throw new Error("Missing required parameter apiKeyID when calling apiKeyRemove");
        }
        const baseUrl = `/apiKey`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "DELETE" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "apiKeyID": params.apiKeyID,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * ApiKeyApi - functional programming interface
 */
export const ApiKeyApiFp = {
    /** 
     * Disable an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    apiKeyDisable(params: { apiKeyID: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<ApiKey> {
        const fetchArgs = ApiKeyApiFetchParamCreactor.apiKeyDisable(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Enable an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    apiKeyEnable(params: { apiKeyID: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<ApiKey> {
        const fetchArgs = ApiKeyApiFetchParamCreactor.apiKeyEnable(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get your API Keys.
     * @param reverse If true, will sort results newest first.
     */
    apiKeyGet(params: { reverse?: boolean;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<ApiKey>> {
        const fetchArgs = ApiKeyApiFetchParamCreactor.apiKeyGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Create a new API Key.
     * API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
     * @param name Key name. This name is for reference only.
     * @param cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt;
     * @param permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;].
     * @param enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable.
     * @param token OTP Token (YubiKey, Google Authenticator)
     */
    apiKeyNew(params: { name?: string; cidr?: string; permissions?: string; enabled?: boolean; token?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<ApiKey> {
        const fetchArgs = ApiKeyApiFetchParamCreactor.apiKeyNew(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Remove an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    apiKeyRemove(params: { apiKeyID: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
        const fetchArgs = ApiKeyApiFetchParamCreactor.apiKeyRemove(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * ApiKeyApi - object-oriented interface
 */
export class ApiKeyApi extends BaseAPI {
    /** 
     * Disable an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    apiKeyDisable(params: {  apiKeyID: string; }) {
        return ApiKeyApiFp.apiKeyDisable(params)(this.fetch, this.basePath);
    }
    /** 
     * Enable an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    apiKeyEnable(params: {  apiKeyID: string; }) {
        return ApiKeyApiFp.apiKeyEnable(params)(this.fetch, this.basePath);
    }
    /** 
     * Get your API Keys.
     * @param reverse If true, will sort results newest first.
     */
    apiKeyGet(params: {  reverse?: boolean; }) {
        return ApiKeyApiFp.apiKeyGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Create a new API Key.
     * API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
     * @param name Key name. This name is for reference only.
     * @param cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt;
     * @param permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;].
     * @param enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable.
     * @param token OTP Token (YubiKey, Google Authenticator)
     */
    apiKeyNew(params: {  name?: string; cidr?: string; permissions?: string; enabled?: boolean; token?: string; }) {
        return ApiKeyApiFp.apiKeyNew(params)(this.fetch, this.basePath);
    }
    /** 
     * Remove an API Key.
     * @param apiKeyID API Key ID (public component).
     */
    apiKeyRemove(params: {  apiKeyID: string; }) {
        return ApiKeyApiFp.apiKeyRemove(params)(this.fetch, this.basePath);
    }
}


/**
 * ChatApi - fetch parameter creator
 */
export const ChatApiFetchParamCreactor = {
    /** 
     * Get chat messages.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     */
    chatGet(params: {  count?: number; start?: number; reverse?: boolean; }): FetchArgs {
        const baseUrl = `/chat`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get connected users.
     * Returns an array with browser users in the first position and API users (bots) in the second position.
     */
    chatGetConnected(): FetchArgs {
        const baseUrl = `/chat/connected`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Send a chat message.
     * @param message 
     */
    chatNew(params: {  message: string; }): FetchArgs {
        // verify required parameter "message" is set
        if (params["message"] == null) {
            throw new Error("Missing required parameter message when calling chatNew");
        }
        const baseUrl = `/chat`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "message": params.message,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * ChatApi - functional programming interface
 */
export const ChatApiFp = {
    /** 
     * Get chat messages.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     */
    chatGet(params: { count?: number; start?: number; reverse?: boolean;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Chat>> {
        const fetchArgs = ChatApiFetchParamCreactor.chatGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get connected users.
     * Returns an array with browser users in the first position and API users (bots) in the second position.
     */
    chatGetConnected(): (fetch: FetchAPI, basePath?: string) => Promise<ConnectedUsers> {
        const fetchArgs = ChatApiFetchParamCreactor.chatGetConnected();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Send a chat message.
     * @param message 
     */
    chatNew(params: { message: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Chat> {
        const fetchArgs = ChatApiFetchParamCreactor.chatNew(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * ChatApi - object-oriented interface
 */
export class ChatApi extends BaseAPI {
    /** 
     * Get chat messages.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     */
    chatGet(params: {  count?: number; start?: number; reverse?: boolean; }) {
        return ChatApiFp.chatGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Get connected users.
     * Returns an array with browser users in the first position and API users (bots) in the second position.
     */
    chatGetConnected() {
        return ChatApiFp.chatGetConnected()(this.fetch, this.basePath);
    }
    /** 
     * Send a chat message.
     * @param message 
     */
    chatNew(params: {  message: string; }) {
        return ChatApiFp.chatNew(params)(this.fetch, this.basePath);
    }
}


/**
 * ExecutionApi - fetch parameter creator
 */
export const ExecutionApiFetchParamCreactor = {
    /** 
     * Get all raw executions for your account.
     * This returns all raw transactions, which includes order opening and cancelation, and order status changes. It can be quite noisy. More focused information is available at &#x60;/execution/tradeHistory&#x60;.  You may also use the &#x60;filter&#x60; param to target your query. Specify an array as a filter value, such as &#x60;{\&quot;execType\&quot;: [\&quot;Settlement\&quot;, \&quot;Trade\&quot;]}&#x60; to filter on multiple values.  See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html) for explanations of these fields. 
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    executionGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/execution`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get all balance-affecting executions. This includes each trade, insurance charge, and settlement.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    executionGetTradeHistory(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/execution/tradeHistory`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * ExecutionApi - functional programming interface
 */
export const ExecutionApiFp = {
    /** 
     * Get all raw executions for your account.
     * This returns all raw transactions, which includes order opening and cancelation, and order status changes. It can be quite noisy. More focused information is available at &#x60;/execution/tradeHistory&#x60;.  You may also use the &#x60;filter&#x60; param to target your query. Specify an array as a filter value, such as &#x60;{\&quot;execType\&quot;: [\&quot;Settlement\&quot;, \&quot;Trade\&quot;]}&#x60; to filter on multiple values.  See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html) for explanations of these fields. 
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    executionGet(params: { symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Execution>> {
        const fetchArgs = ExecutionApiFetchParamCreactor.executionGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get all balance-affecting executions. This includes each trade, insurance charge, and settlement.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    executionGetTradeHistory(params: { symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Execution>> {
        const fetchArgs = ExecutionApiFetchParamCreactor.executionGetTradeHistory(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * ExecutionApi - object-oriented interface
 */
export class ExecutionApi extends BaseAPI {
    /** 
     * Get all raw executions for your account.
     * This returns all raw transactions, which includes order opening and cancelation, and order status changes. It can be quite noisy. More focused information is available at &#x60;/execution/tradeHistory&#x60;.  You may also use the &#x60;filter&#x60; param to target your query. Specify an array as a filter value, such as &#x60;{\&quot;execType\&quot;: [\&quot;Settlement\&quot;, \&quot;Trade\&quot;]}&#x60; to filter on multiple values.  See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_8_8.html) for explanations of these fields. 
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    executionGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return ExecutionApiFp.executionGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Get all balance-affecting executions. This includes each trade, insurance charge, and settlement.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    executionGetTradeHistory(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return ExecutionApiFp.executionGetTradeHistory(params)(this.fetch, this.basePath);
    }
}


/**
 * FundingApi - fetch parameter creator
 */
export const FundingApiFetchParamCreactor = {
    /** 
     * Get funding history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    fundingGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/funding`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * FundingApi - functional programming interface
 */
export const FundingApiFp = {
    /** 
     * Get funding history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    fundingGet(params: { symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Funding>> {
        const fetchArgs = FundingApiFetchParamCreactor.fundingGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * FundingApi - object-oriented interface
 */
export class FundingApi extends BaseAPI {
    /** 
     * Get funding history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    fundingGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return FundingApiFp.fundingGet(params)(this.fetch, this.basePath);
    }
}


/**
 * InstrumentApi - fetch parameter creator
 */
export const InstrumentApiFetchParamCreactor = {
    /** 
     * Get instruments.
     * This returns all instruments and indices, including those that have settled or are unlisted. Use this endpoint if you want to query for individual instruments or use a complex filter. Use &#x60;/instrument/active&#x60; to return active instruments, or use a filter like &#x60;{\&quot;state\&quot;: \&quot;Open\&quot;}&#x60;.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    instrumentGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/instrument`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get all active instruments and instruments that have expired in &lt;24hrs.
     */
    instrumentGetActive(): FetchArgs {
        const baseUrl = `/instrument/active`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Helper method. Gets all active instruments and all indices. This is a join of the result of /indices and /active.
     */
    instrumentGetActiveAndIndices(): FetchArgs {
        const baseUrl = `/instrument/activeAndIndices`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Return all active contract series and interval pairs.
     * This endpoint is useful for determining which pairs are live. It returns two arrays of   strings. The first is intervals, such as &#x60;[\&quot;BVOL:daily\&quot;, \&quot;BVOL:weekly\&quot;, \&quot;XBU:daily\&quot;, \&quot;XBU:monthly\&quot;, ...]&#x60;. These identifiers are usable in any query&#39;s &#x60;symbol&#x60; param. The second array is the current resolution of these intervals. Results are mapped at the same index.
     */
    instrumentGetActiveIntervals(): FetchArgs {
        const baseUrl = `/instrument/activeIntervals`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get all price indices.
     */
    instrumentGetIndices(): FetchArgs {
        const baseUrl = `/instrument/indices`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * InstrumentApi - functional programming interface
 */
export const InstrumentApiFp = {
    /** 
     * Get instruments.
     * This returns all instruments and indices, including those that have settled or are unlisted. Use this endpoint if you want to query for individual instruments or use a complex filter. Use &#x60;/instrument/active&#x60; to return active instruments, or use a filter like &#x60;{\&quot;state\&quot;: \&quot;Open\&quot;}&#x60;.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    instrumentGet(params: { symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Instrument>> {
        const fetchArgs = InstrumentApiFetchParamCreactor.instrumentGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get all active instruments and instruments that have expired in &lt;24hrs.
     */
    instrumentGetActive(): (fetch: FetchAPI, basePath?: string) => Promise<Array<Instrument>> {
        const fetchArgs = InstrumentApiFetchParamCreactor.instrumentGetActive();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Helper method. Gets all active instruments and all indices. This is a join of the result of /indices and /active.
     */
    instrumentGetActiveAndIndices(): (fetch: FetchAPI, basePath?: string) => Promise<Array<Instrument>> {
        const fetchArgs = InstrumentApiFetchParamCreactor.instrumentGetActiveAndIndices();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Return all active contract series and interval pairs.
     * This endpoint is useful for determining which pairs are live. It returns two arrays of   strings. The first is intervals, such as &#x60;[\&quot;BVOL:daily\&quot;, \&quot;BVOL:weekly\&quot;, \&quot;XBU:daily\&quot;, \&quot;XBU:monthly\&quot;, ...]&#x60;. These identifiers are usable in any query&#39;s &#x60;symbol&#x60; param. The second array is the current resolution of these intervals. Results are mapped at the same index.
     */
    instrumentGetActiveIntervals(): (fetch: FetchAPI, basePath?: string) => Promise<InstrumentInterval> {
        const fetchArgs = InstrumentApiFetchParamCreactor.instrumentGetActiveIntervals();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get all price indices.
     */
    instrumentGetIndices(): (fetch: FetchAPI, basePath?: string) => Promise<Array<Instrument>> {
        const fetchArgs = InstrumentApiFetchParamCreactor.instrumentGetIndices();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * InstrumentApi - object-oriented interface
 */
export class InstrumentApi extends BaseAPI {
    /** 
     * Get instruments.
     * This returns all instruments and indices, including those that have settled or are unlisted. Use this endpoint if you want to query for individual instruments or use a complex filter. Use &#x60;/instrument/active&#x60; to return active instruments, or use a filter like &#x60;{\&quot;state\&quot;: \&quot;Open\&quot;}&#x60;.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    instrumentGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return InstrumentApiFp.instrumentGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Get all active instruments and instruments that have expired in &lt;24hrs.
     */
    instrumentGetActive() {
        return InstrumentApiFp.instrumentGetActive()(this.fetch, this.basePath);
    }
    /** 
     * Helper method. Gets all active instruments and all indices. This is a join of the result of /indices and /active.
     */
    instrumentGetActiveAndIndices() {
        return InstrumentApiFp.instrumentGetActiveAndIndices()(this.fetch, this.basePath);
    }
    /** 
     * Return all active contract series and interval pairs.
     * This endpoint is useful for determining which pairs are live. It returns two arrays of   strings. The first is intervals, such as &#x60;[\&quot;BVOL:daily\&quot;, \&quot;BVOL:weekly\&quot;, \&quot;XBU:daily\&quot;, \&quot;XBU:monthly\&quot;, ...]&#x60;. These identifiers are usable in any query&#39;s &#x60;symbol&#x60; param. The second array is the current resolution of these intervals. Results are mapped at the same index.
     */
    instrumentGetActiveIntervals() {
        return InstrumentApiFp.instrumentGetActiveIntervals()(this.fetch, this.basePath);
    }
    /** 
     * Get all price indices.
     */
    instrumentGetIndices() {
        return InstrumentApiFp.instrumentGetIndices()(this.fetch, this.basePath);
    }
}


/**
 * InsuranceApi - fetch parameter creator
 */
export const InsuranceApiFetchParamCreactor = {
    /** 
     * Get insurance fund history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    insuranceGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/insurance`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * InsuranceApi - functional programming interface
 */
export const InsuranceApiFp = {
    /** 
     * Get insurance fund history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    insuranceGet(params: { symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Insurance>> {
        const fetchArgs = InsuranceApiFetchParamCreactor.insuranceGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * InsuranceApi - object-oriented interface
 */
export class InsuranceApi extends BaseAPI {
    /** 
     * Get insurance fund history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    insuranceGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return InsuranceApiFp.insuranceGet(params)(this.fetch, this.basePath);
    }
}


/**
 * LeaderboardApi - fetch parameter creator
 */
export const LeaderboardApiFetchParamCreactor = {
    /** 
     * Get current leaderboard.
     * @param method Ranking type. Options: \&quot;notional\&quot;, \&quot;ROE\&quot;
     */
    leaderboardGet(params: {  method?: string; }): FetchArgs {
        const baseUrl = `/leaderboard`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "method": params.method,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * LeaderboardApi - functional programming interface
 */
export const LeaderboardApiFp = {
    /** 
     * Get current leaderboard.
     * @param method Ranking type. Options: \&quot;notional\&quot;, \&quot;ROE\&quot;
     */
    leaderboardGet(params: { method?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Leaderboard>> {
        const fetchArgs = LeaderboardApiFetchParamCreactor.leaderboardGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * LeaderboardApi - object-oriented interface
 */
export class LeaderboardApi extends BaseAPI {
    /** 
     * Get current leaderboard.
     * @param method Ranking type. Options: \&quot;notional\&quot;, \&quot;ROE\&quot;
     */
    leaderboardGet(params: {  method?: string; }) {
        return LeaderboardApiFp.leaderboardGet(params)(this.fetch, this.basePath);
    }
}


/**
 * LiquidationApi - fetch parameter creator
 */
export const LiquidationApiFetchParamCreactor = {
    /** 
     * Get liquidation orders.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    liquidationGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/liquidation`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * LiquidationApi - functional programming interface
 */
export const LiquidationApiFp = {
    /** 
     * Get liquidation orders.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    liquidationGet(params: { symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Liquidation>> {
        const fetchArgs = LiquidationApiFetchParamCreactor.liquidationGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * LiquidationApi - object-oriented interface
 */
export class LiquidationApi extends BaseAPI {
    /** 
     * Get liquidation orders.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    liquidationGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return LiquidationApiFp.liquidationGet(params)(this.fetch, this.basePath);
    }
}


/**
 * OrderApi - fetch parameter creator
 */
export const OrderApiFetchParamCreactor = {
    /** 
     * Amend the quantity or price of an open order.
     * &lt;p&gt;Send an &lt;code&gt;orderID&lt;/code&gt; or &lt;code&gt;clOrdID&lt;/code&gt; to identify the order you wish to amend.&lt;/p&gt; &lt;p&gt;Both order quantity and price can be amended. Only one &lt;code&gt;qty&lt;/code&gt; field can be used to amend.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;leavesQty&lt;/code&gt; field to specify how much of the order you wish to remain open. This can be useful if you want to adjust your position&amp;#39;s delta by a certain amount, regardless of how much of the order has already filled.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;simpleOrderQty&lt;/code&gt; and &lt;code&gt;simpleLeavesQty&lt;/code&gt; fields to specify order size in Bitcoin, rather than contracts. These fields will round up to the nearest contract.&lt;/p&gt; &lt;p&gt;Like order placement, amending can be done in bulk. Simply send a request to &lt;code&gt;PUT /api/v1/order/bulk&lt;/code&gt; with a JSON body of the shape: &lt;code&gt;{&amp;quot;orders&amp;quot;: [{...}, {...}]}&lt;/code&gt;, each object containing the fields used in this endpoint.&lt;/p&gt; 
     * @param orderID Order ID
     * @param clOrdID Client Order ID. See POST /order.
     * @param simpleOrderQty Optional order quantity in units of the underlying instrument (i.e. Bitcoin).
     * @param orderQty Optional order quantity in units of the instrument (i.e. contracts).
     * @param simpleLeavesQty Optional leaves quantity in units of the underlying instrument (i.e. Bitcoin). Useful for amending partially filled orders.
     * @param leavesQty Optional leaves quantity in units of the instrument (i.e. contracts). Useful for amending partially filled orders.
     * @param price Optional limit price for &#39;Limit&#39;, &#39;StopLimit&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param stopPx Optional trigger price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders. Use a price below the current price for stop-sell orders and buy-if-touched orders.
     * @param pegOffsetValue Optional trailing offset from the current price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for &#39;Pegged&#39; orders.
     * @param text Optional amend annotation. e.g. &#39;Adjust skew&#39;.
     */
    orderAmend(params: {  orderID?: string; clOrdID?: string; simpleOrderQty?: number; orderQty?: number; simpleLeavesQty?: number; leavesQty?: number; price?: number; stopPx?: number; pegOffsetValue?: number; text?: string; }): FetchArgs {
        const baseUrl = `/order`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "PUT" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "orderID": params.orderID,
            "clOrdID": params.clOrdID,
            "simpleOrderQty": params.simpleOrderQty,
            "orderQty": params.orderQty,
            "simpleLeavesQty": params.simpleLeavesQty,
            "leavesQty": params.leavesQty,
            "price": params.price,
            "stopPx": params.stopPx,
            "pegOffsetValue": params.pegOffsetValue,
            "text": params.text,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Amend multiple orders.
     * Similar to POST /amend, but with multiple orders. &#x60;application/json&#x60; only. Ratelimited at 50%.
     * @param orders An array of orders.
     */
    orderAmendBulk(params: {  orders?: string; }): FetchArgs {
        const baseUrl = `/order/bulk`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "PUT" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "orders": params.orders,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Cancel order(s). Send multiple order IDs to cancel in bulk.
     * Either an orderID or a clOrdID must be provided.
     * @param orderID Order ID(s).
     * @param clOrdID Client Order ID(s). See POST /order.
     * @param text Optional cancellation annotation. e.g. &#39;Spread Exceeded&#39;.
     */
    orderCancel(params: {  orderID?: string; clOrdID?: string; text?: string; }): FetchArgs {
        const baseUrl = `/order`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "DELETE" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "orderID": params.orderID,
            "clOrdID": params.clOrdID,
            "text": params.text,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Cancels all of your orders.
     * @param symbol Optional symbol. If provided, only cancels orders for that symbol.
     * @param filter Optional filter for cancellation. Use to only cancel some orders, e.g. &#x60;{\&quot;side\&quot;: \&quot;Buy\&quot;}&#x60;.
     * @param text Optional cancellation annotation. e.g. &#39;Spread Exceeded&#39;
     */
    orderCancelAll(params: {  symbol?: string; filter?: string; text?: string; }): FetchArgs {
        const baseUrl = `/order/all`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "DELETE" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "symbol": params.symbol,
            "filter": params.filter,
            "text": params.text,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Automatically cancel all your orders after a specified timeout.
     * Useful as a dead-man&#39;s switch to ensure your orders are canceled in case of an outage. If called repeatedly, the existing offset will be canceled and a new one will be inserted in its place.  Example usage: call this route at 15s intervals with an offset of 60000 (60s). If this route is not called within 60 seconds, all your orders will be automatically canceled.  This is also available via [WebSocket](https://www.bitmex.com/app/wsAPI#dead-man-s-switch-auto-cancel-). 
     * @param timeout Timeout in ms. Set to 0 to cancel this timer. 
     */
    orderCancelAllAfter(params: {  timeout: number; }): FetchArgs {
        // verify required parameter "timeout" is set
        if (params["timeout"] == null) {
            throw new Error("Missing required parameter timeout when calling orderCancelAllAfter");
        }
        const baseUrl = `/order/cancelAllAfter`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "timeout": params.timeout,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Close a position. [Deprecated, use POST /order with execInst: &#39;Close&#39;]
     * If no &#x60;price&#x60; is specified, a market order will be submitted to close the whole of your position. + This will also close all other open orders in this symbol.
     * @param symbol Symbol of position to close.
     * @param price Optional limit price.
     */
    orderClosePosition(params: {  symbol: string; price?: number; }): FetchArgs {
        // verify required parameter "symbol" is set
        if (params["symbol"] == null) {
            throw new Error("Missing required parameter symbol when calling orderClosePosition");
        }
        const baseUrl = `/order/closePosition`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "symbol": params.symbol,
            "price": params.price,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get your orders.
     * To get open orders only, send {\&quot;open\&quot;: true} in the filter param.  See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    orderGetOrders(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/order`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Create a new order.
     * This endpoint is used for placing orders. Valid order types are Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, and Pegged.  If no order type is provided, BitMEX will assume &#39;Limit&#39;. Be very careful with &#39;Market&#39; and &#39;Stop&#39; orders as you may be filled at an unfavourable price.  You can submit bulk orders by POSTing an array of orders to &#x60;/api/v1/order/bulk&#x60;. Send a JSON payload with the shape: &#x60;{\&quot;orders\&quot;: [{...}, {...}]}&#x60;, with each inner object containing the same fields that would be sent to this endpoint.  A note on API tools: if you want to keep track of order IDs yourself, set a unique clOrdID per order. This clOrdID will come back as a property on the order and any related executions (including on the WebSocket), and can be used to get or cancel the order. Max length is 36 characters.  To generate a clOrdID, consider setting a prefix, and incrementing a counter or generating a UUID. Some UUIDs are longer than 36 characters, so use a url-safe base64 encoding. For example, the prefix &#x60;&#39;bmex_mm_&#39;&#x60; and the UUID &#x60;&#39;7fbd6545-bb0c-11e4-a273-6003088a7c04&#39;&#x60; creates &#x60;&#39;bmex_mm_f71lRbsMEeSic2ADCIp8BA&#39;&#x60;.  See the [BitMEX Reference Market Maker](https://github.com/BitMEX/market-maker/blob/22c75a2b6db63e20212813e9afdb845db1b09b2a/bitmex.py#L152) for an example of how to use and generate clOrdIDs. 
     * @param symbol Instrument symbol. e.g. &#39;XBT24H&#39;.
     * @param side Order side. Valid options: Buy, Sell. Defaults to &#39;Buy&#39; unless &#x60;orderQty&#x60; or &#x60;simpleOrderQty&#x60; is negative.
     * @param simpleOrderQty Order quantity in units of the underlying instrument (i.e. Bitcoin).
     * @param quantity Deprecated: use &#x60;orderQty&#x60;.
     * @param orderQty Order quantity in units of the instrument (i.e. contracts).
     * @param price Optional limit price for &#39;Limit&#39;, &#39;StopLimit&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param displayQty Optional quantity to display in the book. Use 0 for a hidden order.
     * @param stopPrice Deprecated: use &#x60;stopPx&#x60;.
     * @param stopPx Optional trigger price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders. Use a price below the current price for stop-sell orders and buy-if-touched orders. Use &#x60;execInst&#x60; of &#39;MarkPrice&#39; or &#39;LastPrice&#39; to define the current price used for triggering.
     * @param clOrdID Optional Client Order ID. This clOrdID will come back on the order and any related executions.
     * @param clOrdLinkID Optional Client Order Link ID for contingent orders.
     * @param pegOffsetValue Optional trailing offset from the current price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for &#39;Pegged&#39; orders.
     * @param pegPriceType Optional peg price type. Valid options: LastPeg, MidPricePeg, MarketPeg, PrimaryPeg, TrailingStopPeg, TrailingStopPeg.
     * @param type Deprecated: use &#x60;ordType&#x60;.
     * @param ordType Order type. Valid options: Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, Pegged. Defaults to &#39;Limit&#39; when &#x60;price&#x60; is specified. Defaults to &#39;Stop&#39; when &#x60;stopPx&#x60; is specified. Defaults to &#39;StopLimit&#39; when &#x60;price&#x60; and &#x60;stopPx&#x60; are specified.
     * @param timeInForce Time in force. Valid options: Day, GoodTillCancel, ImmediateOrCancel, FillOrKill. Defaults to &#39;GoodTillCancel&#39; for &#39;Limit&#39;, &#39;StopLimit&#39;, &#39;LimitIfTouched&#39;, and &#39;MarketWithLeftOverAsLimit&#39; orders.
     * @param execInst Optional execution instructions. Valid options: ParticipateDoNotInitiate, AllOrNone, MarkPrice, LastPrice, Close, ReduceOnly. &#39;AllOrNone&#39; instruction requires &#x60;displayQty&#x60; to be 0. &#39;MarkPrice&#39; or &#39;LastPrice&#39; instruction valid for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param contingencyType Optional contingency type for use with &#x60;clOrdLinkID&#x60;. Valid options: OneCancelsTheOther, OneTriggersTheOther, OneUpdatesTheOtherAbsolute, OneUpdatesTheOtherProportional.
     * @param text Optional order annotation. e.g. &#39;Take profit&#39;.
     */
    orderNew(params: {  symbol: string; side?: string; simpleOrderQty?: number; quantity?: number; orderQty?: number; price?: number; displayQty?: number; stopPrice?: number; stopPx?: number; clOrdID?: string; clOrdLinkID?: string; pegOffsetValue?: number; pegPriceType?: string; type?: string; ordType?: string; timeInForce?: string; execInst?: string; contingencyType?: string; text?: string; }): FetchArgs {
        // verify required parameter "symbol" is set
        if (params["symbol"] == null) {
            throw new Error("Missing required parameter symbol when calling orderNew");
        }
        const baseUrl = `/order`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "symbol": params.symbol,
            "side": params.side,
            "simpleOrderQty": params.simpleOrderQty,
            "quantity": params.quantity,
            "orderQty": params.orderQty,
            "price": params.price,
            "displayQty": params.displayQty,
            "stopPrice": params.stopPrice,
            "stopPx": params.stopPx,
            "clOrdID": params.clOrdID,
            "clOrdLinkID": params.clOrdLinkID,
            "pegOffsetValue": params.pegOffsetValue,
            "pegPriceType": params.pegPriceType,
            "type": params.type,
            "ordType": params.ordType,
            "timeInForce": params.timeInForce,
            "execInst": params.execInst,
            "contingencyType": params.contingencyType,
            "text": params.text,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Create multiple new orders.
     * This endpoint is used for placing bulk orders. Valid order types are Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, and Pegged.  Each individual order object in the array should have the same properties as an individual POST /order call.  This endpoint is much faster for getting many orders into the book at once. Because it reduces load on BitMEX systems, this endpoint is ratelimited at &#x60;ceil(0.5 * orders)&#x60;. Submitting 10 orders via a bulk order call will only count as 5 requests.  For now, only &#x60;application/json&#x60; is supported on this endpoint. 
     * @param orders An array of orders.
     */
    orderNewBulk(params: {  orders?: string; }): FetchArgs {
        const baseUrl = `/order/bulk`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "orders": params.orders,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * OrderApi - functional programming interface
 */
export const OrderApiFp = {
    /** 
     * Amend the quantity or price of an open order.
     * &lt;p&gt;Send an &lt;code&gt;orderID&lt;/code&gt; or &lt;code&gt;clOrdID&lt;/code&gt; to identify the order you wish to amend.&lt;/p&gt; &lt;p&gt;Both order quantity and price can be amended. Only one &lt;code&gt;qty&lt;/code&gt; field can be used to amend.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;leavesQty&lt;/code&gt; field to specify how much of the order you wish to remain open. This can be useful if you want to adjust your position&amp;#39;s delta by a certain amount, regardless of how much of the order has already filled.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;simpleOrderQty&lt;/code&gt; and &lt;code&gt;simpleLeavesQty&lt;/code&gt; fields to specify order size in Bitcoin, rather than contracts. These fields will round up to the nearest contract.&lt;/p&gt; &lt;p&gt;Like order placement, amending can be done in bulk. Simply send a request to &lt;code&gt;PUT /api/v1/order/bulk&lt;/code&gt; with a JSON body of the shape: &lt;code&gt;{&amp;quot;orders&amp;quot;: [{...}, {...}]}&lt;/code&gt;, each object containing the fields used in this endpoint.&lt;/p&gt; 
     * @param orderID Order ID
     * @param clOrdID Client Order ID. See POST /order.
     * @param simpleOrderQty Optional order quantity in units of the underlying instrument (i.e. Bitcoin).
     * @param orderQty Optional order quantity in units of the instrument (i.e. contracts).
     * @param simpleLeavesQty Optional leaves quantity in units of the underlying instrument (i.e. Bitcoin). Useful for amending partially filled orders.
     * @param leavesQty Optional leaves quantity in units of the instrument (i.e. contracts). Useful for amending partially filled orders.
     * @param price Optional limit price for &#39;Limit&#39;, &#39;StopLimit&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param stopPx Optional trigger price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders. Use a price below the current price for stop-sell orders and buy-if-touched orders.
     * @param pegOffsetValue Optional trailing offset from the current price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for &#39;Pegged&#39; orders.
     * @param text Optional amend annotation. e.g. &#39;Adjust skew&#39;.
     */
    orderAmend(params: { orderID?: string; clOrdID?: string; simpleOrderQty?: number; orderQty?: number; simpleLeavesQty?: number; leavesQty?: number; price?: number; stopPx?: number; pegOffsetValue?: number; text?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Order> {
        const fetchArgs = OrderApiFetchParamCreactor.orderAmend(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Amend multiple orders.
     * Similar to POST /amend, but with multiple orders. &#x60;application/json&#x60; only. Ratelimited at 50%.
     * @param orders An array of orders.
     */
    orderAmendBulk(params: { orders?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Order>> {
        const fetchArgs = OrderApiFetchParamCreactor.orderAmendBulk(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Cancel order(s). Send multiple order IDs to cancel in bulk.
     * Either an orderID or a clOrdID must be provided.
     * @param orderID Order ID(s).
     * @param clOrdID Client Order ID(s). See POST /order.
     * @param text Optional cancellation annotation. e.g. &#39;Spread Exceeded&#39;.
     */
    orderCancel(params: { orderID?: string; clOrdID?: string; text?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Order>> {
        const fetchArgs = OrderApiFetchParamCreactor.orderCancel(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Cancels all of your orders.
     * @param symbol Optional symbol. If provided, only cancels orders for that symbol.
     * @param filter Optional filter for cancellation. Use to only cancel some orders, e.g. &#x60;{\&quot;side\&quot;: \&quot;Buy\&quot;}&#x60;.
     * @param text Optional cancellation annotation. e.g. &#39;Spread Exceeded&#39;
     */
    orderCancelAll(params: { symbol?: string; filter?: string; text?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = OrderApiFetchParamCreactor.orderCancelAll(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Automatically cancel all your orders after a specified timeout.
     * Useful as a dead-man&#39;s switch to ensure your orders are canceled in case of an outage. If called repeatedly, the existing offset will be canceled and a new one will be inserted in its place.  Example usage: call this route at 15s intervals with an offset of 60000 (60s). If this route is not called within 60 seconds, all your orders will be automatically canceled.  This is also available via [WebSocket](https://www.bitmex.com/app/wsAPI#dead-man-s-switch-auto-cancel-). 
     * @param timeout Timeout in ms. Set to 0 to cancel this timer. 
     */
    orderCancelAllAfter(params: { timeout: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = OrderApiFetchParamCreactor.orderCancelAllAfter(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Close a position. [Deprecated, use POST /order with execInst: &#39;Close&#39;]
     * If no &#x60;price&#x60; is specified, a market order will be submitted to close the whole of your position. + This will also close all other open orders in this symbol.
     * @param symbol Symbol of position to close.
     * @param price Optional limit price.
     */
    orderClosePosition(params: { symbol: string; price?: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<Order> {
        const fetchArgs = OrderApiFetchParamCreactor.orderClosePosition(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get your orders.
     * To get open orders only, send {\&quot;open\&quot;: true} in the filter param.  See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    orderGetOrders(params: { symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Order>> {
        const fetchArgs = OrderApiFetchParamCreactor.orderGetOrders(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Create a new order.
     * This endpoint is used for placing orders. Valid order types are Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, and Pegged.  If no order type is provided, BitMEX will assume &#39;Limit&#39;. Be very careful with &#39;Market&#39; and &#39;Stop&#39; orders as you may be filled at an unfavourable price.  You can submit bulk orders by POSTing an array of orders to &#x60;/api/v1/order/bulk&#x60;. Send a JSON payload with the shape: &#x60;{\&quot;orders\&quot;: [{...}, {...}]}&#x60;, with each inner object containing the same fields that would be sent to this endpoint.  A note on API tools: if you want to keep track of order IDs yourself, set a unique clOrdID per order. This clOrdID will come back as a property on the order and any related executions (including on the WebSocket), and can be used to get or cancel the order. Max length is 36 characters.  To generate a clOrdID, consider setting a prefix, and incrementing a counter or generating a UUID. Some UUIDs are longer than 36 characters, so use a url-safe base64 encoding. For example, the prefix &#x60;&#39;bmex_mm_&#39;&#x60; and the UUID &#x60;&#39;7fbd6545-bb0c-11e4-a273-6003088a7c04&#39;&#x60; creates &#x60;&#39;bmex_mm_f71lRbsMEeSic2ADCIp8BA&#39;&#x60;.  See the [BitMEX Reference Market Maker](https://github.com/BitMEX/market-maker/blob/22c75a2b6db63e20212813e9afdb845db1b09b2a/bitmex.py#L152) for an example of how to use and generate clOrdIDs. 
     * @param symbol Instrument symbol. e.g. &#39;XBT24H&#39;.
     * @param side Order side. Valid options: Buy, Sell. Defaults to &#39;Buy&#39; unless &#x60;orderQty&#x60; or &#x60;simpleOrderQty&#x60; is negative.
     * @param simpleOrderQty Order quantity in units of the underlying instrument (i.e. Bitcoin).
     * @param quantity Deprecated: use &#x60;orderQty&#x60;.
     * @param orderQty Order quantity in units of the instrument (i.e. contracts).
     * @param price Optional limit price for &#39;Limit&#39;, &#39;StopLimit&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param displayQty Optional quantity to display in the book. Use 0 for a hidden order.
     * @param stopPrice Deprecated: use &#x60;stopPx&#x60;.
     * @param stopPx Optional trigger price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders. Use a price below the current price for stop-sell orders and buy-if-touched orders. Use &#x60;execInst&#x60; of &#39;MarkPrice&#39; or &#39;LastPrice&#39; to define the current price used for triggering.
     * @param clOrdID Optional Client Order ID. This clOrdID will come back on the order and any related executions.
     * @param clOrdLinkID Optional Client Order Link ID for contingent orders.
     * @param pegOffsetValue Optional trailing offset from the current price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for &#39;Pegged&#39; orders.
     * @param pegPriceType Optional peg price type. Valid options: LastPeg, MidPricePeg, MarketPeg, PrimaryPeg, TrailingStopPeg, TrailingStopPeg.
     * @param type Deprecated: use &#x60;ordType&#x60;.
     * @param ordType Order type. Valid options: Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, Pegged. Defaults to &#39;Limit&#39; when &#x60;price&#x60; is specified. Defaults to &#39;Stop&#39; when &#x60;stopPx&#x60; is specified. Defaults to &#39;StopLimit&#39; when &#x60;price&#x60; and &#x60;stopPx&#x60; are specified.
     * @param timeInForce Time in force. Valid options: Day, GoodTillCancel, ImmediateOrCancel, FillOrKill. Defaults to &#39;GoodTillCancel&#39; for &#39;Limit&#39;, &#39;StopLimit&#39;, &#39;LimitIfTouched&#39;, and &#39;MarketWithLeftOverAsLimit&#39; orders.
     * @param execInst Optional execution instructions. Valid options: ParticipateDoNotInitiate, AllOrNone, MarkPrice, LastPrice, Close, ReduceOnly. &#39;AllOrNone&#39; instruction requires &#x60;displayQty&#x60; to be 0. &#39;MarkPrice&#39; or &#39;LastPrice&#39; instruction valid for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param contingencyType Optional contingency type for use with &#x60;clOrdLinkID&#x60;. Valid options: OneCancelsTheOther, OneTriggersTheOther, OneUpdatesTheOtherAbsolute, OneUpdatesTheOtherProportional.
     * @param text Optional order annotation. e.g. &#39;Take profit&#39;.
     */
    orderNew(params: { symbol: string; side?: string; simpleOrderQty?: number; quantity?: number; orderQty?: number; price?: number; displayQty?: number; stopPrice?: number; stopPx?: number; clOrdID?: string; clOrdLinkID?: string; pegOffsetValue?: number; pegPriceType?: string; type?: string; ordType?: string; timeInForce?: string; execInst?: string; contingencyType?: string; text?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Order> {
        const fetchArgs = OrderApiFetchParamCreactor.orderNew(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Create multiple new orders.
     * This endpoint is used for placing bulk orders. Valid order types are Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, and Pegged.  Each individual order object in the array should have the same properties as an individual POST /order call.  This endpoint is much faster for getting many orders into the book at once. Because it reduces load on BitMEX systems, this endpoint is ratelimited at &#x60;ceil(0.5 * orders)&#x60;. Submitting 10 orders via a bulk order call will only count as 5 requests.  For now, only &#x60;application/json&#x60; is supported on this endpoint. 
     * @param orders An array of orders.
     */
    orderNewBulk(params: { orders?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Order>> {
        const fetchArgs = OrderApiFetchParamCreactor.orderNewBulk(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * OrderApi - object-oriented interface
 */
export class OrderApi extends BaseAPI {
    /** 
     * Amend the quantity or price of an open order.
     * &lt;p&gt;Send an &lt;code&gt;orderID&lt;/code&gt; or &lt;code&gt;clOrdID&lt;/code&gt; to identify the order you wish to amend.&lt;/p&gt; &lt;p&gt;Both order quantity and price can be amended. Only one &lt;code&gt;qty&lt;/code&gt; field can be used to amend.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;leavesQty&lt;/code&gt; field to specify how much of the order you wish to remain open. This can be useful if you want to adjust your position&amp;#39;s delta by a certain amount, regardless of how much of the order has already filled.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;simpleOrderQty&lt;/code&gt; and &lt;code&gt;simpleLeavesQty&lt;/code&gt; fields to specify order size in Bitcoin, rather than contracts. These fields will round up to the nearest contract.&lt;/p&gt; &lt;p&gt;Like order placement, amending can be done in bulk. Simply send a request to &lt;code&gt;PUT /api/v1/order/bulk&lt;/code&gt; with a JSON body of the shape: &lt;code&gt;{&amp;quot;orders&amp;quot;: [{...}, {...}]}&lt;/code&gt;, each object containing the fields used in this endpoint.&lt;/p&gt; 
     * @param orderID Order ID
     * @param clOrdID Client Order ID. See POST /order.
     * @param simpleOrderQty Optional order quantity in units of the underlying instrument (i.e. Bitcoin).
     * @param orderQty Optional order quantity in units of the instrument (i.e. contracts).
     * @param simpleLeavesQty Optional leaves quantity in units of the underlying instrument (i.e. Bitcoin). Useful for amending partially filled orders.
     * @param leavesQty Optional leaves quantity in units of the instrument (i.e. contracts). Useful for amending partially filled orders.
     * @param price Optional limit price for &#39;Limit&#39;, &#39;StopLimit&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param stopPx Optional trigger price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders. Use a price below the current price for stop-sell orders and buy-if-touched orders.
     * @param pegOffsetValue Optional trailing offset from the current price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for &#39;Pegged&#39; orders.
     * @param text Optional amend annotation. e.g. &#39;Adjust skew&#39;.
     */
    orderAmend(params: {  orderID?: string; clOrdID?: string; simpleOrderQty?: number; orderQty?: number; simpleLeavesQty?: number; leavesQty?: number; price?: number; stopPx?: number; pegOffsetValue?: number; text?: string; }) {
        return OrderApiFp.orderAmend(params)(this.fetch, this.basePath);
    }
    /** 
     * Amend multiple orders.
     * Similar to POST /amend, but with multiple orders. &#x60;application/json&#x60; only. Ratelimited at 50%.
     * @param orders An array of orders.
     */
    orderAmendBulk(params: {  orders?: string; }) {
        return OrderApiFp.orderAmendBulk(params)(this.fetch, this.basePath);
    }
    /** 
     * Cancel order(s). Send multiple order IDs to cancel in bulk.
     * Either an orderID or a clOrdID must be provided.
     * @param orderID Order ID(s).
     * @param clOrdID Client Order ID(s). See POST /order.
     * @param text Optional cancellation annotation. e.g. &#39;Spread Exceeded&#39;.
     */
    orderCancel(params: {  orderID?: string; clOrdID?: string; text?: string; }) {
        return OrderApiFp.orderCancel(params)(this.fetch, this.basePath);
    }
    /** 
     * Cancels all of your orders.
     * @param symbol Optional symbol. If provided, only cancels orders for that symbol.
     * @param filter Optional filter for cancellation. Use to only cancel some orders, e.g. &#x60;{\&quot;side\&quot;: \&quot;Buy\&quot;}&#x60;.
     * @param text Optional cancellation annotation. e.g. &#39;Spread Exceeded&#39;
     */
    orderCancelAll(params: {  symbol?: string; filter?: string; text?: string; }) {
        return OrderApiFp.orderCancelAll(params)(this.fetch, this.basePath);
    }
    /** 
     * Automatically cancel all your orders after a specified timeout.
     * Useful as a dead-man&#39;s switch to ensure your orders are canceled in case of an outage. If called repeatedly, the existing offset will be canceled and a new one will be inserted in its place.  Example usage: call this route at 15s intervals with an offset of 60000 (60s). If this route is not called within 60 seconds, all your orders will be automatically canceled.  This is also available via [WebSocket](https://www.bitmex.com/app/wsAPI#dead-man-s-switch-auto-cancel-). 
     * @param timeout Timeout in ms. Set to 0 to cancel this timer. 
     */
    orderCancelAllAfter(params: {  timeout: number; }) {
        return OrderApiFp.orderCancelAllAfter(params)(this.fetch, this.basePath);
    }
    /** 
     * Close a position. [Deprecated, use POST /order with execInst: &#39;Close&#39;]
     * If no &#x60;price&#x60; is specified, a market order will be submitted to close the whole of your position. + This will also close all other open orders in this symbol.
     * @param symbol Symbol of position to close.
     * @param price Optional limit price.
     */
    orderClosePosition(params: {  symbol: string; price?: number; }) {
        return OrderApiFp.orderClosePosition(params)(this.fetch, this.basePath);
    }
    /** 
     * Get your orders.
     * To get open orders only, send {\&quot;open\&quot;: true} in the filter param.  See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    orderGetOrders(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return OrderApiFp.orderGetOrders(params)(this.fetch, this.basePath);
    }
    /** 
     * Create a new order.
     * This endpoint is used for placing orders. Valid order types are Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, and Pegged.  If no order type is provided, BitMEX will assume &#39;Limit&#39;. Be very careful with &#39;Market&#39; and &#39;Stop&#39; orders as you may be filled at an unfavourable price.  You can submit bulk orders by POSTing an array of orders to &#x60;/api/v1/order/bulk&#x60;. Send a JSON payload with the shape: &#x60;{\&quot;orders\&quot;: [{...}, {...}]}&#x60;, with each inner object containing the same fields that would be sent to this endpoint.  A note on API tools: if you want to keep track of order IDs yourself, set a unique clOrdID per order. This clOrdID will come back as a property on the order and any related executions (including on the WebSocket), and can be used to get or cancel the order. Max length is 36 characters.  To generate a clOrdID, consider setting a prefix, and incrementing a counter or generating a UUID. Some UUIDs are longer than 36 characters, so use a url-safe base64 encoding. For example, the prefix &#x60;&#39;bmex_mm_&#39;&#x60; and the UUID &#x60;&#39;7fbd6545-bb0c-11e4-a273-6003088a7c04&#39;&#x60; creates &#x60;&#39;bmex_mm_f71lRbsMEeSic2ADCIp8BA&#39;&#x60;.  See the [BitMEX Reference Market Maker](https://github.com/BitMEX/market-maker/blob/22c75a2b6db63e20212813e9afdb845db1b09b2a/bitmex.py#L152) for an example of how to use and generate clOrdIDs. 
     * @param symbol Instrument symbol. e.g. &#39;XBT24H&#39;.
     * @param side Order side. Valid options: Buy, Sell. Defaults to &#39;Buy&#39; unless &#x60;orderQty&#x60; or &#x60;simpleOrderQty&#x60; is negative.
     * @param simpleOrderQty Order quantity in units of the underlying instrument (i.e. Bitcoin).
     * @param quantity Deprecated: use &#x60;orderQty&#x60;.
     * @param orderQty Order quantity in units of the instrument (i.e. contracts).
     * @param price Optional limit price for &#39;Limit&#39;, &#39;StopLimit&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param displayQty Optional quantity to display in the book. Use 0 for a hidden order.
     * @param stopPrice Deprecated: use &#x60;stopPx&#x60;.
     * @param stopPx Optional trigger price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders. Use a price below the current price for stop-sell orders and buy-if-touched orders. Use &#x60;execInst&#x60; of &#39;MarkPrice&#39; or &#39;LastPrice&#39; to define the current price used for triggering.
     * @param clOrdID Optional Client Order ID. This clOrdID will come back on the order and any related executions.
     * @param clOrdLinkID Optional Client Order Link ID for contingent orders.
     * @param pegOffsetValue Optional trailing offset from the current price for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders; use a negative offset for stop-sell orders and buy-if-touched orders. Optional offset from the peg price for &#39;Pegged&#39; orders.
     * @param pegPriceType Optional peg price type. Valid options: LastPeg, MidPricePeg, MarketPeg, PrimaryPeg, TrailingStopPeg, TrailingStopPeg.
     * @param type Deprecated: use &#x60;ordType&#x60;.
     * @param ordType Order type. Valid options: Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, Pegged. Defaults to &#39;Limit&#39; when &#x60;price&#x60; is specified. Defaults to &#39;Stop&#39; when &#x60;stopPx&#x60; is specified. Defaults to &#39;StopLimit&#39; when &#x60;price&#x60; and &#x60;stopPx&#x60; are specified.
     * @param timeInForce Time in force. Valid options: Day, GoodTillCancel, ImmediateOrCancel, FillOrKill. Defaults to &#39;GoodTillCancel&#39; for &#39;Limit&#39;, &#39;StopLimit&#39;, &#39;LimitIfTouched&#39;, and &#39;MarketWithLeftOverAsLimit&#39; orders.
     * @param execInst Optional execution instructions. Valid options: ParticipateDoNotInitiate, AllOrNone, MarkPrice, LastPrice, Close, ReduceOnly. &#39;AllOrNone&#39; instruction requires &#x60;displayQty&#x60; to be 0. &#39;MarkPrice&#39; or &#39;LastPrice&#39; instruction valid for &#39;Stop&#39;, &#39;StopLimit&#39;, &#39;MarketIfTouched&#39;, and &#39;LimitIfTouched&#39; orders.
     * @param contingencyType Optional contingency type for use with &#x60;clOrdLinkID&#x60;. Valid options: OneCancelsTheOther, OneTriggersTheOther, OneUpdatesTheOtherAbsolute, OneUpdatesTheOtherProportional.
     * @param text Optional order annotation. e.g. &#39;Take profit&#39;.
     */
    orderNew(params: {  symbol: string; side?: string; simpleOrderQty?: number; quantity?: number; orderQty?: number; price?: number; displayQty?: number; stopPrice?: number; stopPx?: number; clOrdID?: string; clOrdLinkID?: string; pegOffsetValue?: number; pegPriceType?: string; type?: string; ordType?: string; timeInForce?: string; execInst?: string; contingencyType?: string; text?: string; }) {
        return OrderApiFp.orderNew(params)(this.fetch, this.basePath);
    }
    /** 
     * Create multiple new orders.
     * This endpoint is used for placing bulk orders. Valid order types are Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, and Pegged.  Each individual order object in the array should have the same properties as an individual POST /order call.  This endpoint is much faster for getting many orders into the book at once. Because it reduces load on BitMEX systems, this endpoint is ratelimited at &#x60;ceil(0.5 * orders)&#x60;. Submitting 10 orders via a bulk order call will only count as 5 requests.  For now, only &#x60;application/json&#x60; is supported on this endpoint. 
     * @param orders An array of orders.
     */
    orderNewBulk(params: {  orders?: string; }) {
        return OrderApiFp.orderNewBulk(params)(this.fetch, this.basePath);
    }
}


/**
 * OrderBookApi - fetch parameter creator
 */
export const OrderBookApiFetchParamCreactor = {
    /** 
     * Get current orderbook [deprecated, use /orderBook/L2].
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
     * @param depth Orderbook depth.
     */
    orderBookGet(params: {  symbol: string; depth?: number; }): FetchArgs {
        // verify required parameter "symbol" is set
        if (params["symbol"] == null) {
            throw new Error("Missing required parameter symbol when calling orderBookGet");
        }
        const baseUrl = `/orderBook`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "depth": params.depth,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get current orderbook in vertical format.
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
     * @param depth Orderbook depth per side. Send 0 for full depth.
     */
    orderBookGetL2(params: {  symbol: string; depth?: number; }): FetchArgs {
        // verify required parameter "symbol" is set
        if (params["symbol"] == null) {
            throw new Error("Missing required parameter symbol when calling orderBookGetL2");
        }
        const baseUrl = `/orderBook/L2`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "depth": params.depth,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * OrderBookApi - functional programming interface
 */
export const OrderBookApiFp = {
    /** 
     * Get current orderbook [deprecated, use /orderBook/L2].
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
     * @param depth Orderbook depth.
     */
    orderBookGet(params: { symbol: string; depth?: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<OrderBook>> {
        const fetchArgs = OrderBookApiFetchParamCreactor.orderBookGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get current orderbook in vertical format.
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
     * @param depth Orderbook depth per side. Send 0 for full depth.
     */
    orderBookGetL2(params: { symbol: string; depth?: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<OrderBookL2>> {
        const fetchArgs = OrderBookApiFetchParamCreactor.orderBookGetL2(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * OrderBookApi - object-oriented interface
 */
export class OrderBookApi extends BaseAPI {
    /** 
     * Get current orderbook [deprecated, use /orderBook/L2].
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
     * @param depth Orderbook depth.
     */
    orderBookGet(params: {  symbol: string; depth?: number; }) {
        return OrderBookApiFp.orderBookGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Get current orderbook in vertical format.
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
     * @param depth Orderbook depth per side. Send 0 for full depth.
     */
    orderBookGetL2(params: {  symbol: string; depth?: number; }) {
        return OrderBookApiFp.orderBookGetL2(params)(this.fetch, this.basePath);
    }
}


/**
 * PositionApi - fetch parameter creator
 */
export const PositionApiFetchParamCreactor = {
    /** 
     * Get your positions.
     * See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
     * @param filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}.
     * @param columns Which columns to fetch. For example, send [\&quot;columnName\&quot;].
     * @param count Number of rows to fetch.
     */
    positionGet(params: {  filter?: string; columns?: string; count?: number; }): FetchArgs {
        const baseUrl = `/position`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Enable isolated margin or cross margin per-position.
     * On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
     * @param symbol Position symbol to isolate.
     * @param enabled True for isolated margin, false for cross margin.
     */
    positionIsolateMargin(params: {  symbol: string; enabled?: boolean; }): FetchArgs {
        // verify required parameter "symbol" is set
        if (params["symbol"] == null) {
            throw new Error("Missing required parameter symbol when calling positionIsolateMargin");
        }
        const baseUrl = `/position/isolate`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "symbol": params.symbol,
            "enabled": params.enabled,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Transfer equity in or out of a position.
     * When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
     * @param symbol Symbol of position to isolate.
     * @param amount Amount to transfer, in Satoshis. May be negative.
     */
    positionTransferIsolatedMargin(params: {  symbol: string; amount: number; }): FetchArgs {
        // verify required parameter "symbol" is set
        if (params["symbol"] == null) {
            throw new Error("Missing required parameter symbol when calling positionTransferIsolatedMargin");
        }
        // verify required parameter "amount" is set
        if (params["amount"] == null) {
            throw new Error("Missing required parameter amount when calling positionTransferIsolatedMargin");
        }
        const baseUrl = `/position/transferMargin`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "symbol": params.symbol,
            "amount": params.amount,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Choose leverage for a position.
     * On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
     * @param symbol Symbol of position to adjust.
     * @param leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.
     */
    positionUpdateLeverage(params: {  symbol: string; leverage: number; }): FetchArgs {
        // verify required parameter "symbol" is set
        if (params["symbol"] == null) {
            throw new Error("Missing required parameter symbol when calling positionUpdateLeverage");
        }
        // verify required parameter "leverage" is set
        if (params["leverage"] == null) {
            throw new Error("Missing required parameter leverage when calling positionUpdateLeverage");
        }
        const baseUrl = `/position/leverage`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "symbol": params.symbol,
            "leverage": params.leverage,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * PositionApi - functional programming interface
 */
export const PositionApiFp = {
    /** 
     * Get your positions.
     * See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
     * @param filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}.
     * @param columns Which columns to fetch. For example, send [\&quot;columnName\&quot;].
     * @param count Number of rows to fetch.
     */
    positionGet(params: { filter?: string; columns?: string; count?: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Position>> {
        const fetchArgs = PositionApiFetchParamCreactor.positionGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Enable isolated margin or cross margin per-position.
     * On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
     * @param symbol Position symbol to isolate.
     * @param enabled True for isolated margin, false for cross margin.
     */
    positionIsolateMargin(params: { symbol: string; enabled?: boolean;  }): (fetch: FetchAPI, basePath?: string) => Promise<Position> {
        const fetchArgs = PositionApiFetchParamCreactor.positionIsolateMargin(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Transfer equity in or out of a position.
     * When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
     * @param symbol Symbol of position to isolate.
     * @param amount Amount to transfer, in Satoshis. May be negative.
     */
    positionTransferIsolatedMargin(params: { symbol: string; amount: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<Position> {
        const fetchArgs = PositionApiFetchParamCreactor.positionTransferIsolatedMargin(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Choose leverage for a position.
     * On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
     * @param symbol Symbol of position to adjust.
     * @param leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.
     */
    positionUpdateLeverage(params: { symbol: string; leverage: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<Position> {
        const fetchArgs = PositionApiFetchParamCreactor.positionUpdateLeverage(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * PositionApi - object-oriented interface
 */
export class PositionApi extends BaseAPI {
    /** 
     * Get your positions.
     * See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
     * @param filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}.
     * @param columns Which columns to fetch. For example, send [\&quot;columnName\&quot;].
     * @param count Number of rows to fetch.
     */
    positionGet(params: {  filter?: string; columns?: string; count?: number; }) {
        return PositionApiFp.positionGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Enable isolated margin or cross margin per-position.
     * On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
     * @param symbol Position symbol to isolate.
     * @param enabled True for isolated margin, false for cross margin.
     */
    positionIsolateMargin(params: {  symbol: string; enabled?: boolean; }) {
        return PositionApiFp.positionIsolateMargin(params)(this.fetch, this.basePath);
    }
    /** 
     * Transfer equity in or out of a position.
     * When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
     * @param symbol Symbol of position to isolate.
     * @param amount Amount to transfer, in Satoshis. May be negative.
     */
    positionTransferIsolatedMargin(params: {  symbol: string; amount: number; }) {
        return PositionApiFp.positionTransferIsolatedMargin(params)(this.fetch, this.basePath);
    }
    /** 
     * Choose leverage for a position.
     * On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
     * @param symbol Symbol of position to adjust.
     * @param leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.
     */
    positionUpdateLeverage(params: {  symbol: string; leverage: number; }) {
        return PositionApiFp.positionUpdateLeverage(params)(this.fetch, this.basePath);
    }
}


/**
 * QuoteApi - fetch parameter creator
 */
export const QuoteApiFetchParamCreactor = {
    /** 
     * Get Quotes.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    quoteGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/quote`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get previous quotes in time buckets.
     * @param binSize Time interval to bucket by. Available options: [&#39;1m&#39;, &#39;5m&#39;, &#39;1h&#39;, &#39;1d&#39;].
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    quoteGetBucketed(params: {  binSize?: string; symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/quote/bucketed`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "binSize": params.binSize,
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * QuoteApi - functional programming interface
 */
export const QuoteApiFp = {
    /** 
     * Get Quotes.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    quoteGet(params: { symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Quote>> {
        const fetchArgs = QuoteApiFetchParamCreactor.quoteGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get previous quotes in time buckets.
     * @param binSize Time interval to bucket by. Available options: [&#39;1m&#39;, &#39;5m&#39;, &#39;1h&#39;, &#39;1d&#39;].
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    quoteGetBucketed(params: { binSize?: string; symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Quote>> {
        const fetchArgs = QuoteApiFetchParamCreactor.quoteGetBucketed(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * QuoteApi - object-oriented interface
 */
export class QuoteApi extends BaseAPI {
    /** 
     * Get Quotes.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    quoteGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return QuoteApiFp.quoteGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Get previous quotes in time buckets.
     * @param binSize Time interval to bucket by. Available options: [&#39;1m&#39;, &#39;5m&#39;, &#39;1h&#39;, &#39;1d&#39;].
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    quoteGetBucketed(params: {  binSize?: string; symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return QuoteApiFp.quoteGetBucketed(params)(this.fetch, this.basePath);
    }
}


/**
 * SchemaApi - fetch parameter creator
 */
export const SchemaApiFetchParamCreactor = {
    /** 
     * Get model schemata for data objects returned by this API.
     * @param model Optional model filter. If omitted, will return all models.
     */
    schemaGet(params: {  model?: string; }): FetchArgs {
        const baseUrl = `/schema`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "model": params.model,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Returns help text &amp; subject list for websocket usage.
     */
    schemaWebsocketHelp(): FetchArgs {
        const baseUrl = `/schema/websocketHelp`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * SchemaApi - functional programming interface
 */
export const SchemaApiFp = {
    /** 
     * Get model schemata for data objects returned by this API.
     * @param model Optional model filter. If omitted, will return all models.
     */
    schemaGet(params: { model?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = SchemaApiFetchParamCreactor.schemaGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Returns help text &amp; subject list for websocket usage.
     */
    schemaWebsocketHelp(): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = SchemaApiFetchParamCreactor.schemaWebsocketHelp();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * SchemaApi - object-oriented interface
 */
export class SchemaApi extends BaseAPI {
    /** 
     * Get model schemata for data objects returned by this API.
     * @param model Optional model filter. If omitted, will return all models.
     */
    schemaGet(params: {  model?: string; }) {
        return SchemaApiFp.schemaGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Returns help text &amp; subject list for websocket usage.
     */
    schemaWebsocketHelp() {
        return SchemaApiFp.schemaWebsocketHelp()(this.fetch, this.basePath);
    }
}


/**
 * SettlementApi - fetch parameter creator
 */
export const SettlementApiFetchParamCreactor = {
    /** 
     * Get settlement history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    settlementGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/settlement`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * SettlementApi - functional programming interface
 */
export const SettlementApiFp = {
    /** 
     * Get settlement history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    settlementGet(params: { symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Settlement>> {
        const fetchArgs = SettlementApiFetchParamCreactor.settlementGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * SettlementApi - object-oriented interface
 */
export class SettlementApi extends BaseAPI {
    /** 
     * Get settlement history.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    settlementGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return SettlementApiFp.settlementGet(params)(this.fetch, this.basePath);
    }
}


/**
 * StatsApi - fetch parameter creator
 */
export const StatsApiFetchParamCreactor = {
    /** 
     * Get exchange-wide and per-series turnover and volume statistics.
     */
    statsGet(): FetchArgs {
        const baseUrl = `/stats`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get historical exchange-wide and per-series turnover and volume statistics.
     */
    statsHistory(): FetchArgs {
        const baseUrl = `/stats/history`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * StatsApi - functional programming interface
 */
export const StatsApiFp = {
    /** 
     * Get exchange-wide and per-series turnover and volume statistics.
     */
    statsGet(): (fetch: FetchAPI, basePath?: string) => Promise<Array<Stats>> {
        const fetchArgs = StatsApiFetchParamCreactor.statsGet();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get historical exchange-wide and per-series turnover and volume statistics.
     */
    statsHistory(): (fetch: FetchAPI, basePath?: string) => Promise<Array<StatsHistory>> {
        const fetchArgs = StatsApiFetchParamCreactor.statsHistory();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * StatsApi - object-oriented interface
 */
export class StatsApi extends BaseAPI {
    /** 
     * Get exchange-wide and per-series turnover and volume statistics.
     */
    statsGet() {
        return StatsApiFp.statsGet()(this.fetch, this.basePath);
    }
    /** 
     * Get historical exchange-wide and per-series turnover and volume statistics.
     */
    statsHistory() {
        return StatsApiFp.statsHistory()(this.fetch, this.basePath);
    }
}


/**
 * TradeApi - fetch parameter creator
 */
export const TradeApiFetchParamCreactor = {
    /** 
     * Get Trades.
     * Please note that indices (symbols starting with &#x60;.&#x60;) post trades at intervals to the trade feed. These have a &#x60;size&#x60; of 0 and are used only to indicate a changing price.  See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AE_6569.html) for explanations of these fields.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    tradeGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/trade`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get previous trades in time buckets.
     * @param binSize Time interval to bucket by. Available options: [&#39;1m&#39;, &#39;5m&#39;, &#39;1h&#39;, &#39;1d&#39;].
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    tradeGetBucketed(params: {  binSize?: string; symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }): FetchArgs {
        const baseUrl = `/trade/bucketed`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "binSize": params.binSize,
            "symbol": params.symbol,
            "filter": params.filter,
            "columns": params.columns,
            "count": params.count,
            "start": params.start,
            "reverse": params.reverse,
            "startTime": params.startTime,
            "endTime": params.endTime,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * TradeApi - functional programming interface
 */
export const TradeApiFp = {
    /** 
     * Get Trades.
     * Please note that indices (symbols starting with &#x60;.&#x60;) post trades at intervals to the trade feed. These have a &#x60;size&#x60; of 0 and are used only to indicate a changing price.  See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AE_6569.html) for explanations of these fields.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    tradeGet(params: { symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Trade>> {
        const fetchArgs = TradeApiFetchParamCreactor.tradeGet(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get previous trades in time buckets.
     * @param binSize Time interval to bucket by. Available options: [&#39;1m&#39;, &#39;5m&#39;, &#39;1h&#39;, &#39;1d&#39;].
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    tradeGetBucketed(params: { binSize?: string; symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<TradeBin>> {
        const fetchArgs = TradeApiFetchParamCreactor.tradeGetBucketed(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * TradeApi - object-oriented interface
 */
export class TradeApi extends BaseAPI {
    /** 
     * Get Trades.
     * Please note that indices (symbols starting with &#x60;.&#x60;) post trades at intervals to the trade feed. These have a &#x60;size&#x60; of 0 and are used only to indicate a changing price.  See [the FIX Spec](http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AE_6569.html) for explanations of these fields.
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    tradeGet(params: {  symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return TradeApiFp.tradeGet(params)(this.fetch, this.basePath);
    }
    /** 
     * Get previous trades in time buckets.
     * @param binSize Time interval to bucket by. Available options: [&#39;1m&#39;, &#39;5m&#39;, &#39;1h&#39;, &#39;1d&#39;].
     * @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.  You can also send a timeframe, e.g. &#x60;XBU:monthly&#x60;. Timeframes are &#x60;daily&#x60;, &#x60;weekly&#x60;, &#x60;monthly&#x60;, &#x60;quarterly&#x60;, and &#x60;biquarterly&#x60;.
     * @param filter Generic table filter. Send JSON key/value pairs, such as &#x60;{\&quot;key\&quot;: \&quot;value\&quot;}&#x60;. You can key on individual fields, and do more advanced querying on timestamps. See the [Timestamp Docs](https://www.bitmex.com/app/restAPI#timestamp-filters) for more details.
     * @param columns Array of column names to fetch. If omitted, will return all columns.  Note that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
     * @param count Number of results to fetch.
     * @param start Starting point for results.
     * @param reverse If true, will sort results newest first.
     * @param startTime Starting date filter for results.
     * @param endTime Ending date filter for results.
     */
    tradeGetBucketed(params: {  binSize?: string; symbol?: string; filter?: string; columns?: string; count?: number; start?: number; reverse?: boolean; startTime?: Date; endTime?: Date; }) {
        return TradeApiFp.tradeGetBucketed(params)(this.fetch, this.basePath);
    }
}


/**
 * UserApi - fetch parameter creator
 */
export const UserApiFetchParamCreactor = {
    /** 
     * Cancel a withdrawal.
     * @param token 
     */
    userCancelWithdrawal(params: {  token: string; }): FetchArgs {
        // verify required parameter "token" is set
        if (params["token"] == null) {
            throw new Error("Missing required parameter token when calling userCancelWithdrawal");
        }
        const baseUrl = `/user/cancelWithdrawal`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "token": params.token,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Check if a referral code is valid.
     * If the code is valid, responds with the referral code&#39;s discount (e.g. &#x60;0.1&#x60; for 10%). Otherwise, will return a 404.
     * @param referralCode 
     */
    userCheckReferralCode(params: {  referralCode?: string; }): FetchArgs {
        const baseUrl = `/user/checkReferralCode`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "referralCode": params.referralCode,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Confirm your email address with a token.
     * @param token 
     */
    userConfirmEmail(params: {  token: string; }): FetchArgs {
        // verify required parameter "token" is set
        if (params["token"] == null) {
            throw new Error("Missing required parameter token when calling userConfirmEmail");
        }
        const baseUrl = `/user/confirmEmail`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "token": params.token,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
     * @param token Token from your selected TFA type.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39;
     */
    userConfirmEnableTFA(params: {  token: string; type?: string; }): FetchArgs {
        // verify required parameter "token" is set
        if (params["token"] == null) {
            throw new Error("Missing required parameter token when calling userConfirmEnableTFA");
        }
        const baseUrl = `/user/confirmEnableTFA`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "type": params.type,
            "token": params.token,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Confirm a password reset.
     * @param token 
     * @param newPassword 
     */
    userConfirmPasswordReset(params: {  token: string; newPassword: string; }): FetchArgs {
        // verify required parameter "token" is set
        if (params["token"] == null) {
            throw new Error("Missing required parameter token when calling userConfirmPasswordReset");
        }
        // verify required parameter "newPassword" is set
        if (params["newPassword"] == null) {
            throw new Error("Missing required parameter newPassword when calling userConfirmPasswordReset");
        }
        const baseUrl = `/user/confirmPasswordReset`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "token": params.token,
            "newPassword": params.newPassword,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Confirm a withdrawal.
     * @param token 
     */
    userConfirmWithdrawal(params: {  token: string; }): FetchArgs {
        // verify required parameter "token" is set
        if (params["token"] == null) {
            throw new Error("Missing required parameter token when calling userConfirmWithdrawal");
        }
        const baseUrl = `/user/confirmWithdrawal`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "token": params.token,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Disable two-factor auth for this account.
     * @param token Token from your selected TFA type.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
     */
    userDisableTFA(params: {  token: string; type?: string; }): FetchArgs {
        // verify required parameter "token" is set
        if (params["token"] == null) {
            throw new Error("Missing required parameter token when calling userDisableTFA");
        }
        const baseUrl = `/user/disableTFA`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "type": params.type,
            "token": params.token,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get your user model.
     */
    userGet(): FetchArgs {
        const baseUrl = `/user`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get your current affiliate/referral status.
     */
    userGetAffiliateStatus(): FetchArgs {
        const baseUrl = `/user/affiliateStatus`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get your account&#39;s commission status.
     */
    userGetCommission(): FetchArgs {
        const baseUrl = `/user/commission`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a deposit address.
     * @param currency 
     */
    userGetDepositAddress(params: {  currency?: string; }): FetchArgs {
        const baseUrl = `/user/depositAddress`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "currency": params.currency,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get your account&#39;s margin status. Send a currency of \&quot;all\&quot; to receive an array of all supported currencies.
     * @param currency 
     */
    userGetMargin(params: {  currency?: string; }): FetchArgs {
        const baseUrl = `/user/margin`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "currency": params.currency,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get a history of all of your wallet transactions (deposits and withdrawals).
     * @param currency 
     */
    userGetWalletHistory(params: {  currency?: string; }): FetchArgs {
        const baseUrl = `/user/walletHistory`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, { 
            "currency": params.currency,
        });
        let fetchOptions: RequestInit = { method: "GET" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Log in to BitMEX.
     * @param email Your email address.
     * @param password Your password.
     * @param token OTP Token (YubiKey, Google Authenticator)
     */
    userLogin(params: {  email: string; password: string; token?: string; }): FetchArgs {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling userLogin");
        }
        // verify required parameter "password" is set
        if (params["password"] == null) {
            throw new Error("Missing required parameter password when calling userLogin");
        }
        const baseUrl = `/user/login`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "email": params.email,
            "password": params.password,
            "token": params.token,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Log out of BitMEX.
     */
    userLogout(): FetchArgs {
        const baseUrl = `/user/logout`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Log all systems out of BitMEX. This will revoke all of your account&#39;s access tokens, logging you out on all devices.
     */
    userLogoutAll(): FetchArgs {
        const baseUrl = `/user/logoutAll`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Register a new user.
     * @param email Your email address.
     * @param password Your password.
     * @param country Country of residence.
     * @param username Desired username.
     * @param firstname First name.
     * @param lastname Last name.
     * @param acceptsTOS Set to true to indicate acceptance of the Terms of Service (https://www.bitmex.com/terms).
     * @param referrerID Optional Referrer ID.
     * @param tfaType Optional Two-Factor Type. Accepted values: GA, Yubikey, Clef
     * @param tfaToken Two-Factor Token.
     */
    userNew(params: {  email: string; password: string; country: string; username?: string; firstname?: string; lastname?: string; acceptsTOS?: string; referrerID?: string; tfaType?: string; tfaToken?: string; }): FetchArgs {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling userNew");
        }
        // verify required parameter "password" is set
        if (params["password"] == null) {
            throw new Error("Missing required parameter password when calling userNew");
        }
        // verify required parameter "country" is set
        if (params["country"] == null) {
            throw new Error("Missing required parameter country when calling userNew");
        }
        const baseUrl = `/user`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "email": params.email,
            "password": params.password,
            "username": params.username,
            "firstname": params.firstname,
            "lastname": params.lastname,
            "acceptsTOS": params.acceptsTOS,
            "referrerID": params.referrerID,
            "country": params.country,
            "tfaType": params.tfaType,
            "tfaToken": params.tfaToken,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Get Google Authenticator secret key for setting up two-factor auth. Fails if already enabled. Use /confirmEnableTFA for Yubikeys.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
     */
    userRequestEnableTFA(params: {  type?: string; }): FetchArgs {
        const baseUrl = `/user/requestEnableTFA`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "type": params.type,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Request a password reset.
     * @param email 
     */
    userRequestPasswordReset(params: {  email: string; }): FetchArgs {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling userRequestPasswordReset");
        }
        const baseUrl = `/user/requestPasswordReset`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "email": params.email,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Request a withdrawal to an external wallet.
     * This will send a confirmation email to the email address on record, unless requested via an API Key with the &#x60;withdraw&#x60; permission.
     * @param currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;
     * @param amount Amount of withdrawal currency.
     * @param address Destination Address.
     * @param otpToken 2FA token. Required if 2FA is enabled on your account.
     * @param fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
     */
    userRequestWithdrawal(params: {  currency: string; amount: number; address: string; otpToken?: string; fee?: number; }): FetchArgs {
        // verify required parameter "currency" is set
        if (params["currency"] == null) {
            throw new Error("Missing required parameter currency when calling userRequestWithdrawal");
        }
        // verify required parameter "amount" is set
        if (params["amount"] == null) {
            throw new Error("Missing required parameter amount when calling userRequestWithdrawal");
        }
        // verify required parameter "address" is set
        if (params["address"] == null) {
            throw new Error("Missing required parameter address when calling userRequestWithdrawal");
        }
        const baseUrl = `/user/requestWithdrawal`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "otpToken": params.otpToken,
            "currency": params.currency,
            "amount": params.amount,
            "address": params.address,
            "fee": params.fee,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Save user preferences.
     * @param prefs 
     * @param overwrite If true, will overwrite all existing preferences.
     */
    userSavePreferences(params: {  prefs: string; overwrite?: boolean; }): FetchArgs {
        // verify required parameter "prefs" is set
        if (params["prefs"] == null) {
            throw new Error("Missing required parameter prefs when calling userSavePreferences");
        }
        const baseUrl = `/user/preferences`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "prefs": params.prefs,
            "overwrite": params.overwrite,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Re-send verification email.
     * @param email 
     */
    userSendVerificationEmail(params: {  email: string; }): FetchArgs {
        // verify required parameter "email" is set
        if (params["email"] == null) {
            throw new Error("Missing required parameter email when calling userSendVerificationEmail");
        }
        const baseUrl = `/user/resendVerificationEmail`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "POST" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "email": params.email,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /** 
     * Update your password, name, and other attributes.
     * @param firstname 
     * @param lastname 
     * @param oldPassword 
     * @param newPassword 
     * @param newPasswordConfirm 
     * @param username Username can only be set once. To reset, email support.
     * @param country Country of residence.
     * @param pgpPubKey PGP Public Key. If specified, automated emails will be sentwith this key.
     */
    userUpdate(params: {  firstname?: string; lastname?: string; oldPassword?: string; newPassword?: string; newPasswordConfirm?: string; username?: string; country?: string; pgpPubKey?: string; }): FetchArgs {
        const baseUrl = `/user`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = { method: "PUT" };

        let contentTypeHeader: Dictionary<string>;
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({ 
            "firstname": params.firstname,
            "lastname": params.lastname,
            "oldPassword": params.oldPassword,
            "newPassword": params.newPassword,
            "newPasswordConfirm": params.newPasswordConfirm,
            "username": params.username,
            "country": params.country,
            "pgpPubKey": params.pgpPubKey,
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
}

/**
 * UserApi - functional programming interface
 */
export const UserApiFp = {
    /** 
     * Cancel a withdrawal.
     * @param token 
     */
    userCancelWithdrawal(params: { token: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Transaction> {
        const fetchArgs = UserApiFetchParamCreactor.userCancelWithdrawal(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Check if a referral code is valid.
     * If the code is valid, responds with the referral code&#39;s discount (e.g. &#x60;0.1&#x60; for 10%). Otherwise, will return a 404.
     * @param referralCode 
     */
    userCheckReferralCode(params: { referralCode?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<number> {
        const fetchArgs = UserApiFetchParamCreactor.userCheckReferralCode(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Confirm your email address with a token.
     * @param token 
     */
    userConfirmEmail(params: { token: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<AccessToken> {
        const fetchArgs = UserApiFetchParamCreactor.userConfirmEmail(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
     * @param token Token from your selected TFA type.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39;
     */
    userConfirmEnableTFA(params: { token: string; type?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = UserApiFetchParamCreactor.userConfirmEnableTFA(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Confirm a password reset.
     * @param token 
     * @param newPassword 
     */
    userConfirmPasswordReset(params: { token: string; newPassword: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = UserApiFetchParamCreactor.userConfirmPasswordReset(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Confirm a withdrawal.
     * @param token 
     */
    userConfirmWithdrawal(params: { token: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Transaction> {
        const fetchArgs = UserApiFetchParamCreactor.userConfirmWithdrawal(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Disable two-factor auth for this account.
     * @param token Token from your selected TFA type.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
     */
    userDisableTFA(params: { token: string; type?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = UserApiFetchParamCreactor.userDisableTFA(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get your user model.
     */
    userGet(): (fetch: FetchAPI, basePath?: string) => Promise<User> {
        const fetchArgs = UserApiFetchParamCreactor.userGet();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get your current affiliate/referral status.
     */
    userGetAffiliateStatus(): (fetch: FetchAPI, basePath?: string) => Promise<Array<Affiliate>> {
        const fetchArgs = UserApiFetchParamCreactor.userGetAffiliateStatus();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get your account&#39;s commission status.
     */
    userGetCommission(): (fetch: FetchAPI, basePath?: string) => Promise<Array<UserCommission>> {
        const fetchArgs = UserApiFetchParamCreactor.userGetCommission();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a deposit address.
     * @param currency 
     */
    userGetDepositAddress(params: { currency?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<string> {
        const fetchArgs = UserApiFetchParamCreactor.userGetDepositAddress(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get your account&#39;s margin status. Send a currency of \&quot;all\&quot; to receive an array of all supported currencies.
     * @param currency 
     */
    userGetMargin(params: { currency?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Margin> {
        const fetchArgs = UserApiFetchParamCreactor.userGetMargin(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get a history of all of your wallet transactions (deposits and withdrawals).
     * @param currency 
     */
    userGetWalletHistory(params: { currency?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<Array<Transaction>> {
        const fetchArgs = UserApiFetchParamCreactor.userGetWalletHistory(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Log in to BitMEX.
     * @param email Your email address.
     * @param password Your password.
     * @param token OTP Token (YubiKey, Google Authenticator)
     */
    userLogin(params: { email: string; password: string; token?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<AccessToken> {
        const fetchArgs = UserApiFetchParamCreactor.userLogin(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Log out of BitMEX.
     */
    userLogout(): (fetch: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = UserApiFetchParamCreactor.userLogout();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Log all systems out of BitMEX. This will revoke all of your account&#39;s access tokens, logging you out on all devices.
     */
    userLogoutAll(): (fetch: FetchAPI, basePath?: string) => Promise<number> {
        const fetchArgs = UserApiFetchParamCreactor.userLogoutAll();
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Register a new user.
     * @param email Your email address.
     * @param password Your password.
     * @param country Country of residence.
     * @param username Desired username.
     * @param firstname First name.
     * @param lastname Last name.
     * @param acceptsTOS Set to true to indicate acceptance of the Terms of Service (https://www.bitmex.com/terms).
     * @param referrerID Optional Referrer ID.
     * @param tfaType Optional Two-Factor Type. Accepted values: GA, Yubikey, Clef
     * @param tfaToken Two-Factor Token.
     */
    userNew(params: { email: string; password: string; country: string; username?: string; firstname?: string; lastname?: string; acceptsTOS?: string; referrerID?: string; tfaType?: string; tfaToken?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<User> {
        const fetchArgs = UserApiFetchParamCreactor.userNew(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Get Google Authenticator secret key for setting up two-factor auth. Fails if already enabled. Use /confirmEnableTFA for Yubikeys.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
     */
    userRequestEnableTFA(params: { type?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = UserApiFetchParamCreactor.userRequestEnableTFA(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Request a password reset.
     * @param email 
     */
    userRequestPasswordReset(params: { email: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = UserApiFetchParamCreactor.userRequestPasswordReset(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Request a withdrawal to an external wallet.
     * This will send a confirmation email to the email address on record, unless requested via an API Key with the &#x60;withdraw&#x60; permission.
     * @param currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;
     * @param amount Amount of withdrawal currency.
     * @param address Destination Address.
     * @param otpToken 2FA token. Required if 2FA is enabled on your account.
     * @param fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
     */
    userRequestWithdrawal(params: { currency: string; amount: number; address: string; otpToken?: string; fee?: number;  }): (fetch: FetchAPI, basePath?: string) => Promise<Transaction> {
        const fetchArgs = UserApiFetchParamCreactor.userRequestWithdrawal(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Save user preferences.
     * @param prefs 
     * @param overwrite If true, will overwrite all existing preferences.
     */
    userSavePreferences(params: { prefs: string; overwrite?: boolean;  }): (fetch: FetchAPI, basePath?: string) => Promise<User> {
        const fetchArgs = UserApiFetchParamCreactor.userSavePreferences(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Re-send verification email.
     * @param email 
     */
    userSendVerificationEmail(params: { email: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = UserApiFetchParamCreactor.userSendVerificationEmail(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /** 
     * Update your password, name, and other attributes.
     * @param firstname 
     * @param lastname 
     * @param oldPassword 
     * @param newPassword 
     * @param newPasswordConfirm 
     * @param username Username can only be set once. To reset, email support.
     * @param country Country of residence.
     * @param pgpPubKey PGP Public Key. If specified, automated emails will be sentwith this key.
     */
    userUpdate(params: { firstname?: string; lastname?: string; oldPassword?: string; newPassword?: string; newPasswordConfirm?: string; username?: string; country?: string; pgpPubKey?: string;  }): (fetch: FetchAPI, basePath?: string) => Promise<User> {
        const fetchArgs = UserApiFetchParamCreactor.userUpdate(params);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * UserApi - object-oriented interface
 */
export class UserApi extends BaseAPI {
    /** 
     * Cancel a withdrawal.
     * @param token 
     */
    userCancelWithdrawal(params: {  token: string; }) {
        return UserApiFp.userCancelWithdrawal(params)(this.fetch, this.basePath);
    }
    /** 
     * Check if a referral code is valid.
     * If the code is valid, responds with the referral code&#39;s discount (e.g. &#x60;0.1&#x60; for 10%). Otherwise, will return a 404.
     * @param referralCode 
     */
    userCheckReferralCode(params: {  referralCode?: string; }) {
        return UserApiFp.userCheckReferralCode(params)(this.fetch, this.basePath);
    }
    /** 
     * Confirm your email address with a token.
     * @param token 
     */
    userConfirmEmail(params: {  token: string; }) {
        return UserApiFp.userConfirmEmail(params)(this.fetch, this.basePath);
    }
    /** 
     * Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
     * @param token Token from your selected TFA type.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39;
     */
    userConfirmEnableTFA(params: {  token: string; type?: string; }) {
        return UserApiFp.userConfirmEnableTFA(params)(this.fetch, this.basePath);
    }
    /** 
     * Confirm a password reset.
     * @param token 
     * @param newPassword 
     */
    userConfirmPasswordReset(params: {  token: string; newPassword: string; }) {
        return UserApiFp.userConfirmPasswordReset(params)(this.fetch, this.basePath);
    }
    /** 
     * Confirm a withdrawal.
     * @param token 
     */
    userConfirmWithdrawal(params: {  token: string; }) {
        return UserApiFp.userConfirmWithdrawal(params)(this.fetch, this.basePath);
    }
    /** 
     * Disable two-factor auth for this account.
     * @param token Token from your selected TFA type.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
     */
    userDisableTFA(params: {  token: string; type?: string; }) {
        return UserApiFp.userDisableTFA(params)(this.fetch, this.basePath);
    }
    /** 
     * Get your user model.
     */
    userGet() {
        return UserApiFp.userGet()(this.fetch, this.basePath);
    }
    /** 
     * Get your current affiliate/referral status.
     */
    userGetAffiliateStatus() {
        return UserApiFp.userGetAffiliateStatus()(this.fetch, this.basePath);
    }
    /** 
     * Get your account&#39;s commission status.
     */
    userGetCommission() {
        return UserApiFp.userGetCommission()(this.fetch, this.basePath);
    }
    /** 
     * Get a deposit address.
     * @param currency 
     */
    userGetDepositAddress(params: {  currency?: string; }) {
        return UserApiFp.userGetDepositAddress(params)(this.fetch, this.basePath);
    }
    /** 
     * Get your account&#39;s margin status. Send a currency of \&quot;all\&quot; to receive an array of all supported currencies.
     * @param currency 
     */
    userGetMargin(params: {  currency?: string; }) {
        return UserApiFp.userGetMargin(params)(this.fetch, this.basePath);
    }
    /** 
     * Get a history of all of your wallet transactions (deposits and withdrawals).
     * @param currency 
     */
    userGetWalletHistory(params: {  currency?: string; }) {
        return UserApiFp.userGetWalletHistory(params)(this.fetch, this.basePath);
    }
    /** 
     * Log in to BitMEX.
     * @param email Your email address.
     * @param password Your password.
     * @param token OTP Token (YubiKey, Google Authenticator)
     */
    userLogin(params: {  email: string; password: string; token?: string; }) {
        return UserApiFp.userLogin(params)(this.fetch, this.basePath);
    }
    /** 
     * Log out of BitMEX.
     */
    userLogout() {
        return UserApiFp.userLogout()(this.fetch, this.basePath);
    }
    /** 
     * Log all systems out of BitMEX. This will revoke all of your account&#39;s access tokens, logging you out on all devices.
     */
    userLogoutAll() {
        return UserApiFp.userLogoutAll()(this.fetch, this.basePath);
    }
    /** 
     * Register a new user.
     * @param email Your email address.
     * @param password Your password.
     * @param country Country of residence.
     * @param username Desired username.
     * @param firstname First name.
     * @param lastname Last name.
     * @param acceptsTOS Set to true to indicate acceptance of the Terms of Service (https://www.bitmex.com/terms).
     * @param referrerID Optional Referrer ID.
     * @param tfaType Optional Two-Factor Type. Accepted values: GA, Yubikey, Clef
     * @param tfaToken Two-Factor Token.
     */
    userNew(params: {  email: string; password: string; country: string; username?: string; firstname?: string; lastname?: string; acceptsTOS?: string; referrerID?: string; tfaType?: string; tfaToken?: string; }) {
        return UserApiFp.userNew(params)(this.fetch, this.basePath);
    }
    /** 
     * Get Google Authenticator secret key for setting up two-factor auth. Fails if already enabled. Use /confirmEnableTFA for Yubikeys.
     * @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
     */
    userRequestEnableTFA(params: {  type?: string; }) {
        return UserApiFp.userRequestEnableTFA(params)(this.fetch, this.basePath);
    }
    /** 
     * Request a password reset.
     * @param email 
     */
    userRequestPasswordReset(params: {  email: string; }) {
        return UserApiFp.userRequestPasswordReset(params)(this.fetch, this.basePath);
    }
    /** 
     * Request a withdrawal to an external wallet.
     * This will send a confirmation email to the email address on record, unless requested via an API Key with the &#x60;withdraw&#x60; permission.
     * @param currency Currency you&#39;re withdrawing. Options: &#x60;XBt&#x60;
     * @param amount Amount of withdrawal currency.
     * @param address Destination Address.
     * @param otpToken 2FA token. Required if 2FA is enabled on your account.
     * @param fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
     */
    userRequestWithdrawal(params: {  currency: string; amount: number; address: string; otpToken?: string; fee?: number; }) {
        return UserApiFp.userRequestWithdrawal(params)(this.fetch, this.basePath);
    }
    /** 
     * Save user preferences.
     * @param prefs 
     * @param overwrite If true, will overwrite all existing preferences.
     */
    userSavePreferences(params: {  prefs: string; overwrite?: boolean; }) {
        return UserApiFp.userSavePreferences(params)(this.fetch, this.basePath);
    }
    /** 
     * Re-send verification email.
     * @param email 
     */
    userSendVerificationEmail(params: {  email: string; }) {
        return UserApiFp.userSendVerificationEmail(params)(this.fetch, this.basePath);
    }
    /** 
     * Update your password, name, and other attributes.
     * @param firstname 
     * @param lastname 
     * @param oldPassword 
     * @param newPassword 
     * @param newPasswordConfirm 
     * @param username Username can only be set once. To reset, email support.
     * @param country Country of residence.
     * @param pgpPubKey PGP Public Key. If specified, automated emails will be sentwith this key.
     */
    userUpdate(params: {  firstname?: string; lastname?: string; oldPassword?: string; newPassword?: string; newPasswordConfirm?: string; username?: string; country?: string; pgpPubKey?: string; }) {
        return UserApiFp.userUpdate(params)(this.fetch, this.basePath);
    }
}

