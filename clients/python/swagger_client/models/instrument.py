# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Instrument(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Instrument - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'symbol': 'str',
            'root_symbol': 'str',
            'state': 'str',
            'typ': 'str',
            'listing': 'date',
            'front': 'date',
            'expiry': 'date',
            'settle': 'date',
            'relist_interval': 'date',
            'inverse_leg': 'str',
            'sell_leg': 'str',
            'buy_leg': 'str',
            'position_currency': 'str',
            'underlying': 'str',
            'quote_currency': 'str',
            'underlying_symbol': 'str',
            'reference': 'str',
            'reference_symbol': 'str',
            'calc_interval': 'date',
            'publish_interval': 'date',
            'publish_time': 'date',
            'max_order_qty': 'float',
            'max_price': 'float',
            'lot_size': 'float',
            'tick_size': 'float',
            'multiplier': 'float',
            'settl_currency': 'str',
            'underlying_to_position_multiplier': 'float',
            'underlying_to_settle_multiplier': 'float',
            'quote_to_settle_multiplier': 'float',
            'is_quanto': 'bool',
            'is_inverse': 'bool',
            'init_margin': 'float',
            'maint_margin': 'float',
            'limit': 'float',
            'capped': 'bool',
            'taxed': 'bool',
            'maker_fee': 'float',
            'taker_fee': 'float',
            'settlement_fee': 'float',
            'insurance_fee': 'float',
            'funding_base_symbol': 'str',
            'funding_quote_symbol': 'str',
            'funding_premium_symbol': 'str',
            'funding_timestamp': 'date',
            'funding_interval': 'date',
            'funding_rate': 'float',
            'indicative_funding_rate': 'float',
            'rebalance_timestamp': 'date',
            'rebalance_interval': 'date',
            'opening_timestamp': 'date',
            'closing_timestamp': 'date',
            'session_interval': 'date',
            'prev_close_price': 'float',
            'limit_down_price': 'float',
            'limit_up_price': 'float',
            'bankrupt_limit_down_price': 'float',
            'bankrupt_limit_up_price': 'float',
            'prev_total_volume': 'float',
            'total_volume': 'float',
            'volume': 'float',
            'volume24h': 'float',
            'prev_total_turnover': 'float',
            'total_turnover': 'float',
            'turnover': 'float',
            'turnover24h': 'float',
            'prev_price24h': 'float',
            'vwap': 'float',
            'high_price': 'float',
            'low_price': 'float',
            'last_price': 'float',
            'last_price_protected': 'float',
            'last_tick_direction': 'str',
            'last_change_pcnt': 'float',
            'bid_price': 'float',
            'mid_price': 'float',
            'ask_price': 'float',
            'impact_bid_price': 'float',
            'impact_mid_price': 'float',
            'impact_ask_price': 'float',
            'has_liquidity': 'bool',
            'open_interest': 'float',
            'open_value': 'float',
            'fair_method': 'str',
            'fair_basis_rate': 'float',
            'fair_basis': 'float',
            'fair_price': 'float',
            'mark_method': 'str',
            'mark_price': 'float',
            'indicative_tax_rate': 'float',
            'indicative_settle_price': 'float',
            'settled_price': 'float',
            'timestamp': 'date'
        }

        self.attribute_map = {
            'symbol': 'symbol',
            'root_symbol': 'rootSymbol',
            'state': 'state',
            'typ': 'typ',
            'listing': 'listing',
            'front': 'front',
            'expiry': 'expiry',
            'settle': 'settle',
            'relist_interval': 'relistInterval',
            'inverse_leg': 'inverseLeg',
            'sell_leg': 'sellLeg',
            'buy_leg': 'buyLeg',
            'position_currency': 'positionCurrency',
            'underlying': 'underlying',
            'quote_currency': 'quoteCurrency',
            'underlying_symbol': 'underlyingSymbol',
            'reference': 'reference',
            'reference_symbol': 'referenceSymbol',
            'calc_interval': 'calcInterval',
            'publish_interval': 'publishInterval',
            'publish_time': 'publishTime',
            'max_order_qty': 'maxOrderQty',
            'max_price': 'maxPrice',
            'lot_size': 'lotSize',
            'tick_size': 'tickSize',
            'multiplier': 'multiplier',
            'settl_currency': 'settlCurrency',
            'underlying_to_position_multiplier': 'underlyingToPositionMultiplier',
            'underlying_to_settle_multiplier': 'underlyingToSettleMultiplier',
            'quote_to_settle_multiplier': 'quoteToSettleMultiplier',
            'is_quanto': 'isQuanto',
            'is_inverse': 'isInverse',
            'init_margin': 'initMargin',
            'maint_margin': 'maintMargin',
            'limit': 'limit',
            'capped': 'capped',
            'taxed': 'taxed',
            'maker_fee': 'makerFee',
            'taker_fee': 'takerFee',
            'settlement_fee': 'settlementFee',
            'insurance_fee': 'insuranceFee',
            'funding_base_symbol': 'fundingBaseSymbol',
            'funding_quote_symbol': 'fundingQuoteSymbol',
            'funding_premium_symbol': 'fundingPremiumSymbol',
            'funding_timestamp': 'fundingTimestamp',
            'funding_interval': 'fundingInterval',
            'funding_rate': 'fundingRate',
            'indicative_funding_rate': 'indicativeFundingRate',
            'rebalance_timestamp': 'rebalanceTimestamp',
            'rebalance_interval': 'rebalanceInterval',
            'opening_timestamp': 'openingTimestamp',
            'closing_timestamp': 'closingTimestamp',
            'session_interval': 'sessionInterval',
            'prev_close_price': 'prevClosePrice',
            'limit_down_price': 'limitDownPrice',
            'limit_up_price': 'limitUpPrice',
            'bankrupt_limit_down_price': 'bankruptLimitDownPrice',
            'bankrupt_limit_up_price': 'bankruptLimitUpPrice',
            'prev_total_volume': 'prevTotalVolume',
            'total_volume': 'totalVolume',
            'volume': 'volume',
            'volume24h': 'volume24h',
            'prev_total_turnover': 'prevTotalTurnover',
            'total_turnover': 'totalTurnover',
            'turnover': 'turnover',
            'turnover24h': 'turnover24h',
            'prev_price24h': 'prevPrice24h',
            'vwap': 'vwap',
            'high_price': 'highPrice',
            'low_price': 'lowPrice',
            'last_price': 'lastPrice',
            'last_price_protected': 'lastPriceProtected',
            'last_tick_direction': 'lastTickDirection',
            'last_change_pcnt': 'lastChangePcnt',
            'bid_price': 'bidPrice',
            'mid_price': 'midPrice',
            'ask_price': 'askPrice',
            'impact_bid_price': 'impactBidPrice',
            'impact_mid_price': 'impactMidPrice',
            'impact_ask_price': 'impactAskPrice',
            'has_liquidity': 'hasLiquidity',
            'open_interest': 'openInterest',
            'open_value': 'openValue',
            'fair_method': 'fairMethod',
            'fair_basis_rate': 'fairBasisRate',
            'fair_basis': 'fairBasis',
            'fair_price': 'fairPrice',
            'mark_method': 'markMethod',
            'mark_price': 'markPrice',
            'indicative_tax_rate': 'indicativeTaxRate',
            'indicative_settle_price': 'indicativeSettlePrice',
            'settled_price': 'settledPrice',
            'timestamp': 'timestamp'
        }

        self._symbol = None
        self._root_symbol = None
        self._state = None
        self._typ = None
        self._listing = None
        self._front = None
        self._expiry = None
        self._settle = None
        self._relist_interval = None
        self._inverse_leg = None
        self._sell_leg = None
        self._buy_leg = None
        self._position_currency = None
        self._underlying = None
        self._quote_currency = None
        self._underlying_symbol = None
        self._reference = None
        self._reference_symbol = None
        self._calc_interval = None
        self._publish_interval = None
        self._publish_time = None
        self._max_order_qty = None
        self._max_price = None
        self._lot_size = None
        self._tick_size = None
        self._multiplier = None
        self._settl_currency = None
        self._underlying_to_position_multiplier = None
        self._underlying_to_settle_multiplier = None
        self._quote_to_settle_multiplier = None
        self._is_quanto = None
        self._is_inverse = None
        self._init_margin = None
        self._maint_margin = None
        self._limit = None
        self._capped = None
        self._taxed = None
        self._maker_fee = None
        self._taker_fee = None
        self._settlement_fee = None
        self._insurance_fee = None
        self._funding_base_symbol = None
        self._funding_quote_symbol = None
        self._funding_premium_symbol = None
        self._funding_timestamp = None
        self._funding_interval = None
        self._funding_rate = None
        self._indicative_funding_rate = None
        self._rebalance_timestamp = None
        self._rebalance_interval = None
        self._opening_timestamp = None
        self._closing_timestamp = None
        self._session_interval = None
        self._prev_close_price = None
        self._limit_down_price = None
        self._limit_up_price = None
        self._bankrupt_limit_down_price = None
        self._bankrupt_limit_up_price = None
        self._prev_total_volume = None
        self._total_volume = None
        self._volume = None
        self._volume24h = None
        self._prev_total_turnover = None
        self._total_turnover = None
        self._turnover = None
        self._turnover24h = None
        self._prev_price24h = None
        self._vwap = None
        self._high_price = None
        self._low_price = None
        self._last_price = None
        self._last_price_protected = None
        self._last_tick_direction = None
        self._last_change_pcnt = None
        self._bid_price = None
        self._mid_price = None
        self._ask_price = None
        self._impact_bid_price = None
        self._impact_mid_price = None
        self._impact_ask_price = None
        self._has_liquidity = None
        self._open_interest = None
        self._open_value = None
        self._fair_method = None
        self._fair_basis_rate = None
        self._fair_basis = None
        self._fair_price = None
        self._mark_method = None
        self._mark_price = None
        self._indicative_tax_rate = None
        self._indicative_settle_price = None
        self._settled_price = None
        self._timestamp = None

    @property
    def symbol(self):
        """
        Gets the symbol of this Instrument.


        :return: The symbol of this Instrument.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """
        Sets the symbol of this Instrument.


        :param symbol: The symbol of this Instrument.
        :type: str
        """
        self._symbol = symbol

    @property
    def root_symbol(self):
        """
        Gets the root_symbol of this Instrument.


        :return: The root_symbol of this Instrument.
        :rtype: str
        """
        return self._root_symbol

    @root_symbol.setter
    def root_symbol(self, root_symbol):
        """
        Sets the root_symbol of this Instrument.


        :param root_symbol: The root_symbol of this Instrument.
        :type: str
        """
        self._root_symbol = root_symbol

    @property
    def state(self):
        """
        Gets the state of this Instrument.


        :return: The state of this Instrument.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Instrument.


        :param state: The state of this Instrument.
        :type: str
        """
        self._state = state

    @property
    def typ(self):
        """
        Gets the typ of this Instrument.


        :return: The typ of this Instrument.
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """
        Sets the typ of this Instrument.


        :param typ: The typ of this Instrument.
        :type: str
        """
        self._typ = typ

    @property
    def listing(self):
        """
        Gets the listing of this Instrument.


        :return: The listing of this Instrument.
        :rtype: date
        """
        return self._listing

    @listing.setter
    def listing(self, listing):
        """
        Sets the listing of this Instrument.


        :param listing: The listing of this Instrument.
        :type: date
        """
        self._listing = listing

    @property
    def front(self):
        """
        Gets the front of this Instrument.


        :return: The front of this Instrument.
        :rtype: date
        """
        return self._front

    @front.setter
    def front(self, front):
        """
        Sets the front of this Instrument.


        :param front: The front of this Instrument.
        :type: date
        """
        self._front = front

    @property
    def expiry(self):
        """
        Gets the expiry of this Instrument.


        :return: The expiry of this Instrument.
        :rtype: date
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """
        Sets the expiry of this Instrument.


        :param expiry: The expiry of this Instrument.
        :type: date
        """
        self._expiry = expiry

    @property
    def settle(self):
        """
        Gets the settle of this Instrument.


        :return: The settle of this Instrument.
        :rtype: date
        """
        return self._settle

    @settle.setter
    def settle(self, settle):
        """
        Sets the settle of this Instrument.


        :param settle: The settle of this Instrument.
        :type: date
        """
        self._settle = settle

    @property
    def relist_interval(self):
        """
        Gets the relist_interval of this Instrument.


        :return: The relist_interval of this Instrument.
        :rtype: date
        """
        return self._relist_interval

    @relist_interval.setter
    def relist_interval(self, relist_interval):
        """
        Sets the relist_interval of this Instrument.


        :param relist_interval: The relist_interval of this Instrument.
        :type: date
        """
        self._relist_interval = relist_interval

    @property
    def inverse_leg(self):
        """
        Gets the inverse_leg of this Instrument.


        :return: The inverse_leg of this Instrument.
        :rtype: str
        """
        return self._inverse_leg

    @inverse_leg.setter
    def inverse_leg(self, inverse_leg):
        """
        Sets the inverse_leg of this Instrument.


        :param inverse_leg: The inverse_leg of this Instrument.
        :type: str
        """
        self._inverse_leg = inverse_leg

    @property
    def sell_leg(self):
        """
        Gets the sell_leg of this Instrument.


        :return: The sell_leg of this Instrument.
        :rtype: str
        """
        return self._sell_leg

    @sell_leg.setter
    def sell_leg(self, sell_leg):
        """
        Sets the sell_leg of this Instrument.


        :param sell_leg: The sell_leg of this Instrument.
        :type: str
        """
        self._sell_leg = sell_leg

    @property
    def buy_leg(self):
        """
        Gets the buy_leg of this Instrument.


        :return: The buy_leg of this Instrument.
        :rtype: str
        """
        return self._buy_leg

    @buy_leg.setter
    def buy_leg(self, buy_leg):
        """
        Sets the buy_leg of this Instrument.


        :param buy_leg: The buy_leg of this Instrument.
        :type: str
        """
        self._buy_leg = buy_leg

    @property
    def position_currency(self):
        """
        Gets the position_currency of this Instrument.


        :return: The position_currency of this Instrument.
        :rtype: str
        """
        return self._position_currency

    @position_currency.setter
    def position_currency(self, position_currency):
        """
        Sets the position_currency of this Instrument.


        :param position_currency: The position_currency of this Instrument.
        :type: str
        """
        self._position_currency = position_currency

    @property
    def underlying(self):
        """
        Gets the underlying of this Instrument.


        :return: The underlying of this Instrument.
        :rtype: str
        """
        return self._underlying

    @underlying.setter
    def underlying(self, underlying):
        """
        Sets the underlying of this Instrument.


        :param underlying: The underlying of this Instrument.
        :type: str
        """
        self._underlying = underlying

    @property
    def quote_currency(self):
        """
        Gets the quote_currency of this Instrument.


        :return: The quote_currency of this Instrument.
        :rtype: str
        """
        return self._quote_currency

    @quote_currency.setter
    def quote_currency(self, quote_currency):
        """
        Sets the quote_currency of this Instrument.


        :param quote_currency: The quote_currency of this Instrument.
        :type: str
        """
        self._quote_currency = quote_currency

    @property
    def underlying_symbol(self):
        """
        Gets the underlying_symbol of this Instrument.


        :return: The underlying_symbol of this Instrument.
        :rtype: str
        """
        return self._underlying_symbol

    @underlying_symbol.setter
    def underlying_symbol(self, underlying_symbol):
        """
        Sets the underlying_symbol of this Instrument.


        :param underlying_symbol: The underlying_symbol of this Instrument.
        :type: str
        """
        self._underlying_symbol = underlying_symbol

    @property
    def reference(self):
        """
        Gets the reference of this Instrument.


        :return: The reference of this Instrument.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """
        Sets the reference of this Instrument.


        :param reference: The reference of this Instrument.
        :type: str
        """
        self._reference = reference

    @property
    def reference_symbol(self):
        """
        Gets the reference_symbol of this Instrument.


        :return: The reference_symbol of this Instrument.
        :rtype: str
        """
        return self._reference_symbol

    @reference_symbol.setter
    def reference_symbol(self, reference_symbol):
        """
        Sets the reference_symbol of this Instrument.


        :param reference_symbol: The reference_symbol of this Instrument.
        :type: str
        """
        self._reference_symbol = reference_symbol

    @property
    def calc_interval(self):
        """
        Gets the calc_interval of this Instrument.


        :return: The calc_interval of this Instrument.
        :rtype: date
        """
        return self._calc_interval

    @calc_interval.setter
    def calc_interval(self, calc_interval):
        """
        Sets the calc_interval of this Instrument.


        :param calc_interval: The calc_interval of this Instrument.
        :type: date
        """
        self._calc_interval = calc_interval

    @property
    def publish_interval(self):
        """
        Gets the publish_interval of this Instrument.


        :return: The publish_interval of this Instrument.
        :rtype: date
        """
        return self._publish_interval

    @publish_interval.setter
    def publish_interval(self, publish_interval):
        """
        Sets the publish_interval of this Instrument.


        :param publish_interval: The publish_interval of this Instrument.
        :type: date
        """
        self._publish_interval = publish_interval

    @property
    def publish_time(self):
        """
        Gets the publish_time of this Instrument.


        :return: The publish_time of this Instrument.
        :rtype: date
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time):
        """
        Sets the publish_time of this Instrument.


        :param publish_time: The publish_time of this Instrument.
        :type: date
        """
        self._publish_time = publish_time

    @property
    def max_order_qty(self):
        """
        Gets the max_order_qty of this Instrument.


        :return: The max_order_qty of this Instrument.
        :rtype: float
        """
        return self._max_order_qty

    @max_order_qty.setter
    def max_order_qty(self, max_order_qty):
        """
        Sets the max_order_qty of this Instrument.


        :param max_order_qty: The max_order_qty of this Instrument.
        :type: float
        """
        self._max_order_qty = max_order_qty

    @property
    def max_price(self):
        """
        Gets the max_price of this Instrument.


        :return: The max_price of this Instrument.
        :rtype: float
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """
        Sets the max_price of this Instrument.


        :param max_price: The max_price of this Instrument.
        :type: float
        """
        self._max_price = max_price

    @property
    def lot_size(self):
        """
        Gets the lot_size of this Instrument.


        :return: The lot_size of this Instrument.
        :rtype: float
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """
        Sets the lot_size of this Instrument.


        :param lot_size: The lot_size of this Instrument.
        :type: float
        """
        self._lot_size = lot_size

    @property
    def tick_size(self):
        """
        Gets the tick_size of this Instrument.


        :return: The tick_size of this Instrument.
        :rtype: float
        """
        return self._tick_size

    @tick_size.setter
    def tick_size(self, tick_size):
        """
        Sets the tick_size of this Instrument.


        :param tick_size: The tick_size of this Instrument.
        :type: float
        """
        self._tick_size = tick_size

    @property
    def multiplier(self):
        """
        Gets the multiplier of this Instrument.


        :return: The multiplier of this Instrument.
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """
        Sets the multiplier of this Instrument.


        :param multiplier: The multiplier of this Instrument.
        :type: float
        """
        self._multiplier = multiplier

    @property
    def settl_currency(self):
        """
        Gets the settl_currency of this Instrument.


        :return: The settl_currency of this Instrument.
        :rtype: str
        """
        return self._settl_currency

    @settl_currency.setter
    def settl_currency(self, settl_currency):
        """
        Sets the settl_currency of this Instrument.


        :param settl_currency: The settl_currency of this Instrument.
        :type: str
        """
        self._settl_currency = settl_currency

    @property
    def underlying_to_position_multiplier(self):
        """
        Gets the underlying_to_position_multiplier of this Instrument.


        :return: The underlying_to_position_multiplier of this Instrument.
        :rtype: float
        """
        return self._underlying_to_position_multiplier

    @underlying_to_position_multiplier.setter
    def underlying_to_position_multiplier(self, underlying_to_position_multiplier):
        """
        Sets the underlying_to_position_multiplier of this Instrument.


        :param underlying_to_position_multiplier: The underlying_to_position_multiplier of this Instrument.
        :type: float
        """
        self._underlying_to_position_multiplier = underlying_to_position_multiplier

    @property
    def underlying_to_settle_multiplier(self):
        """
        Gets the underlying_to_settle_multiplier of this Instrument.


        :return: The underlying_to_settle_multiplier of this Instrument.
        :rtype: float
        """
        return self._underlying_to_settle_multiplier

    @underlying_to_settle_multiplier.setter
    def underlying_to_settle_multiplier(self, underlying_to_settle_multiplier):
        """
        Sets the underlying_to_settle_multiplier of this Instrument.


        :param underlying_to_settle_multiplier: The underlying_to_settle_multiplier of this Instrument.
        :type: float
        """
        self._underlying_to_settle_multiplier = underlying_to_settle_multiplier

    @property
    def quote_to_settle_multiplier(self):
        """
        Gets the quote_to_settle_multiplier of this Instrument.


        :return: The quote_to_settle_multiplier of this Instrument.
        :rtype: float
        """
        return self._quote_to_settle_multiplier

    @quote_to_settle_multiplier.setter
    def quote_to_settle_multiplier(self, quote_to_settle_multiplier):
        """
        Sets the quote_to_settle_multiplier of this Instrument.


        :param quote_to_settle_multiplier: The quote_to_settle_multiplier of this Instrument.
        :type: float
        """
        self._quote_to_settle_multiplier = quote_to_settle_multiplier

    @property
    def is_quanto(self):
        """
        Gets the is_quanto of this Instrument.


        :return: The is_quanto of this Instrument.
        :rtype: bool
        """
        return self._is_quanto

    @is_quanto.setter
    def is_quanto(self, is_quanto):
        """
        Sets the is_quanto of this Instrument.


        :param is_quanto: The is_quanto of this Instrument.
        :type: bool
        """
        self._is_quanto = is_quanto

    @property
    def is_inverse(self):
        """
        Gets the is_inverse of this Instrument.


        :return: The is_inverse of this Instrument.
        :rtype: bool
        """
        return self._is_inverse

    @is_inverse.setter
    def is_inverse(self, is_inverse):
        """
        Sets the is_inverse of this Instrument.


        :param is_inverse: The is_inverse of this Instrument.
        :type: bool
        """
        self._is_inverse = is_inverse

    @property
    def init_margin(self):
        """
        Gets the init_margin of this Instrument.


        :return: The init_margin of this Instrument.
        :rtype: float
        """
        return self._init_margin

    @init_margin.setter
    def init_margin(self, init_margin):
        """
        Sets the init_margin of this Instrument.


        :param init_margin: The init_margin of this Instrument.
        :type: float
        """
        self._init_margin = init_margin

    @property
    def maint_margin(self):
        """
        Gets the maint_margin of this Instrument.


        :return: The maint_margin of this Instrument.
        :rtype: float
        """
        return self._maint_margin

    @maint_margin.setter
    def maint_margin(self, maint_margin):
        """
        Sets the maint_margin of this Instrument.


        :param maint_margin: The maint_margin of this Instrument.
        :type: float
        """
        self._maint_margin = maint_margin

    @property
    def limit(self):
        """
        Gets the limit of this Instrument.


        :return: The limit of this Instrument.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this Instrument.


        :param limit: The limit of this Instrument.
        :type: float
        """
        self._limit = limit

    @property
    def capped(self):
        """
        Gets the capped of this Instrument.


        :return: The capped of this Instrument.
        :rtype: bool
        """
        return self._capped

    @capped.setter
    def capped(self, capped):
        """
        Sets the capped of this Instrument.


        :param capped: The capped of this Instrument.
        :type: bool
        """
        self._capped = capped

    @property
    def taxed(self):
        """
        Gets the taxed of this Instrument.


        :return: The taxed of this Instrument.
        :rtype: bool
        """
        return self._taxed

    @taxed.setter
    def taxed(self, taxed):
        """
        Sets the taxed of this Instrument.


        :param taxed: The taxed of this Instrument.
        :type: bool
        """
        self._taxed = taxed

    @property
    def maker_fee(self):
        """
        Gets the maker_fee of this Instrument.


        :return: The maker_fee of this Instrument.
        :rtype: float
        """
        return self._maker_fee

    @maker_fee.setter
    def maker_fee(self, maker_fee):
        """
        Sets the maker_fee of this Instrument.


        :param maker_fee: The maker_fee of this Instrument.
        :type: float
        """
        self._maker_fee = maker_fee

    @property
    def taker_fee(self):
        """
        Gets the taker_fee of this Instrument.


        :return: The taker_fee of this Instrument.
        :rtype: float
        """
        return self._taker_fee

    @taker_fee.setter
    def taker_fee(self, taker_fee):
        """
        Sets the taker_fee of this Instrument.


        :param taker_fee: The taker_fee of this Instrument.
        :type: float
        """
        self._taker_fee = taker_fee

    @property
    def settlement_fee(self):
        """
        Gets the settlement_fee of this Instrument.


        :return: The settlement_fee of this Instrument.
        :rtype: float
        """
        return self._settlement_fee

    @settlement_fee.setter
    def settlement_fee(self, settlement_fee):
        """
        Sets the settlement_fee of this Instrument.


        :param settlement_fee: The settlement_fee of this Instrument.
        :type: float
        """
        self._settlement_fee = settlement_fee

    @property
    def insurance_fee(self):
        """
        Gets the insurance_fee of this Instrument.


        :return: The insurance_fee of this Instrument.
        :rtype: float
        """
        return self._insurance_fee

    @insurance_fee.setter
    def insurance_fee(self, insurance_fee):
        """
        Sets the insurance_fee of this Instrument.


        :param insurance_fee: The insurance_fee of this Instrument.
        :type: float
        """
        self._insurance_fee = insurance_fee

    @property
    def funding_base_symbol(self):
        """
        Gets the funding_base_symbol of this Instrument.


        :return: The funding_base_symbol of this Instrument.
        :rtype: str
        """
        return self._funding_base_symbol

    @funding_base_symbol.setter
    def funding_base_symbol(self, funding_base_symbol):
        """
        Sets the funding_base_symbol of this Instrument.


        :param funding_base_symbol: The funding_base_symbol of this Instrument.
        :type: str
        """
        self._funding_base_symbol = funding_base_symbol

    @property
    def funding_quote_symbol(self):
        """
        Gets the funding_quote_symbol of this Instrument.


        :return: The funding_quote_symbol of this Instrument.
        :rtype: str
        """
        return self._funding_quote_symbol

    @funding_quote_symbol.setter
    def funding_quote_symbol(self, funding_quote_symbol):
        """
        Sets the funding_quote_symbol of this Instrument.


        :param funding_quote_symbol: The funding_quote_symbol of this Instrument.
        :type: str
        """
        self._funding_quote_symbol = funding_quote_symbol

    @property
    def funding_premium_symbol(self):
        """
        Gets the funding_premium_symbol of this Instrument.


        :return: The funding_premium_symbol of this Instrument.
        :rtype: str
        """
        return self._funding_premium_symbol

    @funding_premium_symbol.setter
    def funding_premium_symbol(self, funding_premium_symbol):
        """
        Sets the funding_premium_symbol of this Instrument.


        :param funding_premium_symbol: The funding_premium_symbol of this Instrument.
        :type: str
        """
        self._funding_premium_symbol = funding_premium_symbol

    @property
    def funding_timestamp(self):
        """
        Gets the funding_timestamp of this Instrument.


        :return: The funding_timestamp of this Instrument.
        :rtype: date
        """
        return self._funding_timestamp

    @funding_timestamp.setter
    def funding_timestamp(self, funding_timestamp):
        """
        Sets the funding_timestamp of this Instrument.


        :param funding_timestamp: The funding_timestamp of this Instrument.
        :type: date
        """
        self._funding_timestamp = funding_timestamp

    @property
    def funding_interval(self):
        """
        Gets the funding_interval of this Instrument.


        :return: The funding_interval of this Instrument.
        :rtype: date
        """
        return self._funding_interval

    @funding_interval.setter
    def funding_interval(self, funding_interval):
        """
        Sets the funding_interval of this Instrument.


        :param funding_interval: The funding_interval of this Instrument.
        :type: date
        """
        self._funding_interval = funding_interval

    @property
    def funding_rate(self):
        """
        Gets the funding_rate of this Instrument.


        :return: The funding_rate of this Instrument.
        :rtype: float
        """
        return self._funding_rate

    @funding_rate.setter
    def funding_rate(self, funding_rate):
        """
        Sets the funding_rate of this Instrument.


        :param funding_rate: The funding_rate of this Instrument.
        :type: float
        """
        self._funding_rate = funding_rate

    @property
    def indicative_funding_rate(self):
        """
        Gets the indicative_funding_rate of this Instrument.


        :return: The indicative_funding_rate of this Instrument.
        :rtype: float
        """
        return self._indicative_funding_rate

    @indicative_funding_rate.setter
    def indicative_funding_rate(self, indicative_funding_rate):
        """
        Sets the indicative_funding_rate of this Instrument.


        :param indicative_funding_rate: The indicative_funding_rate of this Instrument.
        :type: float
        """
        self._indicative_funding_rate = indicative_funding_rate

    @property
    def rebalance_timestamp(self):
        """
        Gets the rebalance_timestamp of this Instrument.


        :return: The rebalance_timestamp of this Instrument.
        :rtype: date
        """
        return self._rebalance_timestamp

    @rebalance_timestamp.setter
    def rebalance_timestamp(self, rebalance_timestamp):
        """
        Sets the rebalance_timestamp of this Instrument.


        :param rebalance_timestamp: The rebalance_timestamp of this Instrument.
        :type: date
        """
        self._rebalance_timestamp = rebalance_timestamp

    @property
    def rebalance_interval(self):
        """
        Gets the rebalance_interval of this Instrument.


        :return: The rebalance_interval of this Instrument.
        :rtype: date
        """
        return self._rebalance_interval

    @rebalance_interval.setter
    def rebalance_interval(self, rebalance_interval):
        """
        Sets the rebalance_interval of this Instrument.


        :param rebalance_interval: The rebalance_interval of this Instrument.
        :type: date
        """
        self._rebalance_interval = rebalance_interval

    @property
    def opening_timestamp(self):
        """
        Gets the opening_timestamp of this Instrument.


        :return: The opening_timestamp of this Instrument.
        :rtype: date
        """
        return self._opening_timestamp

    @opening_timestamp.setter
    def opening_timestamp(self, opening_timestamp):
        """
        Sets the opening_timestamp of this Instrument.


        :param opening_timestamp: The opening_timestamp of this Instrument.
        :type: date
        """
        self._opening_timestamp = opening_timestamp

    @property
    def closing_timestamp(self):
        """
        Gets the closing_timestamp of this Instrument.


        :return: The closing_timestamp of this Instrument.
        :rtype: date
        """
        return self._closing_timestamp

    @closing_timestamp.setter
    def closing_timestamp(self, closing_timestamp):
        """
        Sets the closing_timestamp of this Instrument.


        :param closing_timestamp: The closing_timestamp of this Instrument.
        :type: date
        """
        self._closing_timestamp = closing_timestamp

    @property
    def session_interval(self):
        """
        Gets the session_interval of this Instrument.


        :return: The session_interval of this Instrument.
        :rtype: date
        """
        return self._session_interval

    @session_interval.setter
    def session_interval(self, session_interval):
        """
        Sets the session_interval of this Instrument.


        :param session_interval: The session_interval of this Instrument.
        :type: date
        """
        self._session_interval = session_interval

    @property
    def prev_close_price(self):
        """
        Gets the prev_close_price of this Instrument.


        :return: The prev_close_price of this Instrument.
        :rtype: float
        """
        return self._prev_close_price

    @prev_close_price.setter
    def prev_close_price(self, prev_close_price):
        """
        Sets the prev_close_price of this Instrument.


        :param prev_close_price: The prev_close_price of this Instrument.
        :type: float
        """
        self._prev_close_price = prev_close_price

    @property
    def limit_down_price(self):
        """
        Gets the limit_down_price of this Instrument.


        :return: The limit_down_price of this Instrument.
        :rtype: float
        """
        return self._limit_down_price

    @limit_down_price.setter
    def limit_down_price(self, limit_down_price):
        """
        Sets the limit_down_price of this Instrument.


        :param limit_down_price: The limit_down_price of this Instrument.
        :type: float
        """
        self._limit_down_price = limit_down_price

    @property
    def limit_up_price(self):
        """
        Gets the limit_up_price of this Instrument.


        :return: The limit_up_price of this Instrument.
        :rtype: float
        """
        return self._limit_up_price

    @limit_up_price.setter
    def limit_up_price(self, limit_up_price):
        """
        Sets the limit_up_price of this Instrument.


        :param limit_up_price: The limit_up_price of this Instrument.
        :type: float
        """
        self._limit_up_price = limit_up_price

    @property
    def bankrupt_limit_down_price(self):
        """
        Gets the bankrupt_limit_down_price of this Instrument.


        :return: The bankrupt_limit_down_price of this Instrument.
        :rtype: float
        """
        return self._bankrupt_limit_down_price

    @bankrupt_limit_down_price.setter
    def bankrupt_limit_down_price(self, bankrupt_limit_down_price):
        """
        Sets the bankrupt_limit_down_price of this Instrument.


        :param bankrupt_limit_down_price: The bankrupt_limit_down_price of this Instrument.
        :type: float
        """
        self._bankrupt_limit_down_price = bankrupt_limit_down_price

    @property
    def bankrupt_limit_up_price(self):
        """
        Gets the bankrupt_limit_up_price of this Instrument.


        :return: The bankrupt_limit_up_price of this Instrument.
        :rtype: float
        """
        return self._bankrupt_limit_up_price

    @bankrupt_limit_up_price.setter
    def bankrupt_limit_up_price(self, bankrupt_limit_up_price):
        """
        Sets the bankrupt_limit_up_price of this Instrument.


        :param bankrupt_limit_up_price: The bankrupt_limit_up_price of this Instrument.
        :type: float
        """
        self._bankrupt_limit_up_price = bankrupt_limit_up_price

    @property
    def prev_total_volume(self):
        """
        Gets the prev_total_volume of this Instrument.


        :return: The prev_total_volume of this Instrument.
        :rtype: float
        """
        return self._prev_total_volume

    @prev_total_volume.setter
    def prev_total_volume(self, prev_total_volume):
        """
        Sets the prev_total_volume of this Instrument.


        :param prev_total_volume: The prev_total_volume of this Instrument.
        :type: float
        """
        self._prev_total_volume = prev_total_volume

    @property
    def total_volume(self):
        """
        Gets the total_volume of this Instrument.


        :return: The total_volume of this Instrument.
        :rtype: float
        """
        return self._total_volume

    @total_volume.setter
    def total_volume(self, total_volume):
        """
        Sets the total_volume of this Instrument.


        :param total_volume: The total_volume of this Instrument.
        :type: float
        """
        self._total_volume = total_volume

    @property
    def volume(self):
        """
        Gets the volume of this Instrument.


        :return: The volume of this Instrument.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """
        Sets the volume of this Instrument.


        :param volume: The volume of this Instrument.
        :type: float
        """
        self._volume = volume

    @property
    def volume24h(self):
        """
        Gets the volume24h of this Instrument.


        :return: The volume24h of this Instrument.
        :rtype: float
        """
        return self._volume24h

    @volume24h.setter
    def volume24h(self, volume24h):
        """
        Sets the volume24h of this Instrument.


        :param volume24h: The volume24h of this Instrument.
        :type: float
        """
        self._volume24h = volume24h

    @property
    def prev_total_turnover(self):
        """
        Gets the prev_total_turnover of this Instrument.


        :return: The prev_total_turnover of this Instrument.
        :rtype: float
        """
        return self._prev_total_turnover

    @prev_total_turnover.setter
    def prev_total_turnover(self, prev_total_turnover):
        """
        Sets the prev_total_turnover of this Instrument.


        :param prev_total_turnover: The prev_total_turnover of this Instrument.
        :type: float
        """
        self._prev_total_turnover = prev_total_turnover

    @property
    def total_turnover(self):
        """
        Gets the total_turnover of this Instrument.


        :return: The total_turnover of this Instrument.
        :rtype: float
        """
        return self._total_turnover

    @total_turnover.setter
    def total_turnover(self, total_turnover):
        """
        Sets the total_turnover of this Instrument.


        :param total_turnover: The total_turnover of this Instrument.
        :type: float
        """
        self._total_turnover = total_turnover

    @property
    def turnover(self):
        """
        Gets the turnover of this Instrument.


        :return: The turnover of this Instrument.
        :rtype: float
        """
        return self._turnover

    @turnover.setter
    def turnover(self, turnover):
        """
        Sets the turnover of this Instrument.


        :param turnover: The turnover of this Instrument.
        :type: float
        """
        self._turnover = turnover

    @property
    def turnover24h(self):
        """
        Gets the turnover24h of this Instrument.


        :return: The turnover24h of this Instrument.
        :rtype: float
        """
        return self._turnover24h

    @turnover24h.setter
    def turnover24h(self, turnover24h):
        """
        Sets the turnover24h of this Instrument.


        :param turnover24h: The turnover24h of this Instrument.
        :type: float
        """
        self._turnover24h = turnover24h

    @property
    def prev_price24h(self):
        """
        Gets the prev_price24h of this Instrument.


        :return: The prev_price24h of this Instrument.
        :rtype: float
        """
        return self._prev_price24h

    @prev_price24h.setter
    def prev_price24h(self, prev_price24h):
        """
        Sets the prev_price24h of this Instrument.


        :param prev_price24h: The prev_price24h of this Instrument.
        :type: float
        """
        self._prev_price24h = prev_price24h

    @property
    def vwap(self):
        """
        Gets the vwap of this Instrument.


        :return: The vwap of this Instrument.
        :rtype: float
        """
        return self._vwap

    @vwap.setter
    def vwap(self, vwap):
        """
        Sets the vwap of this Instrument.


        :param vwap: The vwap of this Instrument.
        :type: float
        """
        self._vwap = vwap

    @property
    def high_price(self):
        """
        Gets the high_price of this Instrument.


        :return: The high_price of this Instrument.
        :rtype: float
        """
        return self._high_price

    @high_price.setter
    def high_price(self, high_price):
        """
        Sets the high_price of this Instrument.


        :param high_price: The high_price of this Instrument.
        :type: float
        """
        self._high_price = high_price

    @property
    def low_price(self):
        """
        Gets the low_price of this Instrument.


        :return: The low_price of this Instrument.
        :rtype: float
        """
        return self._low_price

    @low_price.setter
    def low_price(self, low_price):
        """
        Sets the low_price of this Instrument.


        :param low_price: The low_price of this Instrument.
        :type: float
        """
        self._low_price = low_price

    @property
    def last_price(self):
        """
        Gets the last_price of this Instrument.


        :return: The last_price of this Instrument.
        :rtype: float
        """
        return self._last_price

    @last_price.setter
    def last_price(self, last_price):
        """
        Sets the last_price of this Instrument.


        :param last_price: The last_price of this Instrument.
        :type: float
        """
        self._last_price = last_price

    @property
    def last_price_protected(self):
        """
        Gets the last_price_protected of this Instrument.


        :return: The last_price_protected of this Instrument.
        :rtype: float
        """
        return self._last_price_protected

    @last_price_protected.setter
    def last_price_protected(self, last_price_protected):
        """
        Sets the last_price_protected of this Instrument.


        :param last_price_protected: The last_price_protected of this Instrument.
        :type: float
        """
        self._last_price_protected = last_price_protected

    @property
    def last_tick_direction(self):
        """
        Gets the last_tick_direction of this Instrument.


        :return: The last_tick_direction of this Instrument.
        :rtype: str
        """
        return self._last_tick_direction

    @last_tick_direction.setter
    def last_tick_direction(self, last_tick_direction):
        """
        Sets the last_tick_direction of this Instrument.


        :param last_tick_direction: The last_tick_direction of this Instrument.
        :type: str
        """
        self._last_tick_direction = last_tick_direction

    @property
    def last_change_pcnt(self):
        """
        Gets the last_change_pcnt of this Instrument.


        :return: The last_change_pcnt of this Instrument.
        :rtype: float
        """
        return self._last_change_pcnt

    @last_change_pcnt.setter
    def last_change_pcnt(self, last_change_pcnt):
        """
        Sets the last_change_pcnt of this Instrument.


        :param last_change_pcnt: The last_change_pcnt of this Instrument.
        :type: float
        """
        self._last_change_pcnt = last_change_pcnt

    @property
    def bid_price(self):
        """
        Gets the bid_price of this Instrument.


        :return: The bid_price of this Instrument.
        :rtype: float
        """
        return self._bid_price

    @bid_price.setter
    def bid_price(self, bid_price):
        """
        Sets the bid_price of this Instrument.


        :param bid_price: The bid_price of this Instrument.
        :type: float
        """
        self._bid_price = bid_price

    @property
    def mid_price(self):
        """
        Gets the mid_price of this Instrument.


        :return: The mid_price of this Instrument.
        :rtype: float
        """
        return self._mid_price

    @mid_price.setter
    def mid_price(self, mid_price):
        """
        Sets the mid_price of this Instrument.


        :param mid_price: The mid_price of this Instrument.
        :type: float
        """
        self._mid_price = mid_price

    @property
    def ask_price(self):
        """
        Gets the ask_price of this Instrument.


        :return: The ask_price of this Instrument.
        :rtype: float
        """
        return self._ask_price

    @ask_price.setter
    def ask_price(self, ask_price):
        """
        Sets the ask_price of this Instrument.


        :param ask_price: The ask_price of this Instrument.
        :type: float
        """
        self._ask_price = ask_price

    @property
    def impact_bid_price(self):
        """
        Gets the impact_bid_price of this Instrument.


        :return: The impact_bid_price of this Instrument.
        :rtype: float
        """
        return self._impact_bid_price

    @impact_bid_price.setter
    def impact_bid_price(self, impact_bid_price):
        """
        Sets the impact_bid_price of this Instrument.


        :param impact_bid_price: The impact_bid_price of this Instrument.
        :type: float
        """
        self._impact_bid_price = impact_bid_price

    @property
    def impact_mid_price(self):
        """
        Gets the impact_mid_price of this Instrument.


        :return: The impact_mid_price of this Instrument.
        :rtype: float
        """
        return self._impact_mid_price

    @impact_mid_price.setter
    def impact_mid_price(self, impact_mid_price):
        """
        Sets the impact_mid_price of this Instrument.


        :param impact_mid_price: The impact_mid_price of this Instrument.
        :type: float
        """
        self._impact_mid_price = impact_mid_price

    @property
    def impact_ask_price(self):
        """
        Gets the impact_ask_price of this Instrument.


        :return: The impact_ask_price of this Instrument.
        :rtype: float
        """
        return self._impact_ask_price

    @impact_ask_price.setter
    def impact_ask_price(self, impact_ask_price):
        """
        Sets the impact_ask_price of this Instrument.


        :param impact_ask_price: The impact_ask_price of this Instrument.
        :type: float
        """
        self._impact_ask_price = impact_ask_price

    @property
    def has_liquidity(self):
        """
        Gets the has_liquidity of this Instrument.


        :return: The has_liquidity of this Instrument.
        :rtype: bool
        """
        return self._has_liquidity

    @has_liquidity.setter
    def has_liquidity(self, has_liquidity):
        """
        Sets the has_liquidity of this Instrument.


        :param has_liquidity: The has_liquidity of this Instrument.
        :type: bool
        """
        self._has_liquidity = has_liquidity

    @property
    def open_interest(self):
        """
        Gets the open_interest of this Instrument.


        :return: The open_interest of this Instrument.
        :rtype: float
        """
        return self._open_interest

    @open_interest.setter
    def open_interest(self, open_interest):
        """
        Sets the open_interest of this Instrument.


        :param open_interest: The open_interest of this Instrument.
        :type: float
        """
        self._open_interest = open_interest

    @property
    def open_value(self):
        """
        Gets the open_value of this Instrument.


        :return: The open_value of this Instrument.
        :rtype: float
        """
        return self._open_value

    @open_value.setter
    def open_value(self, open_value):
        """
        Sets the open_value of this Instrument.


        :param open_value: The open_value of this Instrument.
        :type: float
        """
        self._open_value = open_value

    @property
    def fair_method(self):
        """
        Gets the fair_method of this Instrument.


        :return: The fair_method of this Instrument.
        :rtype: str
        """
        return self._fair_method

    @fair_method.setter
    def fair_method(self, fair_method):
        """
        Sets the fair_method of this Instrument.


        :param fair_method: The fair_method of this Instrument.
        :type: str
        """
        self._fair_method = fair_method

    @property
    def fair_basis_rate(self):
        """
        Gets the fair_basis_rate of this Instrument.


        :return: The fair_basis_rate of this Instrument.
        :rtype: float
        """
        return self._fair_basis_rate

    @fair_basis_rate.setter
    def fair_basis_rate(self, fair_basis_rate):
        """
        Sets the fair_basis_rate of this Instrument.


        :param fair_basis_rate: The fair_basis_rate of this Instrument.
        :type: float
        """
        self._fair_basis_rate = fair_basis_rate

    @property
    def fair_basis(self):
        """
        Gets the fair_basis of this Instrument.


        :return: The fair_basis of this Instrument.
        :rtype: float
        """
        return self._fair_basis

    @fair_basis.setter
    def fair_basis(self, fair_basis):
        """
        Sets the fair_basis of this Instrument.


        :param fair_basis: The fair_basis of this Instrument.
        :type: float
        """
        self._fair_basis = fair_basis

    @property
    def fair_price(self):
        """
        Gets the fair_price of this Instrument.


        :return: The fair_price of this Instrument.
        :rtype: float
        """
        return self._fair_price

    @fair_price.setter
    def fair_price(self, fair_price):
        """
        Sets the fair_price of this Instrument.


        :param fair_price: The fair_price of this Instrument.
        :type: float
        """
        self._fair_price = fair_price

    @property
    def mark_method(self):
        """
        Gets the mark_method of this Instrument.


        :return: The mark_method of this Instrument.
        :rtype: str
        """
        return self._mark_method

    @mark_method.setter
    def mark_method(self, mark_method):
        """
        Sets the mark_method of this Instrument.


        :param mark_method: The mark_method of this Instrument.
        :type: str
        """
        self._mark_method = mark_method

    @property
    def mark_price(self):
        """
        Gets the mark_price of this Instrument.


        :return: The mark_price of this Instrument.
        :rtype: float
        """
        return self._mark_price

    @mark_price.setter
    def mark_price(self, mark_price):
        """
        Sets the mark_price of this Instrument.


        :param mark_price: The mark_price of this Instrument.
        :type: float
        """
        self._mark_price = mark_price

    @property
    def indicative_tax_rate(self):
        """
        Gets the indicative_tax_rate of this Instrument.


        :return: The indicative_tax_rate of this Instrument.
        :rtype: float
        """
        return self._indicative_tax_rate

    @indicative_tax_rate.setter
    def indicative_tax_rate(self, indicative_tax_rate):
        """
        Sets the indicative_tax_rate of this Instrument.


        :param indicative_tax_rate: The indicative_tax_rate of this Instrument.
        :type: float
        """
        self._indicative_tax_rate = indicative_tax_rate

    @property
    def indicative_settle_price(self):
        """
        Gets the indicative_settle_price of this Instrument.


        :return: The indicative_settle_price of this Instrument.
        :rtype: float
        """
        return self._indicative_settle_price

    @indicative_settle_price.setter
    def indicative_settle_price(self, indicative_settle_price):
        """
        Sets the indicative_settle_price of this Instrument.


        :param indicative_settle_price: The indicative_settle_price of this Instrument.
        :type: float
        """
        self._indicative_settle_price = indicative_settle_price

    @property
    def settled_price(self):
        """
        Gets the settled_price of this Instrument.


        :return: The settled_price of this Instrument.
        :rtype: float
        """
        return self._settled_price

    @settled_price.setter
    def settled_price(self, settled_price):
        """
        Sets the settled_price of this Instrument.


        :param settled_price: The settled_price of this Instrument.
        :type: float
        """
        self._settled_price = settled_price

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Instrument.


        :return: The timestamp of this Instrument.
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Instrument.


        :param timestamp: The timestamp of this Instrument.
        :type: date
        """
        self._timestamp = timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

