# coding: utf-8

"""
    BitMEX API

    REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Announcement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, link=None, title=None, content=None, date=None):
        """
        Announcement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'float',
            'link': 'str',
            'title': 'str',
            'content': 'str',
            'date': 'date'
        }

        self.attribute_map = {
            'id': 'id',
            'link': 'link',
            'title': 'title',
            'content': 'content',
            'date': 'date'
        }

        self._id = id
        self._link = link
        self._title = title
        self._content = content
        self._date = date

    @property
    def id(self):
        """
        Gets the id of this Announcement.


        :return: The id of this Announcement.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Announcement.


        :param id: The id of this Announcement.
        :type: float
        """

        self._id = id

    @property
    def link(self):
        """
        Gets the link of this Announcement.


        :return: The link of this Announcement.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this Announcement.


        :param link: The link of this Announcement.
        :type: str
        """

        self._link = link

    @property
    def title(self):
        """
        Gets the title of this Announcement.


        :return: The title of this Announcement.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Announcement.


        :param title: The title of this Announcement.
        :type: str
        """

        self._title = title

    @property
    def content(self):
        """
        Gets the content of this Announcement.


        :return: The content of this Announcement.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this Announcement.


        :param content: The content of this Announcement.
        :type: str
        """

        self._content = content

    @property
    def date(self):
        """
        Gets the date of this Announcement.


        :return: The date of this Announcement.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this Announcement.


        :param date: The date of this Announcement.
        :type: date
        """

        self._date = date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
