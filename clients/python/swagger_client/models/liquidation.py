# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Liquidation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Liquidation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order_id': 'str',
            'symbol': 'str',
            'side': 'str',
            'price': 'float',
            'leaves_qty': 'float'
        }

        self.attribute_map = {
            'order_id': 'orderID',
            'symbol': 'symbol',
            'side': 'side',
            'price': 'price',
            'leaves_qty': 'leavesQty'
        }

        self._order_id = None
        self._symbol = None
        self._side = None
        self._price = None
        self._leaves_qty = None

    @property
    def order_id(self):
        """
        Gets the order_id of this Liquidation.


        :return: The order_id of this Liquidation.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this Liquidation.


        :param order_id: The order_id of this Liquidation.
        :type: str
        """
        self._order_id = order_id

    @property
    def symbol(self):
        """
        Gets the symbol of this Liquidation.


        :return: The symbol of this Liquidation.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """
        Sets the symbol of this Liquidation.


        :param symbol: The symbol of this Liquidation.
        :type: str
        """
        self._symbol = symbol

    @property
    def side(self):
        """
        Gets the side of this Liquidation.


        :return: The side of this Liquidation.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """
        Sets the side of this Liquidation.


        :param side: The side of this Liquidation.
        :type: str
        """
        self._side = side

    @property
    def price(self):
        """
        Gets the price of this Liquidation.


        :return: The price of this Liquidation.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this Liquidation.


        :param price: The price of this Liquidation.
        :type: float
        """
        self._price = price

    @property
    def leaves_qty(self):
        """
        Gets the leaves_qty of this Liquidation.


        :return: The leaves_qty of this Liquidation.
        :rtype: float
        """
        return self._leaves_qty

    @leaves_qty.setter
    def leaves_qty(self, leaves_qty):
        """
        Sets the leaves_qty of this Liquidation.


        :param leaves_qty: The leaves_qty of this Liquidation.
        :type: float
        """
        self._leaves_qty = leaves_qty

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

