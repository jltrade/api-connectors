# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Execution(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Execution - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'exec_id': 'str',
            'order_id': 'str',
            'cl_ord_id': 'str',
            'cl_ord_link_id': 'str',
            'account': 'float',
            'symbol': 'str',
            'side': 'str',
            'last_qty': 'float',
            'last_px': 'float',
            'underlying_last_px': 'float',
            'last_mkt': 'str',
            'last_liquidity_ind': 'str',
            'simple_order_qty': 'float',
            'order_qty': 'float',
            'price': 'float',
            'display_qty': 'float',
            'stop_px': 'float',
            'peg_offset_value': 'float',
            'peg_price_type': 'str',
            'currency': 'str',
            'settl_currency': 'str',
            'exec_type': 'str',
            'ord_type': 'str',
            'time_in_force': 'str',
            'exec_inst': 'str',
            'contingency_type': 'str',
            'ex_destination': 'str',
            'ord_status': 'str',
            'triggered': 'str',
            'working_indicator': 'bool',
            'ord_rej_reason': 'str',
            'simple_leaves_qty': 'float',
            'leaves_qty': 'float',
            'simple_cum_qty': 'float',
            'cum_qty': 'float',
            'avg_px': 'float',
            'commission': 'float',
            'trade_publish_indicator': 'str',
            'multi_leg_reporting_type': 'str',
            'text': 'str',
            'trd_match_id': 'str',
            'exec_cost': 'float',
            'exec_comm': 'float',
            'home_notional': 'float',
            'foreign_notional': 'float',
            'transact_time': 'date',
            'timestamp': 'date'
        }

        self.attribute_map = {
            'exec_id': 'execID',
            'order_id': 'orderID',
            'cl_ord_id': 'clOrdID',
            'cl_ord_link_id': 'clOrdLinkID',
            'account': 'account',
            'symbol': 'symbol',
            'side': 'side',
            'last_qty': 'lastQty',
            'last_px': 'lastPx',
            'underlying_last_px': 'underlyingLastPx',
            'last_mkt': 'lastMkt',
            'last_liquidity_ind': 'lastLiquidityInd',
            'simple_order_qty': 'simpleOrderQty',
            'order_qty': 'orderQty',
            'price': 'price',
            'display_qty': 'displayQty',
            'stop_px': 'stopPx',
            'peg_offset_value': 'pegOffsetValue',
            'peg_price_type': 'pegPriceType',
            'currency': 'currency',
            'settl_currency': 'settlCurrency',
            'exec_type': 'execType',
            'ord_type': 'ordType',
            'time_in_force': 'timeInForce',
            'exec_inst': 'execInst',
            'contingency_type': 'contingencyType',
            'ex_destination': 'exDestination',
            'ord_status': 'ordStatus',
            'triggered': 'triggered',
            'working_indicator': 'workingIndicator',
            'ord_rej_reason': 'ordRejReason',
            'simple_leaves_qty': 'simpleLeavesQty',
            'leaves_qty': 'leavesQty',
            'simple_cum_qty': 'simpleCumQty',
            'cum_qty': 'cumQty',
            'avg_px': 'avgPx',
            'commission': 'commission',
            'trade_publish_indicator': 'tradePublishIndicator',
            'multi_leg_reporting_type': 'multiLegReportingType',
            'text': 'text',
            'trd_match_id': 'trdMatchID',
            'exec_cost': 'execCost',
            'exec_comm': 'execComm',
            'home_notional': 'homeNotional',
            'foreign_notional': 'foreignNotional',
            'transact_time': 'transactTime',
            'timestamp': 'timestamp'
        }

        self._exec_id = None
        self._order_id = None
        self._cl_ord_id = None
        self._cl_ord_link_id = None
        self._account = None
        self._symbol = None
        self._side = None
        self._last_qty = None
        self._last_px = None
        self._underlying_last_px = None
        self._last_mkt = None
        self._last_liquidity_ind = None
        self._simple_order_qty = None
        self._order_qty = None
        self._price = None
        self._display_qty = None
        self._stop_px = None
        self._peg_offset_value = None
        self._peg_price_type = None
        self._currency = None
        self._settl_currency = None
        self._exec_type = None
        self._ord_type = None
        self._time_in_force = None
        self._exec_inst = None
        self._contingency_type = None
        self._ex_destination = None
        self._ord_status = None
        self._triggered = None
        self._working_indicator = None
        self._ord_rej_reason = None
        self._simple_leaves_qty = None
        self._leaves_qty = None
        self._simple_cum_qty = None
        self._cum_qty = None
        self._avg_px = None
        self._commission = None
        self._trade_publish_indicator = None
        self._multi_leg_reporting_type = None
        self._text = None
        self._trd_match_id = None
        self._exec_cost = None
        self._exec_comm = None
        self._home_notional = None
        self._foreign_notional = None
        self._transact_time = None
        self._timestamp = None

    @property
    def exec_id(self):
        """
        Gets the exec_id of this Execution.


        :return: The exec_id of this Execution.
        :rtype: str
        """
        return self._exec_id

    @exec_id.setter
    def exec_id(self, exec_id):
        """
        Sets the exec_id of this Execution.


        :param exec_id: The exec_id of this Execution.
        :type: str
        """
        self._exec_id = exec_id

    @property
    def order_id(self):
        """
        Gets the order_id of this Execution.


        :return: The order_id of this Execution.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this Execution.


        :param order_id: The order_id of this Execution.
        :type: str
        """
        self._order_id = order_id

    @property
    def cl_ord_id(self):
        """
        Gets the cl_ord_id of this Execution.


        :return: The cl_ord_id of this Execution.
        :rtype: str
        """
        return self._cl_ord_id

    @cl_ord_id.setter
    def cl_ord_id(self, cl_ord_id):
        """
        Sets the cl_ord_id of this Execution.


        :param cl_ord_id: The cl_ord_id of this Execution.
        :type: str
        """
        self._cl_ord_id = cl_ord_id

    @property
    def cl_ord_link_id(self):
        """
        Gets the cl_ord_link_id of this Execution.


        :return: The cl_ord_link_id of this Execution.
        :rtype: str
        """
        return self._cl_ord_link_id

    @cl_ord_link_id.setter
    def cl_ord_link_id(self, cl_ord_link_id):
        """
        Sets the cl_ord_link_id of this Execution.


        :param cl_ord_link_id: The cl_ord_link_id of this Execution.
        :type: str
        """
        self._cl_ord_link_id = cl_ord_link_id

    @property
    def account(self):
        """
        Gets the account of this Execution.


        :return: The account of this Execution.
        :rtype: float
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this Execution.


        :param account: The account of this Execution.
        :type: float
        """
        self._account = account

    @property
    def symbol(self):
        """
        Gets the symbol of this Execution.


        :return: The symbol of this Execution.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """
        Sets the symbol of this Execution.


        :param symbol: The symbol of this Execution.
        :type: str
        """
        self._symbol = symbol

    @property
    def side(self):
        """
        Gets the side of this Execution.


        :return: The side of this Execution.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """
        Sets the side of this Execution.


        :param side: The side of this Execution.
        :type: str
        """
        self._side = side

    @property
    def last_qty(self):
        """
        Gets the last_qty of this Execution.


        :return: The last_qty of this Execution.
        :rtype: float
        """
        return self._last_qty

    @last_qty.setter
    def last_qty(self, last_qty):
        """
        Sets the last_qty of this Execution.


        :param last_qty: The last_qty of this Execution.
        :type: float
        """
        self._last_qty = last_qty

    @property
    def last_px(self):
        """
        Gets the last_px of this Execution.


        :return: The last_px of this Execution.
        :rtype: float
        """
        return self._last_px

    @last_px.setter
    def last_px(self, last_px):
        """
        Sets the last_px of this Execution.


        :param last_px: The last_px of this Execution.
        :type: float
        """
        self._last_px = last_px

    @property
    def underlying_last_px(self):
        """
        Gets the underlying_last_px of this Execution.


        :return: The underlying_last_px of this Execution.
        :rtype: float
        """
        return self._underlying_last_px

    @underlying_last_px.setter
    def underlying_last_px(self, underlying_last_px):
        """
        Sets the underlying_last_px of this Execution.


        :param underlying_last_px: The underlying_last_px of this Execution.
        :type: float
        """
        self._underlying_last_px = underlying_last_px

    @property
    def last_mkt(self):
        """
        Gets the last_mkt of this Execution.


        :return: The last_mkt of this Execution.
        :rtype: str
        """
        return self._last_mkt

    @last_mkt.setter
    def last_mkt(self, last_mkt):
        """
        Sets the last_mkt of this Execution.


        :param last_mkt: The last_mkt of this Execution.
        :type: str
        """
        self._last_mkt = last_mkt

    @property
    def last_liquidity_ind(self):
        """
        Gets the last_liquidity_ind of this Execution.


        :return: The last_liquidity_ind of this Execution.
        :rtype: str
        """
        return self._last_liquidity_ind

    @last_liquidity_ind.setter
    def last_liquidity_ind(self, last_liquidity_ind):
        """
        Sets the last_liquidity_ind of this Execution.


        :param last_liquidity_ind: The last_liquidity_ind of this Execution.
        :type: str
        """
        self._last_liquidity_ind = last_liquidity_ind

    @property
    def simple_order_qty(self):
        """
        Gets the simple_order_qty of this Execution.


        :return: The simple_order_qty of this Execution.
        :rtype: float
        """
        return self._simple_order_qty

    @simple_order_qty.setter
    def simple_order_qty(self, simple_order_qty):
        """
        Sets the simple_order_qty of this Execution.


        :param simple_order_qty: The simple_order_qty of this Execution.
        :type: float
        """
        self._simple_order_qty = simple_order_qty

    @property
    def order_qty(self):
        """
        Gets the order_qty of this Execution.


        :return: The order_qty of this Execution.
        :rtype: float
        """
        return self._order_qty

    @order_qty.setter
    def order_qty(self, order_qty):
        """
        Sets the order_qty of this Execution.


        :param order_qty: The order_qty of this Execution.
        :type: float
        """
        self._order_qty = order_qty

    @property
    def price(self):
        """
        Gets the price of this Execution.


        :return: The price of this Execution.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this Execution.


        :param price: The price of this Execution.
        :type: float
        """
        self._price = price

    @property
    def display_qty(self):
        """
        Gets the display_qty of this Execution.


        :return: The display_qty of this Execution.
        :rtype: float
        """
        return self._display_qty

    @display_qty.setter
    def display_qty(self, display_qty):
        """
        Sets the display_qty of this Execution.


        :param display_qty: The display_qty of this Execution.
        :type: float
        """
        self._display_qty = display_qty

    @property
    def stop_px(self):
        """
        Gets the stop_px of this Execution.


        :return: The stop_px of this Execution.
        :rtype: float
        """
        return self._stop_px

    @stop_px.setter
    def stop_px(self, stop_px):
        """
        Sets the stop_px of this Execution.


        :param stop_px: The stop_px of this Execution.
        :type: float
        """
        self._stop_px = stop_px

    @property
    def peg_offset_value(self):
        """
        Gets the peg_offset_value of this Execution.


        :return: The peg_offset_value of this Execution.
        :rtype: float
        """
        return self._peg_offset_value

    @peg_offset_value.setter
    def peg_offset_value(self, peg_offset_value):
        """
        Sets the peg_offset_value of this Execution.


        :param peg_offset_value: The peg_offset_value of this Execution.
        :type: float
        """
        self._peg_offset_value = peg_offset_value

    @property
    def peg_price_type(self):
        """
        Gets the peg_price_type of this Execution.


        :return: The peg_price_type of this Execution.
        :rtype: str
        """
        return self._peg_price_type

    @peg_price_type.setter
    def peg_price_type(self, peg_price_type):
        """
        Sets the peg_price_type of this Execution.


        :param peg_price_type: The peg_price_type of this Execution.
        :type: str
        """
        self._peg_price_type = peg_price_type

    @property
    def currency(self):
        """
        Gets the currency of this Execution.


        :return: The currency of this Execution.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Execution.


        :param currency: The currency of this Execution.
        :type: str
        """
        self._currency = currency

    @property
    def settl_currency(self):
        """
        Gets the settl_currency of this Execution.


        :return: The settl_currency of this Execution.
        :rtype: str
        """
        return self._settl_currency

    @settl_currency.setter
    def settl_currency(self, settl_currency):
        """
        Sets the settl_currency of this Execution.


        :param settl_currency: The settl_currency of this Execution.
        :type: str
        """
        self._settl_currency = settl_currency

    @property
    def exec_type(self):
        """
        Gets the exec_type of this Execution.


        :return: The exec_type of this Execution.
        :rtype: str
        """
        return self._exec_type

    @exec_type.setter
    def exec_type(self, exec_type):
        """
        Sets the exec_type of this Execution.


        :param exec_type: The exec_type of this Execution.
        :type: str
        """
        self._exec_type = exec_type

    @property
    def ord_type(self):
        """
        Gets the ord_type of this Execution.


        :return: The ord_type of this Execution.
        :rtype: str
        """
        return self._ord_type

    @ord_type.setter
    def ord_type(self, ord_type):
        """
        Sets the ord_type of this Execution.


        :param ord_type: The ord_type of this Execution.
        :type: str
        """
        self._ord_type = ord_type

    @property
    def time_in_force(self):
        """
        Gets the time_in_force of this Execution.


        :return: The time_in_force of this Execution.
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """
        Sets the time_in_force of this Execution.


        :param time_in_force: The time_in_force of this Execution.
        :type: str
        """
        self._time_in_force = time_in_force

    @property
    def exec_inst(self):
        """
        Gets the exec_inst of this Execution.


        :return: The exec_inst of this Execution.
        :rtype: str
        """
        return self._exec_inst

    @exec_inst.setter
    def exec_inst(self, exec_inst):
        """
        Sets the exec_inst of this Execution.


        :param exec_inst: The exec_inst of this Execution.
        :type: str
        """
        self._exec_inst = exec_inst

    @property
    def contingency_type(self):
        """
        Gets the contingency_type of this Execution.


        :return: The contingency_type of this Execution.
        :rtype: str
        """
        return self._contingency_type

    @contingency_type.setter
    def contingency_type(self, contingency_type):
        """
        Sets the contingency_type of this Execution.


        :param contingency_type: The contingency_type of this Execution.
        :type: str
        """
        self._contingency_type = contingency_type

    @property
    def ex_destination(self):
        """
        Gets the ex_destination of this Execution.


        :return: The ex_destination of this Execution.
        :rtype: str
        """
        return self._ex_destination

    @ex_destination.setter
    def ex_destination(self, ex_destination):
        """
        Sets the ex_destination of this Execution.


        :param ex_destination: The ex_destination of this Execution.
        :type: str
        """
        self._ex_destination = ex_destination

    @property
    def ord_status(self):
        """
        Gets the ord_status of this Execution.


        :return: The ord_status of this Execution.
        :rtype: str
        """
        return self._ord_status

    @ord_status.setter
    def ord_status(self, ord_status):
        """
        Sets the ord_status of this Execution.


        :param ord_status: The ord_status of this Execution.
        :type: str
        """
        self._ord_status = ord_status

    @property
    def triggered(self):
        """
        Gets the triggered of this Execution.


        :return: The triggered of this Execution.
        :rtype: str
        """
        return self._triggered

    @triggered.setter
    def triggered(self, triggered):
        """
        Sets the triggered of this Execution.


        :param triggered: The triggered of this Execution.
        :type: str
        """
        self._triggered = triggered

    @property
    def working_indicator(self):
        """
        Gets the working_indicator of this Execution.


        :return: The working_indicator of this Execution.
        :rtype: bool
        """
        return self._working_indicator

    @working_indicator.setter
    def working_indicator(self, working_indicator):
        """
        Sets the working_indicator of this Execution.


        :param working_indicator: The working_indicator of this Execution.
        :type: bool
        """
        self._working_indicator = working_indicator

    @property
    def ord_rej_reason(self):
        """
        Gets the ord_rej_reason of this Execution.


        :return: The ord_rej_reason of this Execution.
        :rtype: str
        """
        return self._ord_rej_reason

    @ord_rej_reason.setter
    def ord_rej_reason(self, ord_rej_reason):
        """
        Sets the ord_rej_reason of this Execution.


        :param ord_rej_reason: The ord_rej_reason of this Execution.
        :type: str
        """
        self._ord_rej_reason = ord_rej_reason

    @property
    def simple_leaves_qty(self):
        """
        Gets the simple_leaves_qty of this Execution.


        :return: The simple_leaves_qty of this Execution.
        :rtype: float
        """
        return self._simple_leaves_qty

    @simple_leaves_qty.setter
    def simple_leaves_qty(self, simple_leaves_qty):
        """
        Sets the simple_leaves_qty of this Execution.


        :param simple_leaves_qty: The simple_leaves_qty of this Execution.
        :type: float
        """
        self._simple_leaves_qty = simple_leaves_qty

    @property
    def leaves_qty(self):
        """
        Gets the leaves_qty of this Execution.


        :return: The leaves_qty of this Execution.
        :rtype: float
        """
        return self._leaves_qty

    @leaves_qty.setter
    def leaves_qty(self, leaves_qty):
        """
        Sets the leaves_qty of this Execution.


        :param leaves_qty: The leaves_qty of this Execution.
        :type: float
        """
        self._leaves_qty = leaves_qty

    @property
    def simple_cum_qty(self):
        """
        Gets the simple_cum_qty of this Execution.


        :return: The simple_cum_qty of this Execution.
        :rtype: float
        """
        return self._simple_cum_qty

    @simple_cum_qty.setter
    def simple_cum_qty(self, simple_cum_qty):
        """
        Sets the simple_cum_qty of this Execution.


        :param simple_cum_qty: The simple_cum_qty of this Execution.
        :type: float
        """
        self._simple_cum_qty = simple_cum_qty

    @property
    def cum_qty(self):
        """
        Gets the cum_qty of this Execution.


        :return: The cum_qty of this Execution.
        :rtype: float
        """
        return self._cum_qty

    @cum_qty.setter
    def cum_qty(self, cum_qty):
        """
        Sets the cum_qty of this Execution.


        :param cum_qty: The cum_qty of this Execution.
        :type: float
        """
        self._cum_qty = cum_qty

    @property
    def avg_px(self):
        """
        Gets the avg_px of this Execution.


        :return: The avg_px of this Execution.
        :rtype: float
        """
        return self._avg_px

    @avg_px.setter
    def avg_px(self, avg_px):
        """
        Sets the avg_px of this Execution.


        :param avg_px: The avg_px of this Execution.
        :type: float
        """
        self._avg_px = avg_px

    @property
    def commission(self):
        """
        Gets the commission of this Execution.


        :return: The commission of this Execution.
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """
        Sets the commission of this Execution.


        :param commission: The commission of this Execution.
        :type: float
        """
        self._commission = commission

    @property
    def trade_publish_indicator(self):
        """
        Gets the trade_publish_indicator of this Execution.


        :return: The trade_publish_indicator of this Execution.
        :rtype: str
        """
        return self._trade_publish_indicator

    @trade_publish_indicator.setter
    def trade_publish_indicator(self, trade_publish_indicator):
        """
        Sets the trade_publish_indicator of this Execution.


        :param trade_publish_indicator: The trade_publish_indicator of this Execution.
        :type: str
        """
        self._trade_publish_indicator = trade_publish_indicator

    @property
    def multi_leg_reporting_type(self):
        """
        Gets the multi_leg_reporting_type of this Execution.


        :return: The multi_leg_reporting_type of this Execution.
        :rtype: str
        """
        return self._multi_leg_reporting_type

    @multi_leg_reporting_type.setter
    def multi_leg_reporting_type(self, multi_leg_reporting_type):
        """
        Sets the multi_leg_reporting_type of this Execution.


        :param multi_leg_reporting_type: The multi_leg_reporting_type of this Execution.
        :type: str
        """
        self._multi_leg_reporting_type = multi_leg_reporting_type

    @property
    def text(self):
        """
        Gets the text of this Execution.


        :return: The text of this Execution.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this Execution.


        :param text: The text of this Execution.
        :type: str
        """
        self._text = text

    @property
    def trd_match_id(self):
        """
        Gets the trd_match_id of this Execution.


        :return: The trd_match_id of this Execution.
        :rtype: str
        """
        return self._trd_match_id

    @trd_match_id.setter
    def trd_match_id(self, trd_match_id):
        """
        Sets the trd_match_id of this Execution.


        :param trd_match_id: The trd_match_id of this Execution.
        :type: str
        """
        self._trd_match_id = trd_match_id

    @property
    def exec_cost(self):
        """
        Gets the exec_cost of this Execution.


        :return: The exec_cost of this Execution.
        :rtype: float
        """
        return self._exec_cost

    @exec_cost.setter
    def exec_cost(self, exec_cost):
        """
        Sets the exec_cost of this Execution.


        :param exec_cost: The exec_cost of this Execution.
        :type: float
        """
        self._exec_cost = exec_cost

    @property
    def exec_comm(self):
        """
        Gets the exec_comm of this Execution.


        :return: The exec_comm of this Execution.
        :rtype: float
        """
        return self._exec_comm

    @exec_comm.setter
    def exec_comm(self, exec_comm):
        """
        Sets the exec_comm of this Execution.


        :param exec_comm: The exec_comm of this Execution.
        :type: float
        """
        self._exec_comm = exec_comm

    @property
    def home_notional(self):
        """
        Gets the home_notional of this Execution.


        :return: The home_notional of this Execution.
        :rtype: float
        """
        return self._home_notional

    @home_notional.setter
    def home_notional(self, home_notional):
        """
        Sets the home_notional of this Execution.


        :param home_notional: The home_notional of this Execution.
        :type: float
        """
        self._home_notional = home_notional

    @property
    def foreign_notional(self):
        """
        Gets the foreign_notional of this Execution.


        :return: The foreign_notional of this Execution.
        :rtype: float
        """
        return self._foreign_notional

    @foreign_notional.setter
    def foreign_notional(self, foreign_notional):
        """
        Sets the foreign_notional of this Execution.


        :param foreign_notional: The foreign_notional of this Execution.
        :type: float
        """
        self._foreign_notional = foreign_notional

    @property
    def transact_time(self):
        """
        Gets the transact_time of this Execution.


        :return: The transact_time of this Execution.
        :rtype: date
        """
        return self._transact_time

    @transact_time.setter
    def transact_time(self, transact_time):
        """
        Sets the transact_time of this Execution.


        :param transact_time: The transact_time of this Execution.
        :type: date
        """
        self._transact_time = transact_time

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Execution.


        :return: The timestamp of this Execution.
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Execution.


        :param timestamp: The timestamp of this Execution.
        :type: date
        """
        self._timestamp = timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

