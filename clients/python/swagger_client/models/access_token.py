# coding: utf-8

"""
    BitMEX API

    REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AccessToken(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, ttl=1209600.0, created=None, user_id=None):
        """
        AccessToken - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'ttl': 'float',
            'created': 'date',
            'user_id': 'float'
        }

        self.attribute_map = {
            'id': 'id',
            'ttl': 'ttl',
            'created': 'created',
            'user_id': 'userId'
        }

        self._id = id
        self._ttl = ttl
        self._created = created
        self._user_id = user_id

    @property
    def id(self):
        """
        Gets the id of this AccessToken.


        :return: The id of this AccessToken.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AccessToken.


        :param id: The id of this AccessToken.
        :type: str
        """

        self._id = id

    @property
    def ttl(self):
        """
        Gets the ttl of this AccessToken.
        time to live in seconds (2 weeks by default)

        :return: The ttl of this AccessToken.
        :rtype: float
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """
        Sets the ttl of this AccessToken.
        time to live in seconds (2 weeks by default)

        :param ttl: The ttl of this AccessToken.
        :type: float
        """

        self._ttl = ttl

    @property
    def created(self):
        """
        Gets the created of this AccessToken.


        :return: The created of this AccessToken.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this AccessToken.


        :param created: The created of this AccessToken.
        :type: date
        """

        self._created = created

    @property
    def user_id(self):
        """
        Gets the user_id of this AccessToken.


        :return: The user_id of this AccessToken.
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this AccessToken.


        :param user_id: The user_id of this AccessToken.
        :type: float
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
