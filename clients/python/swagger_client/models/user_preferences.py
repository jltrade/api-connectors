# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class UserPreferences(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UserPreferences - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'announcements_last_seen': 'date',
            'color_theme': 'str',
            'currency': 'str',
            'debug': 'bool',
            'disable_emails': 'list[str]',
            'hide_confirm_dialogs': 'list[str]',
            'hide_connection_modal': 'bool',
            'hide_from_leaderboard': 'bool',
            'hide_name_from_leaderboard': 'bool',
            'hide_notifications': 'list[str]',
            'hide_phone_confirm': 'bool',
            'locale': 'str',
            'msgs_seen': 'list[str]',
            'order_book_binning': 'float',
            'order_book_type': 'str',
            'order_controls_plus_minus': 'bool',
            'sounds': 'list[str]',
            'strict_ip_check': 'bool',
            'strict_timeout': 'bool',
            'ticker_group': 'str',
            'ticker_pinned': 'bool',
            'trade_layout': 'str'
        }

        self.attribute_map = {
            'announcements_last_seen': 'announcementsLastSeen',
            'color_theme': 'colorTheme',
            'currency': 'currency',
            'debug': 'debug',
            'disable_emails': 'disableEmails',
            'hide_confirm_dialogs': 'hideConfirmDialogs',
            'hide_connection_modal': 'hideConnectionModal',
            'hide_from_leaderboard': 'hideFromLeaderboard',
            'hide_name_from_leaderboard': 'hideNameFromLeaderboard',
            'hide_notifications': 'hideNotifications',
            'hide_phone_confirm': 'hidePhoneConfirm',
            'locale': 'locale',
            'msgs_seen': 'msgsSeen',
            'order_book_binning': 'orderBookBinning',
            'order_book_type': 'orderBookType',
            'order_controls_plus_minus': 'orderControlsPlusMinus',
            'sounds': 'sounds',
            'strict_ip_check': 'strictIPCheck',
            'strict_timeout': 'strictTimeout',
            'ticker_group': 'tickerGroup',
            'ticker_pinned': 'tickerPinned',
            'trade_layout': 'tradeLayout'
        }

        self._announcements_last_seen = None
        self._color_theme = None
        self._currency = None
        self._debug = None
        self._disable_emails = None
        self._hide_confirm_dialogs = None
        self._hide_connection_modal = None
        self._hide_from_leaderboard = None
        self._hide_name_from_leaderboard = None
        self._hide_notifications = None
        self._hide_phone_confirm = None
        self._locale = None
        self._msgs_seen = None
        self._order_book_binning = None
        self._order_book_type = None
        self._order_controls_plus_minus = None
        self._sounds = None
        self._strict_ip_check = None
        self._strict_timeout = None
        self._ticker_group = None
        self._ticker_pinned = None
        self._trade_layout = None

    @property
    def announcements_last_seen(self):
        """
        Gets the announcements_last_seen of this UserPreferences.


        :return: The announcements_last_seen of this UserPreferences.
        :rtype: date
        """
        return self._announcements_last_seen

    @announcements_last_seen.setter
    def announcements_last_seen(self, announcements_last_seen):
        """
        Sets the announcements_last_seen of this UserPreferences.


        :param announcements_last_seen: The announcements_last_seen of this UserPreferences.
        :type: date
        """
        self._announcements_last_seen = announcements_last_seen

    @property
    def color_theme(self):
        """
        Gets the color_theme of this UserPreferences.


        :return: The color_theme of this UserPreferences.
        :rtype: str
        """
        return self._color_theme

    @color_theme.setter
    def color_theme(self, color_theme):
        """
        Sets the color_theme of this UserPreferences.


        :param color_theme: The color_theme of this UserPreferences.
        :type: str
        """
        self._color_theme = color_theme

    @property
    def currency(self):
        """
        Gets the currency of this UserPreferences.


        :return: The currency of this UserPreferences.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this UserPreferences.


        :param currency: The currency of this UserPreferences.
        :type: str
        """
        self._currency = currency

    @property
    def debug(self):
        """
        Gets the debug of this UserPreferences.


        :return: The debug of this UserPreferences.
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """
        Sets the debug of this UserPreferences.


        :param debug: The debug of this UserPreferences.
        :type: bool
        """
        self._debug = debug

    @property
    def disable_emails(self):
        """
        Gets the disable_emails of this UserPreferences.


        :return: The disable_emails of this UserPreferences.
        :rtype: list[str]
        """
        return self._disable_emails

    @disable_emails.setter
    def disable_emails(self, disable_emails):
        """
        Sets the disable_emails of this UserPreferences.


        :param disable_emails: The disable_emails of this UserPreferences.
        :type: list[str]
        """
        self._disable_emails = disable_emails

    @property
    def hide_confirm_dialogs(self):
        """
        Gets the hide_confirm_dialogs of this UserPreferences.


        :return: The hide_confirm_dialogs of this UserPreferences.
        :rtype: list[str]
        """
        return self._hide_confirm_dialogs

    @hide_confirm_dialogs.setter
    def hide_confirm_dialogs(self, hide_confirm_dialogs):
        """
        Sets the hide_confirm_dialogs of this UserPreferences.


        :param hide_confirm_dialogs: The hide_confirm_dialogs of this UserPreferences.
        :type: list[str]
        """
        self._hide_confirm_dialogs = hide_confirm_dialogs

    @property
    def hide_connection_modal(self):
        """
        Gets the hide_connection_modal of this UserPreferences.


        :return: The hide_connection_modal of this UserPreferences.
        :rtype: bool
        """
        return self._hide_connection_modal

    @hide_connection_modal.setter
    def hide_connection_modal(self, hide_connection_modal):
        """
        Sets the hide_connection_modal of this UserPreferences.


        :param hide_connection_modal: The hide_connection_modal of this UserPreferences.
        :type: bool
        """
        self._hide_connection_modal = hide_connection_modal

    @property
    def hide_from_leaderboard(self):
        """
        Gets the hide_from_leaderboard of this UserPreferences.


        :return: The hide_from_leaderboard of this UserPreferences.
        :rtype: bool
        """
        return self._hide_from_leaderboard

    @hide_from_leaderboard.setter
    def hide_from_leaderboard(self, hide_from_leaderboard):
        """
        Sets the hide_from_leaderboard of this UserPreferences.


        :param hide_from_leaderboard: The hide_from_leaderboard of this UserPreferences.
        :type: bool
        """
        self._hide_from_leaderboard = hide_from_leaderboard

    @property
    def hide_name_from_leaderboard(self):
        """
        Gets the hide_name_from_leaderboard of this UserPreferences.


        :return: The hide_name_from_leaderboard of this UserPreferences.
        :rtype: bool
        """
        return self._hide_name_from_leaderboard

    @hide_name_from_leaderboard.setter
    def hide_name_from_leaderboard(self, hide_name_from_leaderboard):
        """
        Sets the hide_name_from_leaderboard of this UserPreferences.


        :param hide_name_from_leaderboard: The hide_name_from_leaderboard of this UserPreferences.
        :type: bool
        """
        self._hide_name_from_leaderboard = hide_name_from_leaderboard

    @property
    def hide_notifications(self):
        """
        Gets the hide_notifications of this UserPreferences.


        :return: The hide_notifications of this UserPreferences.
        :rtype: list[str]
        """
        return self._hide_notifications

    @hide_notifications.setter
    def hide_notifications(self, hide_notifications):
        """
        Sets the hide_notifications of this UserPreferences.


        :param hide_notifications: The hide_notifications of this UserPreferences.
        :type: list[str]
        """
        self._hide_notifications = hide_notifications

    @property
    def hide_phone_confirm(self):
        """
        Gets the hide_phone_confirm of this UserPreferences.


        :return: The hide_phone_confirm of this UserPreferences.
        :rtype: bool
        """
        return self._hide_phone_confirm

    @hide_phone_confirm.setter
    def hide_phone_confirm(self, hide_phone_confirm):
        """
        Sets the hide_phone_confirm of this UserPreferences.


        :param hide_phone_confirm: The hide_phone_confirm of this UserPreferences.
        :type: bool
        """
        self._hide_phone_confirm = hide_phone_confirm

    @property
    def locale(self):
        """
        Gets the locale of this UserPreferences.


        :return: The locale of this UserPreferences.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """
        Sets the locale of this UserPreferences.


        :param locale: The locale of this UserPreferences.
        :type: str
        """
        self._locale = locale

    @property
    def msgs_seen(self):
        """
        Gets the msgs_seen of this UserPreferences.


        :return: The msgs_seen of this UserPreferences.
        :rtype: list[str]
        """
        return self._msgs_seen

    @msgs_seen.setter
    def msgs_seen(self, msgs_seen):
        """
        Sets the msgs_seen of this UserPreferences.


        :param msgs_seen: The msgs_seen of this UserPreferences.
        :type: list[str]
        """
        self._msgs_seen = msgs_seen

    @property
    def order_book_binning(self):
        """
        Gets the order_book_binning of this UserPreferences.


        :return: The order_book_binning of this UserPreferences.
        :rtype: float
        """
        return self._order_book_binning

    @order_book_binning.setter
    def order_book_binning(self, order_book_binning):
        """
        Sets the order_book_binning of this UserPreferences.


        :param order_book_binning: The order_book_binning of this UserPreferences.
        :type: float
        """
        self._order_book_binning = order_book_binning

    @property
    def order_book_type(self):
        """
        Gets the order_book_type of this UserPreferences.


        :return: The order_book_type of this UserPreferences.
        :rtype: str
        """
        return self._order_book_type

    @order_book_type.setter
    def order_book_type(self, order_book_type):
        """
        Sets the order_book_type of this UserPreferences.


        :param order_book_type: The order_book_type of this UserPreferences.
        :type: str
        """
        self._order_book_type = order_book_type

    @property
    def order_controls_plus_minus(self):
        """
        Gets the order_controls_plus_minus of this UserPreferences.


        :return: The order_controls_plus_minus of this UserPreferences.
        :rtype: bool
        """
        return self._order_controls_plus_minus

    @order_controls_plus_minus.setter
    def order_controls_plus_minus(self, order_controls_plus_minus):
        """
        Sets the order_controls_plus_minus of this UserPreferences.


        :param order_controls_plus_minus: The order_controls_plus_minus of this UserPreferences.
        :type: bool
        """
        self._order_controls_plus_minus = order_controls_plus_minus

    @property
    def sounds(self):
        """
        Gets the sounds of this UserPreferences.


        :return: The sounds of this UserPreferences.
        :rtype: list[str]
        """
        return self._sounds

    @sounds.setter
    def sounds(self, sounds):
        """
        Sets the sounds of this UserPreferences.


        :param sounds: The sounds of this UserPreferences.
        :type: list[str]
        """
        self._sounds = sounds

    @property
    def strict_ip_check(self):
        """
        Gets the strict_ip_check of this UserPreferences.


        :return: The strict_ip_check of this UserPreferences.
        :rtype: bool
        """
        return self._strict_ip_check

    @strict_ip_check.setter
    def strict_ip_check(self, strict_ip_check):
        """
        Sets the strict_ip_check of this UserPreferences.


        :param strict_ip_check: The strict_ip_check of this UserPreferences.
        :type: bool
        """
        self._strict_ip_check = strict_ip_check

    @property
    def strict_timeout(self):
        """
        Gets the strict_timeout of this UserPreferences.


        :return: The strict_timeout of this UserPreferences.
        :rtype: bool
        """
        return self._strict_timeout

    @strict_timeout.setter
    def strict_timeout(self, strict_timeout):
        """
        Sets the strict_timeout of this UserPreferences.


        :param strict_timeout: The strict_timeout of this UserPreferences.
        :type: bool
        """
        self._strict_timeout = strict_timeout

    @property
    def ticker_group(self):
        """
        Gets the ticker_group of this UserPreferences.


        :return: The ticker_group of this UserPreferences.
        :rtype: str
        """
        return self._ticker_group

    @ticker_group.setter
    def ticker_group(self, ticker_group):
        """
        Sets the ticker_group of this UserPreferences.


        :param ticker_group: The ticker_group of this UserPreferences.
        :type: str
        """
        self._ticker_group = ticker_group

    @property
    def ticker_pinned(self):
        """
        Gets the ticker_pinned of this UserPreferences.


        :return: The ticker_pinned of this UserPreferences.
        :rtype: bool
        """
        return self._ticker_pinned

    @ticker_pinned.setter
    def ticker_pinned(self, ticker_pinned):
        """
        Sets the ticker_pinned of this UserPreferences.


        :param ticker_pinned: The ticker_pinned of this UserPreferences.
        :type: bool
        """
        self._ticker_pinned = ticker_pinned

    @property
    def trade_layout(self):
        """
        Gets the trade_layout of this UserPreferences.


        :return: The trade_layout of this UserPreferences.
        :rtype: str
        """
        return self._trade_layout

    @trade_layout.setter
    def trade_layout(self, trade_layout):
        """
        Sets the trade_layout of this UserPreferences.


        :param trade_layout: The trade_layout of this UserPreferences.
        :type: str
        """
        self._trade_layout = trade_layout

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

