# coding: utf-8

"""
    BitMEX API

    REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Trade(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, timestamp=None, symbol=None, side=None, size=None, price=None, tick_direction=None, trd_match_id=None, gross_value=None, home_notional=None, foreign_notional=None, id=None):
        """
        Trade - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'timestamp': 'date',
            'symbol': 'str',
            'side': 'str',
            'size': 'float',
            'price': 'float',
            'tick_direction': 'str',
            'trd_match_id': 'str',
            'gross_value': 'float',
            'home_notional': 'float',
            'foreign_notional': 'float',
            'id': 'float'
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'symbol': 'symbol',
            'side': 'side',
            'size': 'size',
            'price': 'price',
            'tick_direction': 'tickDirection',
            'trd_match_id': 'trdMatchID',
            'gross_value': 'grossValue',
            'home_notional': 'homeNotional',
            'foreign_notional': 'foreignNotional',
            'id': 'id'
        }

        self._timestamp = timestamp
        self._symbol = symbol
        self._side = side
        self._size = size
        self._price = price
        self._tick_direction = tick_direction
        self._trd_match_id = trd_match_id
        self._gross_value = gross_value
        self._home_notional = home_notional
        self._foreign_notional = foreign_notional
        self._id = id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Trade.


        :return: The timestamp of this Trade.
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Trade.


        :param timestamp: The timestamp of this Trade.
        :type: date
        """

        self._timestamp = timestamp

    @property
    def symbol(self):
        """
        Gets the symbol of this Trade.


        :return: The symbol of this Trade.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """
        Sets the symbol of this Trade.


        :param symbol: The symbol of this Trade.
        :type: str
        """

        self._symbol = symbol

    @property
    def side(self):
        """
        Gets the side of this Trade.


        :return: The side of this Trade.
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """
        Sets the side of this Trade.


        :param side: The side of this Trade.
        :type: str
        """

        self._side = side

    @property
    def size(self):
        """
        Gets the size of this Trade.


        :return: The size of this Trade.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this Trade.


        :param size: The size of this Trade.
        :type: float
        """

        self._size = size

    @property
    def price(self):
        """
        Gets the price of this Trade.


        :return: The price of this Trade.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this Trade.


        :param price: The price of this Trade.
        :type: float
        """

        self._price = price

    @property
    def tick_direction(self):
        """
        Gets the tick_direction of this Trade.


        :return: The tick_direction of this Trade.
        :rtype: str
        """
        return self._tick_direction

    @tick_direction.setter
    def tick_direction(self, tick_direction):
        """
        Sets the tick_direction of this Trade.


        :param tick_direction: The tick_direction of this Trade.
        :type: str
        """

        self._tick_direction = tick_direction

    @property
    def trd_match_id(self):
        """
        Gets the trd_match_id of this Trade.


        :return: The trd_match_id of this Trade.
        :rtype: str
        """
        return self._trd_match_id

    @trd_match_id.setter
    def trd_match_id(self, trd_match_id):
        """
        Sets the trd_match_id of this Trade.


        :param trd_match_id: The trd_match_id of this Trade.
        :type: str
        """

        self._trd_match_id = trd_match_id

    @property
    def gross_value(self):
        """
        Gets the gross_value of this Trade.


        :return: The gross_value of this Trade.
        :rtype: float
        """
        return self._gross_value

    @gross_value.setter
    def gross_value(self, gross_value):
        """
        Sets the gross_value of this Trade.


        :param gross_value: The gross_value of this Trade.
        :type: float
        """

        self._gross_value = gross_value

    @property
    def home_notional(self):
        """
        Gets the home_notional of this Trade.


        :return: The home_notional of this Trade.
        :rtype: float
        """
        return self._home_notional

    @home_notional.setter
    def home_notional(self, home_notional):
        """
        Sets the home_notional of this Trade.


        :param home_notional: The home_notional of this Trade.
        :type: float
        """

        self._home_notional = home_notional

    @property
    def foreign_notional(self):
        """
        Gets the foreign_notional of this Trade.


        :return: The foreign_notional of this Trade.
        :rtype: float
        """
        return self._foreign_notional

    @foreign_notional.setter
    def foreign_notional(self, foreign_notional):
        """
        Sets the foreign_notional of this Trade.


        :param foreign_notional: The foreign_notional of this Trade.
        :type: float
        """

        self._foreign_notional = foreign_notional

    @property
    def id(self):
        """
        Gets the id of this Trade.


        :return: The id of this Trade.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Trade.


        :param id: The id of this Trade.
        :type: float
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
