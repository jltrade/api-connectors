# coding: utf-8

"""
    BitMEX API

    REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>

    OpenAPI spec version: 1.2.0
    Contact: support@bitmex.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Quote(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, timestamp=None, symbol=None, bid_size=None, bid_price=None, ask_price=None, ask_size=None, id=None):
        """
        Quote - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'timestamp': 'date',
            'symbol': 'str',
            'bid_size': 'float',
            'bid_price': 'float',
            'ask_price': 'float',
            'ask_size': 'float',
            'id': 'float'
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'symbol': 'symbol',
            'bid_size': 'bidSize',
            'bid_price': 'bidPrice',
            'ask_price': 'askPrice',
            'ask_size': 'askSize',
            'id': 'id'
        }

        self._timestamp = timestamp
        self._symbol = symbol
        self._bid_size = bid_size
        self._bid_price = bid_price
        self._ask_price = ask_price
        self._ask_size = ask_size
        self._id = id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Quote.


        :return: The timestamp of this Quote.
        :rtype: date
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Quote.


        :param timestamp: The timestamp of this Quote.
        :type: date
        """

        self._timestamp = timestamp

    @property
    def symbol(self):
        """
        Gets the symbol of this Quote.


        :return: The symbol of this Quote.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """
        Sets the symbol of this Quote.


        :param symbol: The symbol of this Quote.
        :type: str
        """

        self._symbol = symbol

    @property
    def bid_size(self):
        """
        Gets the bid_size of this Quote.


        :return: The bid_size of this Quote.
        :rtype: float
        """
        return self._bid_size

    @bid_size.setter
    def bid_size(self, bid_size):
        """
        Sets the bid_size of this Quote.


        :param bid_size: The bid_size of this Quote.
        :type: float
        """

        self._bid_size = bid_size

    @property
    def bid_price(self):
        """
        Gets the bid_price of this Quote.


        :return: The bid_price of this Quote.
        :rtype: float
        """
        return self._bid_price

    @bid_price.setter
    def bid_price(self, bid_price):
        """
        Sets the bid_price of this Quote.


        :param bid_price: The bid_price of this Quote.
        :type: float
        """

        self._bid_price = bid_price

    @property
    def ask_price(self):
        """
        Gets the ask_price of this Quote.


        :return: The ask_price of this Quote.
        :rtype: float
        """
        return self._ask_price

    @ask_price.setter
    def ask_price(self, ask_price):
        """
        Sets the ask_price of this Quote.


        :param ask_price: The ask_price of this Quote.
        :type: float
        """

        self._ask_price = ask_price

    @property
    def ask_size(self):
        """
        Gets the ask_size of this Quote.


        :return: The ask_size of this Quote.
        :rtype: float
        """
        return self._ask_size

    @ask_size.setter
    def ask_size(self, ask_size):
        """
        Sets the ask_size of this Quote.


        :param ask_size: The ask_size of this Quote.
        :type: float
        """

        self._ask_size = ask_size

    @property
    def id(self):
        """
        Gets the id of this Quote.


        :return: The id of this Quote.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Quote.


        :param id: The id of this Quote.
        :type: float
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
