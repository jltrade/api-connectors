/**
 * BitMEX API
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitMexApi.Margin();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Margin', function() {
    it('should create an instance of Margin', function() {
      // uncomment below and update the code to test Margin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be.a(BitMexApi.Margin);
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property riskLimit (base name: "riskLimit")', function() {
      // uncomment below and update the code to test the property riskLimit
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property prevState (base name: "prevState")', function() {
      // uncomment below and update the code to test the property prevState
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property action (base name: "action")', function() {
      // uncomment below and update the code to test the property action
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property pendingCredit (base name: "pendingCredit")', function() {
      // uncomment below and update the code to test the property pendingCredit
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property pendingDebit (base name: "pendingDebit")', function() {
      // uncomment below and update the code to test the property pendingDebit
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property confirmedDebit (base name: "confirmedDebit")', function() {
      // uncomment below and update the code to test the property confirmedDebit
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property prevRealisedPnl (base name: "prevRealisedPnl")', function() {
      // uncomment below and update the code to test the property prevRealisedPnl
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property prevUnrealisedPnl (base name: "prevUnrealisedPnl")', function() {
      // uncomment below and update the code to test the property prevUnrealisedPnl
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property grossComm (base name: "grossComm")', function() {
      // uncomment below and update the code to test the property grossComm
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property grossOpenCost (base name: "grossOpenCost")', function() {
      // uncomment below and update the code to test the property grossOpenCost
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property grossOpenPremium (base name: "grossOpenPremium")', function() {
      // uncomment below and update the code to test the property grossOpenPremium
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property grossExecCost (base name: "grossExecCost")', function() {
      // uncomment below and update the code to test the property grossExecCost
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property grossMarkValue (base name: "grossMarkValue")', function() {
      // uncomment below and update the code to test the property grossMarkValue
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property riskValue (base name: "riskValue")', function() {
      // uncomment below and update the code to test the property riskValue
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property taxableMargin (base name: "taxableMargin")', function() {
      // uncomment below and update the code to test the property taxableMargin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property initMargin (base name: "initMargin")', function() {
      // uncomment below and update the code to test the property initMargin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property maintMargin (base name: "maintMargin")', function() {
      // uncomment below and update the code to test the property maintMargin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property sessionMargin (base name: "sessionMargin")', function() {
      // uncomment below and update the code to test the property sessionMargin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property targetExcessMargin (base name: "targetExcessMargin")', function() {
      // uncomment below and update the code to test the property targetExcessMargin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property varMargin (base name: "varMargin")', function() {
      // uncomment below and update the code to test the property varMargin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property realisedPnl (base name: "realisedPnl")', function() {
      // uncomment below and update the code to test the property realisedPnl
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property unrealisedPnl (base name: "unrealisedPnl")', function() {
      // uncomment below and update the code to test the property unrealisedPnl
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property indicativeTax (base name: "indicativeTax")', function() {
      // uncomment below and update the code to test the property indicativeTax
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property unrealisedProfit (base name: "unrealisedProfit")', function() {
      // uncomment below and update the code to test the property unrealisedProfit
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property syntheticMargin (base name: "syntheticMargin")', function() {
      // uncomment below and update the code to test the property syntheticMargin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property walletBalance (base name: "walletBalance")', function() {
      // uncomment below and update the code to test the property walletBalance
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property marginBalance (base name: "marginBalance")', function() {
      // uncomment below and update the code to test the property marginBalance
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property marginBalancePcnt (base name: "marginBalancePcnt")', function() {
      // uncomment below and update the code to test the property marginBalancePcnt
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property marginLeverage (base name: "marginLeverage")', function() {
      // uncomment below and update the code to test the property marginLeverage
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property marginUsedPcnt (base name: "marginUsedPcnt")', function() {
      // uncomment below and update the code to test the property marginUsedPcnt
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property excessMargin (base name: "excessMargin")', function() {
      // uncomment below and update the code to test the property excessMargin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property excessMarginPcnt (base name: "excessMarginPcnt")', function() {
      // uncomment below and update the code to test the property excessMarginPcnt
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property availableMargin (base name: "availableMargin")', function() {
      // uncomment below and update the code to test the property availableMargin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property withdrawableMargin (base name: "withdrawableMargin")', function() {
      // uncomment below and update the code to test the property withdrawableMargin
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property grossLastValue (base name: "grossLastValue")', function() {
      // uncomment below and update the code to test the property grossLastValue
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

    it('should have the property commission (base name: "commission")', function() {
      // uncomment below and update the code to test the property commission
      //var instane = new BitMexApi.Margin();
      //expect(instance).to.be();
    });

  });

}));
