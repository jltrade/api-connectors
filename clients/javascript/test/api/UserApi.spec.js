/**
 * BitMEX API
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitMexApi.UserApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserApi', function() {
    describe('userCancelWithdrawal', function() {
      it('should call userCancelWithdrawal successfully', function(done) {
        //uncomment below and update the code to test userCancelWithdrawal
        //instance.userCancelWithdrawal(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userCheckReferralCode', function() {
      it('should call userCheckReferralCode successfully', function(done) {
        //uncomment below and update the code to test userCheckReferralCode
        //instance.userCheckReferralCode(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userConfirmEmail', function() {
      it('should call userConfirmEmail successfully', function(done) {
        //uncomment below and update the code to test userConfirmEmail
        //instance.userConfirmEmail(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userConfirmEnableTFA', function() {
      it('should call userConfirmEnableTFA successfully', function(done) {
        //uncomment below and update the code to test userConfirmEnableTFA
        //instance.userConfirmEnableTFA(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userConfirmPasswordReset', function() {
      it('should call userConfirmPasswordReset successfully', function(done) {
        //uncomment below and update the code to test userConfirmPasswordReset
        //instance.userConfirmPasswordReset(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userConfirmWithdrawal', function() {
      it('should call userConfirmWithdrawal successfully', function(done) {
        //uncomment below and update the code to test userConfirmWithdrawal
        //instance.userConfirmWithdrawal(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userDisableTFA', function() {
      it('should call userDisableTFA successfully', function(done) {
        //uncomment below and update the code to test userDisableTFA
        //instance.userDisableTFA(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGet', function() {
      it('should call userGet successfully', function(done) {
        //uncomment below and update the code to test userGet
        //instance.userGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetAffiliateStatus', function() {
      it('should call userGetAffiliateStatus successfully', function(done) {
        //uncomment below and update the code to test userGetAffiliateStatus
        //instance.userGetAffiliateStatus(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetCommission', function() {
      it('should call userGetCommission successfully', function(done) {
        //uncomment below and update the code to test userGetCommission
        //instance.userGetCommission(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetDepositAddress', function() {
      it('should call userGetDepositAddress successfully', function(done) {
        //uncomment below and update the code to test userGetDepositAddress
        //instance.userGetDepositAddress(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetMargin', function() {
      it('should call userGetMargin successfully', function(done) {
        //uncomment below and update the code to test userGetMargin
        //instance.userGetMargin(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userGetWalletHistory', function() {
      it('should call userGetWalletHistory successfully', function(done) {
        //uncomment below and update the code to test userGetWalletHistory
        //instance.userGetWalletHistory(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userLogin', function() {
      it('should call userLogin successfully', function(done) {
        //uncomment below and update the code to test userLogin
        //instance.userLogin(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userLogout', function() {
      it('should call userLogout successfully', function(done) {
        //uncomment below and update the code to test userLogout
        //instance.userLogout(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userLogoutAll', function() {
      it('should call userLogoutAll successfully', function(done) {
        //uncomment below and update the code to test userLogoutAll
        //instance.userLogoutAll(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userNew', function() {
      it('should call userNew successfully', function(done) {
        //uncomment below and update the code to test userNew
        //instance.userNew(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userRequestEnableTFA', function() {
      it('should call userRequestEnableTFA successfully', function(done) {
        //uncomment below and update the code to test userRequestEnableTFA
        //instance.userRequestEnableTFA(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userRequestPasswordReset', function() {
      it('should call userRequestPasswordReset successfully', function(done) {
        //uncomment below and update the code to test userRequestPasswordReset
        //instance.userRequestPasswordReset(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userRequestWithdrawal', function() {
      it('should call userRequestWithdrawal successfully', function(done) {
        //uncomment below and update the code to test userRequestWithdrawal
        //instance.userRequestWithdrawal(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userSavePreferences', function() {
      it('should call userSavePreferences successfully', function(done) {
        //uncomment below and update the code to test userSavePreferences
        //instance.userSavePreferences(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userSendVerificationEmail', function() {
      it('should call userSendVerificationEmail successfully', function(done) {
        //uncomment below and update the code to test userSendVerificationEmail
        //instance.userSendVerificationEmail(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userUpdate', function() {
      it('should call userUpdate successfully', function(done) {
        //uncomment below and update the code to test userUpdate
        //instance.userUpdate(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
