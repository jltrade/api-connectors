/**
 * BitMEX API
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Position', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Position'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.BitMexApi) {
      root.BitMexApi = {};
    }
    root.BitMexApi.PositionApi = factory(root.BitMexApi.ApiClient, root.BitMexApi.Position, root.BitMexApi.Error);
  }
}(this, function(ApiClient, Position, Error) {
  'use strict';

  /**
   * Position service.
   * @module api/PositionApi
   * @version 1.2.0
   */

  /**
   * Constructs a new PositionApi. 
   * @alias module:api/PositionApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the positionGet operation.
     * @callback module:api/PositionApi~positionGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Position>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your positions.
     * See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_AP_6580.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}.
     * @param {String} opts.columns Which columns to fetch. For example, send [\&quot;columnName\&quot;].
     * @param {Number} opts.count Number of rows to fetch.
     * @param {module:api/PositionApi~positionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Position>}
     */
    this.positionGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter': opts['filter'],
        'columns': opts['columns'],
        'count': opts['count']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Position];

      return this.apiClient.callApi(
        '/position', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the positionIsolateMargin operation.
     * @callback module:api/PositionApi~positionIsolateMarginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable isolated margin or cross margin per-position.
     * On Speculative (DPE-Enabled) contracts, users can switch isolate margin per-position. This function allows switching margin isolation (aka fixed margin) on and off.
     * @param {String} symbol Position symbol to isolate.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.enabled True for isolated margin, false for cross margin. (default to true)
     * @param {module:api/PositionApi~positionIsolateMarginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Position}
     */
    this.positionIsolateMargin = function(symbol, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol == undefined || symbol == null) {
        throw "Missing the required parameter 'symbol' when calling positionIsolateMargin";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'symbol': symbol,
        'enabled': opts['enabled']
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/position/isolate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the positionTransferIsolatedMargin operation.
     * @callback module:api/PositionApi~positionTransferIsolatedMarginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer equity in or out of a position.
     * When margin is isolated on a position, use this function to add or remove margin from the position. Note that you cannot remove margin below the initial margin threshold.
     * @param {String} symbol Symbol of position to isolate.
     * @param {Number} amount Amount to transfer, in Satoshis. May be negative.
     * @param {module:api/PositionApi~positionTransferIsolatedMarginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Position}
     */
    this.positionTransferIsolatedMargin = function(symbol, amount, callback) {
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol == undefined || symbol == null) {
        throw "Missing the required parameter 'symbol' when calling positionTransferIsolatedMargin";
      }

      // verify the required parameter 'amount' is set
      if (amount == undefined || amount == null) {
        throw "Missing the required parameter 'amount' when calling positionTransferIsolatedMargin";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'symbol': symbol,
        'amount': amount
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/position/transferMargin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the positionUpdateLeverage operation.
     * @callback module:api/PositionApi~positionUpdateLeverageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Position} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Choose leverage for a position.
     * On Speculative (DPE-Enabled) contracts, users can choose an isolated leverage. This will automatically enable isolated margin.
     * @param {String} symbol Symbol of position to adjust.
     * @param {Number} leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin.
     * @param {module:api/PositionApi~positionUpdateLeverageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Position}
     */
    this.positionUpdateLeverage = function(symbol, leverage, callback) {
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol == undefined || symbol == null) {
        throw "Missing the required parameter 'symbol' when calling positionUpdateLeverage";
      }

      // verify the required parameter 'leverage' is set
      if (leverage == undefined || leverage == null) {
        throw "Missing the required parameter 'leverage' when calling positionUpdateLeverage";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'symbol': symbol,
        'leverage': leverage
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = Position;

      return this.apiClient.callApi(
        '/position/leverage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
