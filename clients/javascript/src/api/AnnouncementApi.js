/**
 * BitMEX API
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Announcement', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Announcement'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.BitMexApi) {
      root.BitMexApi = {};
    }
    root.BitMexApi.AnnouncementApi = factory(root.BitMexApi.ApiClient, root.BitMexApi.Announcement, root.BitMexApi.Error);
  }
}(this, function(ApiClient, Announcement, Error) {
  'use strict';

  /**
   * Announcement service.
   * @module api/AnnouncementApi
   * @version 1.2.0
   */

  /**
   * Constructs a new AnnouncementApi. 
   * @alias module:api/AnnouncementApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the announcementGet operation.
     * @callback module:api/AnnouncementApi~announcementGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Announcement>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get site announcements.
     * @param {Object} opts Optional parameters
     * @param {String} opts.columns Array of column names to fetch. If omitted, will return all columns.
     * @param {module:api/AnnouncementApi~announcementGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Announcement>}
     */
    this.announcementGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'columns': opts['columns']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Announcement];

      return this.apiClient.callApi(
        '/announcement', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the announcementGetUrgent operation.
     * @callback module:api/AnnouncementApi~announcementGetUrgentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Announcement>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get urgent (banner) announcements.
     * @param {module:api/AnnouncementApi~announcementGetUrgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Announcement>}
     */
    this.announcementGetUrgent = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [Announcement];

      return this.apiClient.callApi(
        '/announcement/urgent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
