/**
 * BitMEX API
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiKey', 'model/Error', 'model/InlineResponse200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApiKey'), require('../model/Error'), require('../model/InlineResponse200'));
  } else {
    // Browser globals (root is window)
    if (!root.BitMexApi) {
      root.BitMexApi = {};
    }
    root.BitMexApi.ApiKeyApi = factory(root.BitMexApi.ApiClient, root.BitMexApi.ApiKey, root.BitMexApi.Error, root.BitMexApi.InlineResponse200);
  }
}(this, function(ApiClient, ApiKey, Error, InlineResponse200) {
  'use strict';

  /**
   * ApiKey service.
   * @module api/ApiKeyApi
   * @version 1.2.0
   */

  /**
   * Constructs a new ApiKeyApi. 
   * @alias module:api/ApiKeyApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiKeyDisable operation.
     * @callback module:api/ApiKeyApi~apiKeyDisableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable an API Key.
     * @param {String} apiKeyID API Key ID (public component).
     * @param {module:api/ApiKeyApi~apiKeyDisableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/ApiKey}
     */
    this.apiKeyDisable = function(apiKeyID, callback) {
      var postBody = null;

      // verify the required parameter 'apiKeyID' is set
      if (apiKeyID == undefined || apiKeyID == null) {
        throw "Missing the required parameter 'apiKeyID' when calling apiKeyDisable";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'apiKeyID': apiKeyID
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = ApiKey;

      return this.apiClient.callApi(
        '/apiKey/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyEnable operation.
     * @callback module:api/ApiKeyApi~apiKeyEnableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable an API Key.
     * @param {String} apiKeyID API Key ID (public component).
     * @param {module:api/ApiKeyApi~apiKeyEnableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/ApiKey}
     */
    this.apiKeyEnable = function(apiKeyID, callback) {
      var postBody = null;

      // verify the required parameter 'apiKeyID' is set
      if (apiKeyID == undefined || apiKeyID == null) {
        throw "Missing the required parameter 'apiKeyID' when calling apiKeyEnable";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'apiKeyID': apiKeyID
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = ApiKey;

      return this.apiClient.callApi(
        '/apiKey/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyGet operation.
     * @callback module:api/ApiKeyApi~apiKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your API Keys.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.reverse If true, will sort results newest first. (default to false)
     * @param {module:api/ApiKeyApi~apiKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/ApiKey>}
     */
    this.apiKeyGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'reverse': opts['reverse']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = [ApiKey];

      return this.apiClient.callApi(
        '/apiKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyNew operation.
     * @callback module:api/ApiKeyApi~apiKeyNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new API Key.
     * API Keys can also be created via [this Python script](https://github.com/BitMEX/market-maker/blob/master/generate-api-key.py) See the [API Key Documentation](/app/apiKeys) for more information on capabilities.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Key name. This name is for reference only.
     * @param {String} opts.cidr CIDR block to restrict this key to. To restrict to a single address, append \&quot;/32\&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href&#x3D;\&quot;http://software77.net/cidr-101.html\&quot;&gt;More on CIDR blocks&lt;/a&gt;
     * @param {String} opts.permissions Key Permissions. All keys can read margin and position data. Additional permissions must be added. Available: [\&quot;order\&quot;, \&quot;withdraw\&quot;].
     * @param {Boolean} opts.enabled Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (default to false)
     * @param {String} opts.token OTP Token (YubiKey, Google Authenticator)
     * @param {module:api/ApiKeyApi~apiKeyNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/ApiKey}
     */
    this.apiKeyNew = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'name': opts['name'],
        'cidr': opts['cidr'],
        'permissions': opts['permissions'],
        'enabled': opts['enabled'],
        'token': opts['token']
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = ApiKey;

      return this.apiClient.callApi(
        '/apiKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyRemove operation.
     * @callback module:api/ApiKeyApi~apiKeyRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an API Key.
     * @param {String} apiKeyID API Key ID (public component).
     * @param {module:api/ApiKeyApi~apiKeyRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/InlineResponse200}
     */
    this.apiKeyRemove = function(apiKeyID, callback) {
      var postBody = null;

      // verify the required parameter 'apiKeyID' is set
      if (apiKeyID == undefined || apiKeyID == null) {
        throw "Missing the required parameter 'apiKeyID' when calling apiKeyRemove";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'apiKeyID': apiKeyID
      };

      var authNames = [];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/apiKey', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
