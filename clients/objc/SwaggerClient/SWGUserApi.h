#import <Foundation/Foundation.h>
#import "SWGUser.h"
#import "SWGAffiliate.h"
#import "SWGTransaction.h"
#import "SWGUserCommission.h"
#import "SWGAccessToken.h"
#import "SWGMargin.h"
#import "SWGObject.h"
#import "SWGApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface SWGUserApi: NSObject

@property(nonatomic, assign)SWGApiClient *apiClient;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(SWGUserApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;
+(SWGUserApi*) sharedAPI;
///
///
/// Get your user model.
/// 
///
/// 
///
/// @return SWGUser*
-(NSNumber*) userGetWithCompletionBlock :
    (void (^)(SWGUser* output, NSError* error))completionBlock;
    


///
///
/// Update your password, name, and other attributes.
/// 
///
/// @param firstname 
/// @param lastname 
/// @param oldPassword 
/// @param newPassword 
/// @param newPasswordConfirm 
/// @param username Username can only be set once. To reset, email support.
/// @param country Country of residence.
/// @param pgpPubKey PGP Public Key. If specified, automated emails will be sentwith this key.
/// 
///
/// @return SWGUser*
-(NSNumber*) userUpdateWithCompletionBlock :(NSString*) firstname 
     lastname:(NSString*) lastname 
     oldPassword:(NSString*) oldPassword 
     newPassword:(NSString*) newPassword 
     newPasswordConfirm:(NSString*) newPasswordConfirm 
     username:(NSString*) username 
     country:(NSString*) country 
     pgpPubKey:(NSString*) pgpPubKey 
    
    completionHandler: (void (^)(SWGUser* output, NSError* error))completionBlock;
    


///
///
/// Register a new user.
/// 
///
/// @param email Your email address.
/// @param password Your password.
/// @param country Country of residence.
/// @param username Desired username.
/// @param firstname First name.
/// @param lastname Last name.
/// @param acceptsTOS Set to true to indicate acceptance of the Terms of Service (https://www.bitmex.com/terms).
/// @param referrerID Optional Referrer ID.
/// @param tfaType Optional Two-Factor Type. Accepted values: GA, Yubikey, Clef
/// @param tfaToken Two-Factor Token.
/// 
///
/// @return SWGUser*
-(NSNumber*) userNewWithCompletionBlock :(NSString*) email 
     password:(NSString*) password 
     country:(NSString*) country 
     username:(NSString*) username 
     firstname:(NSString*) firstname 
     lastname:(NSString*) lastname 
     acceptsTOS:(NSString*) acceptsTOS 
     referrerID:(NSString*) referrerID 
     tfaType:(NSString*) tfaType 
     tfaToken:(NSString*) tfaToken 
    
    completionHandler: (void (^)(SWGUser* output, NSError* error))completionBlock;
    


///
///
/// Get your current affiliate/referral status.
/// 
///
/// 
///
/// @return NSArray<SWGAffiliate>*
-(NSNumber*) userGetAffiliateStatusWithCompletionBlock :
    (void (^)(NSArray<SWGAffiliate>* output, NSError* error))completionBlock;
    


///
///
/// Cancel a withdrawal.
/// 
///
/// @param token 
/// 
///
/// @return SWGTransaction*
-(NSNumber*) userCancelWithdrawalWithCompletionBlock :(NSString*) token 
    
    completionHandler: (void (^)(SWGTransaction* output, NSError* error))completionBlock;
    


///
///
/// Check if a referral code is valid.
/// If the code is valid, responds with the referral code's discount (e.g. `0.1` for 10%). Otherwise, will return a 404.
///
/// @param referralCode 
/// 
///
/// @return NSNumber*
-(NSNumber*) userCheckReferralCodeWithCompletionBlock :(NSString*) referralCode 
    
    completionHandler: (void (^)(NSNumber* output, NSError* error))completionBlock;
    


///
///
/// Get your account's commission status.
/// 
///
/// 
///
/// @return NSArray<SWGUserCommission>*
-(NSNumber*) userGetCommissionWithCompletionBlock :
    (void (^)(NSArray<SWGUserCommission>* output, NSError* error))completionBlock;
    


///
///
/// Confirm your email address with a token.
/// 
///
/// @param token 
/// 
///
/// @return SWGAccessToken*
-(NSNumber*) userConfirmEmailWithCompletionBlock :(NSString*) token 
    
    completionHandler: (void (^)(SWGAccessToken* output, NSError* error))completionBlock;
    


///
///
/// Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
/// 
///
/// @param token Token from your selected TFA type.
/// @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator), &#39;Yubikey&#39;
/// 
///
/// @return NSNumber*
-(NSNumber*) userConfirmEnableTFAWithCompletionBlock :(NSString*) token 
     type:(NSString*) type 
    
    completionHandler: (void (^)(NSNumber* output, NSError* error))completionBlock;
    


///
///
/// Confirm a password reset.
/// 
///
/// @param token 
/// @param newPassword 
/// 
///
/// @return NSNumber*
-(NSNumber*) userConfirmPasswordResetWithCompletionBlock :(NSString*) token 
     newPassword:(NSString*) newPassword 
    
    completionHandler: (void (^)(NSNumber* output, NSError* error))completionBlock;
    


///
///
/// Confirm a withdrawal.
/// 
///
/// @param token 
/// 
///
/// @return SWGTransaction*
-(NSNumber*) userConfirmWithdrawalWithCompletionBlock :(NSString*) token 
    
    completionHandler: (void (^)(SWGTransaction* output, NSError* error))completionBlock;
    


///
///
/// Get a deposit address.
/// 
///
/// @param currency 
/// 
///
/// @return NSString*
-(NSNumber*) userGetDepositAddressWithCompletionBlock :(NSString*) currency 
    
    completionHandler: (void (^)(NSString* output, NSError* error))completionBlock;
    


///
///
/// Disable two-factor auth for this account.
/// 
///
/// @param token Token from your selected TFA type.
/// @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
/// 
///
/// @return NSNumber*
-(NSNumber*) userDisableTFAWithCompletionBlock :(NSString*) token 
     type:(NSString*) type 
    
    completionHandler: (void (^)(NSNumber* output, NSError* error))completionBlock;
    


///
///
/// Log in to BitMEX.
/// 
///
/// @param email Your email address.
/// @param password Your password.
/// @param token OTP Token (YubiKey, Google Authenticator)
/// 
///
/// @return SWGAccessToken*
-(NSNumber*) userLoginWithCompletionBlock :(NSString*) email 
     password:(NSString*) password 
     token:(NSString*) token 
    
    completionHandler: (void (^)(SWGAccessToken* output, NSError* error))completionBlock;
    


///
///
/// Log out of BitMEX.
/// 
///
/// 
///
/// @return 
-(NSNumber*) userLogoutWithCompletionBlock :
    
    (void (^)(NSError* error))completionBlock;


///
///
/// Log all systems out of BitMEX. This will revoke all of your account's access tokens, logging you out on all devices.
/// 
///
/// 
///
/// @return NSNumber*
-(NSNumber*) userLogoutAllWithCompletionBlock :
    (void (^)(NSNumber* output, NSError* error))completionBlock;
    


///
///
/// Get your account's margin status. Send a currency of \"all\" to receive an array of all supported currencies.
/// 
///
/// @param currency 
/// 
///
/// @return SWGMargin*
-(NSNumber*) userGetMarginWithCompletionBlock :(NSString*) currency 
    
    completionHandler: (void (^)(SWGMargin* output, NSError* error))completionBlock;
    


///
///
/// Save user preferences.
/// 
///
/// @param prefs 
/// @param overwrite If true, will overwrite all existing preferences.
/// 
///
/// @return SWGUser*
-(NSNumber*) userSavePreferencesWithCompletionBlock :(NSString*) prefs 
     overwrite:(NSNumber*) overwrite 
    
    completionHandler: (void (^)(SWGUser* output, NSError* error))completionBlock;
    


///
///
/// Get Google Authenticator secret key for setting up two-factor auth. Fails if already enabled. Use /confirmEnableTFA for Yubikeys.
/// 
///
/// @param type Two-factor auth type. Supported types: &#39;GA&#39; (Google Authenticator)
/// 
///
/// @return NSNumber*
-(NSNumber*) userRequestEnableTFAWithCompletionBlock :(NSString*) type 
    
    completionHandler: (void (^)(NSNumber* output, NSError* error))completionBlock;
    


///
///
/// Request a password reset.
/// 
///
/// @param email 
/// 
///
/// @return NSNumber*
-(NSNumber*) userRequestPasswordResetWithCompletionBlock :(NSString*) email 
    
    completionHandler: (void (^)(NSNumber* output, NSError* error))completionBlock;
    


///
///
/// Request a withdrawal to an external wallet.
/// This will send a confirmation email to the email address on record, unless requested via an API Key with the `withdraw` permission.
///
/// @param currency Currency you&#39;re withdrawing. Options: `XBt`
/// @param amount Amount of withdrawal currency.
/// @param address Destination Address.
/// @param otpToken 2FA token. Required if 2FA is enabled on your account.
/// @param fee Network fee for Bitcoin withdrawals. If not specified, a default value will be calculated based on Bitcoin network conditions. You will have a chance to confirm this via email.
/// 
///
/// @return SWGTransaction*
-(NSNumber*) userRequestWithdrawalWithCompletionBlock :(NSString*) currency 
     amount:(NSNumber*) amount 
     address:(NSString*) address 
     otpToken:(NSString*) otpToken 
     fee:(NSNumber*) fee 
    
    completionHandler: (void (^)(SWGTransaction* output, NSError* error))completionBlock;
    


///
///
/// Re-send verification email.
/// 
///
/// @param email 
/// 
///
/// @return NSNumber*
-(NSNumber*) userSendVerificationEmailWithCompletionBlock :(NSString*) email 
    
    completionHandler: (void (^)(NSNumber* output, NSError* error))completionBlock;
    


///
///
/// Get a history of all of your wallet transactions (deposits and withdrawals).
/// 
///
/// @param currency 
/// 
///
/// @return NSArray<SWGTransaction>*
-(NSNumber*) userGetWalletHistoryWithCompletionBlock :(NSString*) currency 
    
    completionHandler: (void (^)(NSArray<SWGTransaction>* output, NSError* error))completionBlock;
    



@end
