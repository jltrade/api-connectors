/**
 * BitMEX API
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Order;
import io.swagger.client.model.Error;
import java.math.BigDecimal;
import org.joda.time.LocalDate;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    
    /**
     * Amend the quantity or price of an open order.
     *
     * &lt;p&gt;Send an &lt;code&gt;orderID&lt;/code&gt; or &lt;code&gt;clOrdID&lt;/code&gt; to identify the order you wish to amend.&lt;/p&gt; &lt;p&gt;Both order quantity and price can be amended. Only one &lt;code&gt;qty&lt;/code&gt; field can be used to amend.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;leavesQty&lt;/code&gt; field to specify how much of the order you wish to remain open. This can be useful if you want to adjust your position&amp;#39;s delta by a certain amount, regardless of how much of the order has already filled.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;simpleOrderQty&lt;/code&gt; and &lt;code&gt;simpleLeavesQty&lt;/code&gt; fields to specify order size in Bitcoin, rather than contracts. These fields will round up to the nearest contract.&lt;/p&gt; &lt;p&gt;Like order placement, amending can be done in bulk. Simply send a request to &lt;code&gt;PUT /api/v1/order/bulk&lt;/code&gt; with a JSON body of the shape: &lt;code&gt;{&amp;quot;orders&amp;quot;: [{...}, {...}]}&lt;/code&gt;, each object containing the fields used in this endpoint.&lt;/p&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderAmendTest() throws ApiException {
        String orderID = null;
        String clOrdID = null;
        Double simpleOrderQty = null;
        BigDecimal orderQty = null;
        Double simpleLeavesQty = null;
        BigDecimal leavesQty = null;
        Double price = null;
        Double stopPx = null;
        Double pegOffsetValue = null;
        String text = null;
        // Order response = api.orderAmend(orderID, clOrdID, simpleOrderQty, orderQty, simpleLeavesQty, leavesQty, price, stopPx, pegOffsetValue, text);

        // TODO: test validations
    }
    
    /**
     * Amend multiple orders.
     *
     * Similar to POST /amend, but with multiple orders. &#x60;application/json&#x60; only. Ratelimited at 50%.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderAmendBulkTest() throws ApiException {
        String orders = null;
        // List<Order> response = api.orderAmendBulk(orders);

        // TODO: test validations
    }
    
    /**
     * Cancel order(s). Send multiple order IDs to cancel in bulk.
     *
     * Either an orderID or a clOrdID must be provided.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderCancelTest() throws ApiException {
        String orderID = null;
        String clOrdID = null;
        String text = null;
        // List<Order> response = api.orderCancel(orderID, clOrdID, text);

        // TODO: test validations
    }
    
    /**
     * Cancels all of your orders.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderCancelAllTest() throws ApiException {
        String symbol = null;
        String filter = null;
        String text = null;
        // Object response = api.orderCancelAll(symbol, filter, text);

        // TODO: test validations
    }
    
    /**
     * Automatically cancel all your orders after a specified timeout.
     *
     * Useful as a dead-man&#39;s switch to ensure your orders are canceled in case of an outage. If called repeatedly, the existing offset will be canceled and a new one will be inserted in its place.  Example usage: call this route at 15s intervals with an offset of 60000 (60s). If this route is not called within 60 seconds, all your orders will be automatically canceled.  This is also available via [WebSocket](https://www.bitmex.com/app/wsAPI#dead-man-s-switch-auto-cancel-). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderCancelAllAfterTest() throws ApiException {
        Double timeout = null;
        // Object response = api.orderCancelAllAfter(timeout);

        // TODO: test validations
    }
    
    /**
     * Close a position. [Deprecated, use POST /order with execInst: &#39;Close&#39;]
     *
     * If no &#x60;price&#x60; is specified, a market order will be submitted to close the whole of your position. + This will also close all other open orders in this symbol.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderClosePositionTest() throws ApiException {
        String symbol = null;
        Double price = null;
        // Order response = api.orderClosePosition(symbol, price);

        // TODO: test validations
    }
    
    /**
     * Get your orders.
     *
     * To get open orders only, send {\&quot;open\&quot;: true} in the filter param.  See &lt;a href&#x3D;\&quot;http://www.onixs.biz/fix-dictionary/5.0.SP2/msgType_D_68.html\&quot;&gt;the FIX Spec&lt;/a&gt; for explanations of these fields.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderGetOrdersTest() throws ApiException {
        String symbol = null;
        String filter = null;
        String columns = null;
        BigDecimal count = null;
        BigDecimal start = null;
        Boolean reverse = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        // List<Order> response = api.orderGetOrders(symbol, filter, columns, count, start, reverse, startTime, endTime);

        // TODO: test validations
    }
    
    /**
     * Create a new order.
     *
     * This endpoint is used for placing orders. Valid order types are Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, and Pegged.  If no order type is provided, BitMEX will assume &#39;Limit&#39;. Be very careful with &#39;Market&#39; and &#39;Stop&#39; orders as you may be filled at an unfavourable price.  You can submit bulk orders by POSTing an array of orders to &#x60;/api/v1/order/bulk&#x60;. Send a JSON payload with the shape: &#x60;{\&quot;orders\&quot;: [{...}, {...}]}&#x60;, with each inner object containing the same fields that would be sent to this endpoint.  A note on API tools: if you want to keep track of order IDs yourself, set a unique clOrdID per order. This clOrdID will come back as a property on the order and any related executions (including on the WebSocket), and can be used to get or cancel the order. Max length is 36 characters.  To generate a clOrdID, consider setting a prefix, and incrementing a counter or generating a UUID. Some UUIDs are longer than 36 characters, so use a url-safe base64 encoding. For example, the prefix &#x60;&#39;bmex_mm_&#39;&#x60; and the UUID &#x60;&#39;7fbd6545-bb0c-11e4-a273-6003088a7c04&#39;&#x60; creates &#x60;&#39;bmex_mm_f71lRbsMEeSic2ADCIp8BA&#39;&#x60;.  See the [BitMEX Reference Market Maker](https://github.com/BitMEX/market-maker/blob/22c75a2b6db63e20212813e9afdb845db1b09b2a/bitmex.py#L152) for an example of how to use and generate clOrdIDs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderNewTest() throws ApiException {
        String symbol = null;
        String side = null;
        Double simpleOrderQty = null;
        BigDecimal quantity = null;
        BigDecimal orderQty = null;
        Double price = null;
        BigDecimal displayQty = null;
        Double stopPrice = null;
        Double stopPx = null;
        String clOrdID = null;
        String clOrdLinkID = null;
        Double pegOffsetValue = null;
        String pegPriceType = null;
        String type = null;
        String ordType = null;
        String timeInForce = null;
        String execInst = null;
        String contingencyType = null;
        String text = null;
        // Order response = api.orderNew(symbol, side, simpleOrderQty, quantity, orderQty, price, displayQty, stopPrice, stopPx, clOrdID, clOrdLinkID, pegOffsetValue, pegPriceType, type, ordType, timeInForce, execInst, contingencyType, text);

        // TODO: test validations
    }
    
    /**
     * Create multiple new orders.
     *
     * This endpoint is used for placing bulk orders. Valid order types are Market, Limit, Stop, StopLimit, MarketIfTouched, LimitIfTouched, MarketWithLeftOverAsLimit, and Pegged.  Each individual order object in the array should have the same properties as an individual POST /order call.  This endpoint is much faster for getting many orders into the book at once. Because it reduces load on BitMEX systems, this endpoint is ratelimited at &#x60;ceil(0.5 * orders)&#x60;. Submitting 10 orders via a bulk order call will only count as 5 requests.  For now, only &#x60;application/json&#x60; is supported on this endpoint. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderNewBulkTest() throws ApiException {
        String orders = null;
        // List<Order> response = api.orderNewBulk(orders);

        // TODO: test validations
    }
    
}
