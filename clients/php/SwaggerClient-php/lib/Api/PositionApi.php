<?php
/**
 * PositionApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BitMEX API
 *
 * REST API for the BitMEX.com trading platform.<br><br><a href=\"/app/restAPI\">REST Documentation</a><br><a href=\"/app/wsAPI\">Websocket Documentation</a>
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * PositionApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PositionApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/api/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return PositionApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation positionGet
     *
     * Get your positions.
     *
     * @param string $filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}. (optional)
     * @param string $columns Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)
     * @param float $count Number of rows to fetch. (optional)
     * @return \Swagger\Client\Model\Position[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function positionGet($filter = null, $columns = null, $count = null)
    {
        list($response) = $this->positionGetWithHttpInfo($filter, $columns, $count);
        return $response;
    }

    /**
     * Operation positionGetWithHttpInfo
     *
     * Get your positions.
     *
     * @param string $filter Table filter. For example, send {\&quot;symbol\&quot;: \&quot;XBT24H\&quot;}. (optional)
     * @param string $columns Which columns to fetch. For example, send [\&quot;columnName\&quot;]. (optional)
     * @param float $count Number of rows to fetch. (optional)
     * @return Array of \Swagger\Client\Model\Position[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function positionGetWithHttpInfo($filter = null, $columns = null, $count = null)
    {
        // parse inputs
        $resourcePath = "/position";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // query params
        if ($columns !== null) {
            $queryParams['columns'] = $this->apiClient->getSerializer()->toQueryValue($columns);
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Position[]',
                '/position'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Position[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Position[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation positionIsolateMargin
     *
     * Enable isolated margin or cross margin per-position.
     *
     * @param string $symbol Position symbol to isolate. (required)
     * @param bool $enabled True for isolated margin, false for cross margin. (optional, default to true)
     * @return \Swagger\Client\Model\Position
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function positionIsolateMargin($symbol, $enabled = null)
    {
        list($response) = $this->positionIsolateMarginWithHttpInfo($symbol, $enabled);
        return $response;
    }

    /**
     * Operation positionIsolateMarginWithHttpInfo
     *
     * Enable isolated margin or cross margin per-position.
     *
     * @param string $symbol Position symbol to isolate. (required)
     * @param bool $enabled True for isolated margin, false for cross margin. (optional, default to true)
     * @return Array of \Swagger\Client\Model\Position, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function positionIsolateMarginWithHttpInfo($symbol, $enabled = null)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null) {
            throw new \InvalidArgumentException('Missing the required parameter $symbol when calling positionIsolateMargin');
        }
        // parse inputs
        $resourcePath = "/position/isolate";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($symbol !== null) {
            $formParams['symbol'] = $this->apiClient->getSerializer()->toFormValue($symbol);
        }
        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = $this->apiClient->getSerializer()->toFormValue($enabled);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Position',
                '/position/isolate'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Position', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Position', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation positionTransferIsolatedMargin
     *
     * Transfer equity in or out of a position.
     *
     * @param string $symbol Symbol of position to isolate. (required)
     * @param float $amount Amount to transfer, in Satoshis. May be negative. (required)
     * @return \Swagger\Client\Model\Position
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function positionTransferIsolatedMargin($symbol, $amount)
    {
        list($response) = $this->positionTransferIsolatedMarginWithHttpInfo($symbol, $amount);
        return $response;
    }

    /**
     * Operation positionTransferIsolatedMarginWithHttpInfo
     *
     * Transfer equity in or out of a position.
     *
     * @param string $symbol Symbol of position to isolate. (required)
     * @param float $amount Amount to transfer, in Satoshis. May be negative. (required)
     * @return Array of \Swagger\Client\Model\Position, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function positionTransferIsolatedMarginWithHttpInfo($symbol, $amount)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null) {
            throw new \InvalidArgumentException('Missing the required parameter $symbol when calling positionTransferIsolatedMargin');
        }
        // verify the required parameter 'amount' is set
        if ($amount === null) {
            throw new \InvalidArgumentException('Missing the required parameter $amount when calling positionTransferIsolatedMargin');
        }
        // parse inputs
        $resourcePath = "/position/transferMargin";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($symbol !== null) {
            $formParams['symbol'] = $this->apiClient->getSerializer()->toFormValue($symbol);
        }
        // form params
        if ($amount !== null) {
            $formParams['amount'] = $this->apiClient->getSerializer()->toFormValue($amount);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Position',
                '/position/transferMargin'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Position', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Position', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation positionUpdateLeverage
     *
     * Choose leverage for a position.
     *
     * @param string $symbol Symbol of position to adjust. (required)
     * @param double $leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin. (required)
     * @return \Swagger\Client\Model\Position
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function positionUpdateLeverage($symbol, $leverage)
    {
        list($response) = $this->positionUpdateLeverageWithHttpInfo($symbol, $leverage);
        return $response;
    }

    /**
     * Operation positionUpdateLeverageWithHttpInfo
     *
     * Choose leverage for a position.
     *
     * @param string $symbol Symbol of position to adjust. (required)
     * @param double $leverage Leverage value. Send a number between 0.01 and 100 to enable isolated margin with a fixed leverage. Send 0 to enable cross margin. (required)
     * @return Array of \Swagger\Client\Model\Position, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function positionUpdateLeverageWithHttpInfo($symbol, $leverage)
    {
        // verify the required parameter 'symbol' is set
        if ($symbol === null) {
            throw new \InvalidArgumentException('Missing the required parameter $symbol when calling positionUpdateLeverage');
        }
        // verify the required parameter 'leverage' is set
        if ($leverage === null) {
            throw new \InvalidArgumentException('Missing the required parameter $leverage when calling positionUpdateLeverage');
        }
        // parse inputs
        $resourcePath = "/position/leverage";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json','application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($symbol !== null) {
            $formParams['symbol'] = $this->apiClient->getSerializer()->toFormValue($symbol);
        }
        // form params
        if ($leverage !== null) {
            $formParams['leverage'] = $this->apiClient->getSerializer()->toFormValue($leverage);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Position',
                '/position/leverage'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Position', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Position', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
